// ignore_for_file: camel_case_types
// ignore_for_file: cascade_invocations
// ignore_for_file: comment_references
// ignore_for_file: file_names
// ignore_for_file: library_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: prefer_const_declarations
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_interpolation_to_compose_strings
// ignore_for_file: unnecessary_brace_in_string_interps
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_lambdas
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unnecessary_string_interpolations
// ignore_for_file: unused_local_variable

import 'dart:async' as async;
import 'dart:convert' as convert;
import 'dart:core' as core;

import 'package:googleapis/compute/v1.dart' as api;
import 'package:http/http.dart' as http;
import 'package:test/test.dart' as unittest;

import '../test_shared.dart';

core.int buildCounterAcceleratorConfig = 0;
api.AcceleratorConfig buildAcceleratorConfig() {
  final o = api.AcceleratorConfig();
  buildCounterAcceleratorConfig++;
  if (buildCounterAcceleratorConfig < 3) {
    o.acceleratorCount = 42;
    o.acceleratorType = 'foo';
  }
  buildCounterAcceleratorConfig--;
  return o;
}

void checkAcceleratorConfig(api.AcceleratorConfig o) {
  buildCounterAcceleratorConfig++;
  if (buildCounterAcceleratorConfig < 3) {
    unittest.expect(
      o.acceleratorCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.acceleratorType!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorConfig--;
}

core.int buildCounterAcceleratorType = 0;
api.AcceleratorType buildAcceleratorType() {
  final o = api.AcceleratorType();
  buildCounterAcceleratorType++;
  if (buildCounterAcceleratorType < 3) {
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.maximumCardsPerInstance = 42;
    o.name = 'foo';
    o.selfLink = 'foo';
    o.zone = 'foo';
  }
  buildCounterAcceleratorType--;
  return o;
}

void checkAcceleratorType(api.AcceleratorType o) {
  buildCounterAcceleratorType++;
  if (buildCounterAcceleratorType < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.maximumCardsPerInstance!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorType--;
}

core.Map<core.String, api.AcceleratorTypesScopedList> buildUnnamed801() => {
      'x': buildAcceleratorTypesScopedList(),
      'y': buildAcceleratorTypesScopedList(),
    };

void checkUnnamed801(core.Map<core.String, api.AcceleratorTypesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorTypesScopedList(o['x']!);
  checkAcceleratorTypesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed802() => [
      'foo',
      'foo',
    ];

void checkUnnamed802(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAcceleratorTypeAggregatedListWarningData = 0;
api.AcceleratorTypeAggregatedListWarningData
    buildAcceleratorTypeAggregatedListWarningData() {
  final o = api.AcceleratorTypeAggregatedListWarningData();
  buildCounterAcceleratorTypeAggregatedListWarningData++;
  if (buildCounterAcceleratorTypeAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAcceleratorTypeAggregatedListWarningData--;
  return o;
}

void checkAcceleratorTypeAggregatedListWarningData(
    api.AcceleratorTypeAggregatedListWarningData o) {
  buildCounterAcceleratorTypeAggregatedListWarningData++;
  if (buildCounterAcceleratorTypeAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypeAggregatedListWarningData--;
}

core.List<api.AcceleratorTypeAggregatedListWarningData> buildUnnamed803() => [
      buildAcceleratorTypeAggregatedListWarningData(),
      buildAcceleratorTypeAggregatedListWarningData(),
    ];

void checkUnnamed803(
    core.List<api.AcceleratorTypeAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorTypeAggregatedListWarningData(o[0]);
  checkAcceleratorTypeAggregatedListWarningData(o[1]);
}

core.int buildCounterAcceleratorTypeAggregatedListWarning = 0;
api.AcceleratorTypeAggregatedListWarning
    buildAcceleratorTypeAggregatedListWarning() {
  final o = api.AcceleratorTypeAggregatedListWarning();
  buildCounterAcceleratorTypeAggregatedListWarning++;
  if (buildCounterAcceleratorTypeAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed803();
    o.message = 'foo';
  }
  buildCounterAcceleratorTypeAggregatedListWarning--;
  return o;
}

void checkAcceleratorTypeAggregatedListWarning(
    api.AcceleratorTypeAggregatedListWarning o) {
  buildCounterAcceleratorTypeAggregatedListWarning++;
  if (buildCounterAcceleratorTypeAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed803(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypeAggregatedListWarning--;
}

core.int buildCounterAcceleratorTypeAggregatedList = 0;
api.AcceleratorTypeAggregatedList buildAcceleratorTypeAggregatedList() {
  final o = api.AcceleratorTypeAggregatedList();
  buildCounterAcceleratorTypeAggregatedList++;
  if (buildCounterAcceleratorTypeAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed801();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed802();
    o.warning = buildAcceleratorTypeAggregatedListWarning();
  }
  buildCounterAcceleratorTypeAggregatedList--;
  return o;
}

void checkAcceleratorTypeAggregatedList(api.AcceleratorTypeAggregatedList o) {
  buildCounterAcceleratorTypeAggregatedList++;
  if (buildCounterAcceleratorTypeAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed801(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed802(o.unreachables!);
    checkAcceleratorTypeAggregatedListWarning(o.warning!);
  }
  buildCounterAcceleratorTypeAggregatedList--;
}

core.List<api.AcceleratorType> buildUnnamed804() => [
      buildAcceleratorType(),
      buildAcceleratorType(),
    ];

void checkUnnamed804(core.List<api.AcceleratorType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorType(o[0]);
  checkAcceleratorType(o[1]);
}

core.int buildCounterAcceleratorTypeListWarningData = 0;
api.AcceleratorTypeListWarningData buildAcceleratorTypeListWarningData() {
  final o = api.AcceleratorTypeListWarningData();
  buildCounterAcceleratorTypeListWarningData++;
  if (buildCounterAcceleratorTypeListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAcceleratorTypeListWarningData--;
  return o;
}

void checkAcceleratorTypeListWarningData(api.AcceleratorTypeListWarningData o) {
  buildCounterAcceleratorTypeListWarningData++;
  if (buildCounterAcceleratorTypeListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypeListWarningData--;
}

core.List<api.AcceleratorTypeListWarningData> buildUnnamed805() => [
      buildAcceleratorTypeListWarningData(),
      buildAcceleratorTypeListWarningData(),
    ];

void checkUnnamed805(core.List<api.AcceleratorTypeListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorTypeListWarningData(o[0]);
  checkAcceleratorTypeListWarningData(o[1]);
}

core.int buildCounterAcceleratorTypeListWarning = 0;
api.AcceleratorTypeListWarning buildAcceleratorTypeListWarning() {
  final o = api.AcceleratorTypeListWarning();
  buildCounterAcceleratorTypeListWarning++;
  if (buildCounterAcceleratorTypeListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed805();
    o.message = 'foo';
  }
  buildCounterAcceleratorTypeListWarning--;
  return o;
}

void checkAcceleratorTypeListWarning(api.AcceleratorTypeListWarning o) {
  buildCounterAcceleratorTypeListWarning++;
  if (buildCounterAcceleratorTypeListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed805(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypeListWarning--;
}

core.int buildCounterAcceleratorTypeList = 0;
api.AcceleratorTypeList buildAcceleratorTypeList() {
  final o = api.AcceleratorTypeList();
  buildCounterAcceleratorTypeList++;
  if (buildCounterAcceleratorTypeList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed804();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildAcceleratorTypeListWarning();
  }
  buildCounterAcceleratorTypeList--;
  return o;
}

void checkAcceleratorTypeList(api.AcceleratorTypeList o) {
  buildCounterAcceleratorTypeList++;
  if (buildCounterAcceleratorTypeList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed804(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkAcceleratorTypeListWarning(o.warning!);
  }
  buildCounterAcceleratorTypeList--;
}

core.List<api.AcceleratorType> buildUnnamed806() => [
      buildAcceleratorType(),
      buildAcceleratorType(),
    ];

void checkUnnamed806(core.List<api.AcceleratorType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorType(o[0]);
  checkAcceleratorType(o[1]);
}

core.int buildCounterAcceleratorTypesScopedListWarningData = 0;
api.AcceleratorTypesScopedListWarningData
    buildAcceleratorTypesScopedListWarningData() {
  final o = api.AcceleratorTypesScopedListWarningData();
  buildCounterAcceleratorTypesScopedListWarningData++;
  if (buildCounterAcceleratorTypesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAcceleratorTypesScopedListWarningData--;
  return o;
}

void checkAcceleratorTypesScopedListWarningData(
    api.AcceleratorTypesScopedListWarningData o) {
  buildCounterAcceleratorTypesScopedListWarningData++;
  if (buildCounterAcceleratorTypesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypesScopedListWarningData--;
}

core.List<api.AcceleratorTypesScopedListWarningData> buildUnnamed807() => [
      buildAcceleratorTypesScopedListWarningData(),
      buildAcceleratorTypesScopedListWarningData(),
    ];

void checkUnnamed807(core.List<api.AcceleratorTypesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorTypesScopedListWarningData(o[0]);
  checkAcceleratorTypesScopedListWarningData(o[1]);
}

core.int buildCounterAcceleratorTypesScopedListWarning = 0;
api.AcceleratorTypesScopedListWarning buildAcceleratorTypesScopedListWarning() {
  final o = api.AcceleratorTypesScopedListWarning();
  buildCounterAcceleratorTypesScopedListWarning++;
  if (buildCounterAcceleratorTypesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed807();
    o.message = 'foo';
  }
  buildCounterAcceleratorTypesScopedListWarning--;
  return o;
}

void checkAcceleratorTypesScopedListWarning(
    api.AcceleratorTypesScopedListWarning o) {
  buildCounterAcceleratorTypesScopedListWarning++;
  if (buildCounterAcceleratorTypesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed807(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAcceleratorTypesScopedListWarning--;
}

core.int buildCounterAcceleratorTypesScopedList = 0;
api.AcceleratorTypesScopedList buildAcceleratorTypesScopedList() {
  final o = api.AcceleratorTypesScopedList();
  buildCounterAcceleratorTypesScopedList++;
  if (buildCounterAcceleratorTypesScopedList < 3) {
    o.acceleratorTypes = buildUnnamed806();
    o.warning = buildAcceleratorTypesScopedListWarning();
  }
  buildCounterAcceleratorTypesScopedList--;
  return o;
}

void checkAcceleratorTypesScopedList(api.AcceleratorTypesScopedList o) {
  buildCounterAcceleratorTypesScopedList++;
  if (buildCounterAcceleratorTypesScopedList < 3) {
    checkUnnamed806(o.acceleratorTypes!);
    checkAcceleratorTypesScopedListWarning(o.warning!);
  }
  buildCounterAcceleratorTypesScopedList--;
}

core.int buildCounterAccessConfig = 0;
api.AccessConfig buildAccessConfig() {
  final o = api.AccessConfig();
  buildCounterAccessConfig++;
  if (buildCounterAccessConfig < 3) {
    o.externalIpv6 = 'foo';
    o.externalIpv6PrefixLength = 42;
    o.kind = 'foo';
    o.name = 'foo';
    o.natIP = 'foo';
    o.networkTier = 'foo';
    o.publicPtrDomainName = 'foo';
    o.setPublicPtr = true;
    o.type = 'foo';
  }
  buildCounterAccessConfig--;
  return o;
}

void checkAccessConfig(api.AccessConfig o) {
  buildCounterAccessConfig++;
  if (buildCounterAccessConfig < 3) {
    unittest.expect(
      o.externalIpv6!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.externalIpv6PrefixLength!,
      unittest.equals(42),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.natIP!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.networkTier!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.publicPtrDomainName!,
      unittest.equals('foo'),
    );
    unittest.expect(o.setPublicPtr!, unittest.isTrue);
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterAccessConfig--;
}

core.List<core.String> buildUnnamed808() => [
      'foo',
      'foo',
    ];

void checkUnnamed808(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAddress = 0;
api.Address buildAddress() {
  final o = api.Address();
  buildCounterAddress++;
  if (buildCounterAddress < 3) {
    o.address = 'foo';
    o.addressType = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.ipVersion = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.network = 'foo';
    o.networkTier = 'foo';
    o.prefixLength = 42;
    o.purpose = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.status = 'foo';
    o.subnetwork = 'foo';
    o.users = buildUnnamed808();
  }
  buildCounterAddress--;
  return o;
}

void checkAddress(api.Address o) {
  buildCounterAddress++;
  if (buildCounterAddress < 3) {
    unittest.expect(
      o.address!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.addressType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipVersion!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.networkTier!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.prefixLength!,
      unittest.equals(42),
    );
    unittest.expect(
      o.purpose!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
    checkUnnamed808(o.users!);
  }
  buildCounterAddress--;
}

core.Map<core.String, api.AddressesScopedList> buildUnnamed809() => {
      'x': buildAddressesScopedList(),
      'y': buildAddressesScopedList(),
    };

void checkUnnamed809(core.Map<core.String, api.AddressesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddressesScopedList(o['x']!);
  checkAddressesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed810() => [
      'foo',
      'foo',
    ];

void checkUnnamed810(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAddressAggregatedListWarningData = 0;
api.AddressAggregatedListWarningData buildAddressAggregatedListWarningData() {
  final o = api.AddressAggregatedListWarningData();
  buildCounterAddressAggregatedListWarningData++;
  if (buildCounterAddressAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAddressAggregatedListWarningData--;
  return o;
}

void checkAddressAggregatedListWarningData(
    api.AddressAggregatedListWarningData o) {
  buildCounterAddressAggregatedListWarningData++;
  if (buildCounterAddressAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressAggregatedListWarningData--;
}

core.List<api.AddressAggregatedListWarningData> buildUnnamed811() => [
      buildAddressAggregatedListWarningData(),
      buildAddressAggregatedListWarningData(),
    ];

void checkUnnamed811(core.List<api.AddressAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddressAggregatedListWarningData(o[0]);
  checkAddressAggregatedListWarningData(o[1]);
}

core.int buildCounterAddressAggregatedListWarning = 0;
api.AddressAggregatedListWarning buildAddressAggregatedListWarning() {
  final o = api.AddressAggregatedListWarning();
  buildCounterAddressAggregatedListWarning++;
  if (buildCounterAddressAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed811();
    o.message = 'foo';
  }
  buildCounterAddressAggregatedListWarning--;
  return o;
}

void checkAddressAggregatedListWarning(api.AddressAggregatedListWarning o) {
  buildCounterAddressAggregatedListWarning++;
  if (buildCounterAddressAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed811(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressAggregatedListWarning--;
}

core.int buildCounterAddressAggregatedList = 0;
api.AddressAggregatedList buildAddressAggregatedList() {
  final o = api.AddressAggregatedList();
  buildCounterAddressAggregatedList++;
  if (buildCounterAddressAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed809();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed810();
    o.warning = buildAddressAggregatedListWarning();
  }
  buildCounterAddressAggregatedList--;
  return o;
}

void checkAddressAggregatedList(api.AddressAggregatedList o) {
  buildCounterAddressAggregatedList++;
  if (buildCounterAddressAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed809(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed810(o.unreachables!);
    checkAddressAggregatedListWarning(o.warning!);
  }
  buildCounterAddressAggregatedList--;
}

core.List<api.Address> buildUnnamed812() => [
      buildAddress(),
      buildAddress(),
    ];

void checkUnnamed812(core.List<api.Address> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddress(o[0]);
  checkAddress(o[1]);
}

core.int buildCounterAddressListWarningData = 0;
api.AddressListWarningData buildAddressListWarningData() {
  final o = api.AddressListWarningData();
  buildCounterAddressListWarningData++;
  if (buildCounterAddressListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAddressListWarningData--;
  return o;
}

void checkAddressListWarningData(api.AddressListWarningData o) {
  buildCounterAddressListWarningData++;
  if (buildCounterAddressListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressListWarningData--;
}

core.List<api.AddressListWarningData> buildUnnamed813() => [
      buildAddressListWarningData(),
      buildAddressListWarningData(),
    ];

void checkUnnamed813(core.List<api.AddressListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddressListWarningData(o[0]);
  checkAddressListWarningData(o[1]);
}

core.int buildCounterAddressListWarning = 0;
api.AddressListWarning buildAddressListWarning() {
  final o = api.AddressListWarning();
  buildCounterAddressListWarning++;
  if (buildCounterAddressListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed813();
    o.message = 'foo';
  }
  buildCounterAddressListWarning--;
  return o;
}

void checkAddressListWarning(api.AddressListWarning o) {
  buildCounterAddressListWarning++;
  if (buildCounterAddressListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed813(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressListWarning--;
}

core.int buildCounterAddressList = 0;
api.AddressList buildAddressList() {
  final o = api.AddressList();
  buildCounterAddressList++;
  if (buildCounterAddressList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed812();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildAddressListWarning();
  }
  buildCounterAddressList--;
  return o;
}

void checkAddressList(api.AddressList o) {
  buildCounterAddressList++;
  if (buildCounterAddressList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed812(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkAddressListWarning(o.warning!);
  }
  buildCounterAddressList--;
}

core.List<api.Address> buildUnnamed814() => [
      buildAddress(),
      buildAddress(),
    ];

void checkUnnamed814(core.List<api.Address> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddress(o[0]);
  checkAddress(o[1]);
}

core.int buildCounterAddressesScopedListWarningData = 0;
api.AddressesScopedListWarningData buildAddressesScopedListWarningData() {
  final o = api.AddressesScopedListWarningData();
  buildCounterAddressesScopedListWarningData++;
  if (buildCounterAddressesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAddressesScopedListWarningData--;
  return o;
}

void checkAddressesScopedListWarningData(api.AddressesScopedListWarningData o) {
  buildCounterAddressesScopedListWarningData++;
  if (buildCounterAddressesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressesScopedListWarningData--;
}

core.List<api.AddressesScopedListWarningData> buildUnnamed815() => [
      buildAddressesScopedListWarningData(),
      buildAddressesScopedListWarningData(),
    ];

void checkUnnamed815(core.List<api.AddressesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAddressesScopedListWarningData(o[0]);
  checkAddressesScopedListWarningData(o[1]);
}

core.int buildCounterAddressesScopedListWarning = 0;
api.AddressesScopedListWarning buildAddressesScopedListWarning() {
  final o = api.AddressesScopedListWarning();
  buildCounterAddressesScopedListWarning++;
  if (buildCounterAddressesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed815();
    o.message = 'foo';
  }
  buildCounterAddressesScopedListWarning--;
  return o;
}

void checkAddressesScopedListWarning(api.AddressesScopedListWarning o) {
  buildCounterAddressesScopedListWarning++;
  if (buildCounterAddressesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed815(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAddressesScopedListWarning--;
}

core.int buildCounterAddressesScopedList = 0;
api.AddressesScopedList buildAddressesScopedList() {
  final o = api.AddressesScopedList();
  buildCounterAddressesScopedList++;
  if (buildCounterAddressesScopedList < 3) {
    o.addresses = buildUnnamed814();
    o.warning = buildAddressesScopedListWarning();
  }
  buildCounterAddressesScopedList--;
  return o;
}

void checkAddressesScopedList(api.AddressesScopedList o) {
  buildCounterAddressesScopedList++;
  if (buildCounterAddressesScopedList < 3) {
    checkUnnamed814(o.addresses!);
    checkAddressesScopedListWarning(o.warning!);
  }
  buildCounterAddressesScopedList--;
}

core.int buildCounterAdvancedMachineFeatures = 0;
api.AdvancedMachineFeatures buildAdvancedMachineFeatures() {
  final o = api.AdvancedMachineFeatures();
  buildCounterAdvancedMachineFeatures++;
  if (buildCounterAdvancedMachineFeatures < 3) {
    o.enableNestedVirtualization = true;
    o.threadsPerCore = 42;
  }
  buildCounterAdvancedMachineFeatures--;
  return o;
}

void checkAdvancedMachineFeatures(api.AdvancedMachineFeatures o) {
  buildCounterAdvancedMachineFeatures++;
  if (buildCounterAdvancedMachineFeatures < 3) {
    unittest.expect(o.enableNestedVirtualization!, unittest.isTrue);
    unittest.expect(
      o.threadsPerCore!,
      unittest.equals(42),
    );
  }
  buildCounterAdvancedMachineFeatures--;
}

core.int buildCounterAliasIpRange = 0;
api.AliasIpRange buildAliasIpRange() {
  final o = api.AliasIpRange();
  buildCounterAliasIpRange++;
  if (buildCounterAliasIpRange < 3) {
    o.ipCidrRange = 'foo';
    o.subnetworkRangeName = 'foo';
  }
  buildCounterAliasIpRange--;
  return o;
}

void checkAliasIpRange(api.AliasIpRange o) {
  buildCounterAliasIpRange++;
  if (buildCounterAliasIpRange < 3) {
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.subnetworkRangeName!,
      unittest.equals('foo'),
    );
  }
  buildCounterAliasIpRange--;
}

core.int
    buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk =
    0;
api.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
    buildAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk() {
  final o = api
      .AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk();
  buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk++;
  if (buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk <
      3) {
    o.diskSizeGb = 'foo';
    o.interface = 'foo';
  }
  buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk--;
  return o;
}

void checkAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(
    api.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
        o) {
  buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk++;
  if (buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk <
      3) {
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.interface!,
      unittest.equals('foo'),
    );
  }
  buildCounterAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk--;
}

core.List<api.AcceleratorConfig> buildUnnamed816() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed816(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.List<
        api.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk>
    buildUnnamed817() => [
          buildAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(),
          buildAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(),
        ];

void checkUnnamed817(
    core.List<
            api.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(
      o[0]);
  checkAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(
      o[1]);
}

core.int buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties =
    0;
api.AllocationSpecificSKUAllocationReservedInstanceProperties
    buildAllocationSpecificSKUAllocationReservedInstanceProperties() {
  final o = api.AllocationSpecificSKUAllocationReservedInstanceProperties();
  buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties++;
  if (buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties <
      3) {
    o.guestAccelerators = buildUnnamed816();
    o.localSsds = buildUnnamed817();
    o.locationHint = 'foo';
    o.machineType = 'foo';
    o.minCpuPlatform = 'foo';
  }
  buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties--;
  return o;
}

void checkAllocationSpecificSKUAllocationReservedInstanceProperties(
    api.AllocationSpecificSKUAllocationReservedInstanceProperties o) {
  buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties++;
  if (buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties <
      3) {
    checkUnnamed816(o.guestAccelerators!);
    checkUnnamed817(o.localSsds!);
    unittest.expect(
      o.locationHint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.machineType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.minCpuPlatform!,
      unittest.equals('foo'),
    );
  }
  buildCounterAllocationSpecificSKUAllocationReservedInstanceProperties--;
}

core.int buildCounterAllocationSpecificSKUReservation = 0;
api.AllocationSpecificSKUReservation buildAllocationSpecificSKUReservation() {
  final o = api.AllocationSpecificSKUReservation();
  buildCounterAllocationSpecificSKUReservation++;
  if (buildCounterAllocationSpecificSKUReservation < 3) {
    o.count = 'foo';
    o.inUseCount = 'foo';
    o.instanceProperties =
        buildAllocationSpecificSKUAllocationReservedInstanceProperties();
  }
  buildCounterAllocationSpecificSKUReservation--;
  return o;
}

void checkAllocationSpecificSKUReservation(
    api.AllocationSpecificSKUReservation o) {
  buildCounterAllocationSpecificSKUReservation++;
  if (buildCounterAllocationSpecificSKUReservation < 3) {
    unittest.expect(
      o.count!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.inUseCount!,
      unittest.equals('foo'),
    );
    checkAllocationSpecificSKUAllocationReservedInstanceProperties(
        o.instanceProperties!);
  }
  buildCounterAllocationSpecificSKUReservation--;
}

core.List<api.GuestOsFeature> buildUnnamed818() => [
      buildGuestOsFeature(),
      buildGuestOsFeature(),
    ];

void checkUnnamed818(core.List<api.GuestOsFeature> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkGuestOsFeature(o[0]);
  checkGuestOsFeature(o[1]);
}

core.List<core.String> buildUnnamed819() => [
      'foo',
      'foo',
    ];

void checkUnnamed819(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAttachedDisk = 0;
api.AttachedDisk buildAttachedDisk() {
  final o = api.AttachedDisk();
  buildCounterAttachedDisk++;
  if (buildCounterAttachedDisk < 3) {
    o.autoDelete = true;
    o.boot = true;
    o.deviceName = 'foo';
    o.diskEncryptionKey = buildCustomerEncryptionKey();
    o.diskSizeGb = 'foo';
    o.guestOsFeatures = buildUnnamed818();
    o.index = 42;
    o.initializeParams = buildAttachedDiskInitializeParams();
    o.interface = 'foo';
    o.kind = 'foo';
    o.licenses = buildUnnamed819();
    o.mode = 'foo';
    o.shieldedInstanceInitialState = buildInitialStateConfig();
    o.source = 'foo';
    o.type = 'foo';
  }
  buildCounterAttachedDisk--;
  return o;
}

void checkAttachedDisk(api.AttachedDisk o) {
  buildCounterAttachedDisk++;
  if (buildCounterAttachedDisk < 3) {
    unittest.expect(o.autoDelete!, unittest.isTrue);
    unittest.expect(o.boot!, unittest.isTrue);
    unittest.expect(
      o.deviceName!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.diskEncryptionKey!);
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals('foo'),
    );
    checkUnnamed818(o.guestOsFeatures!);
    unittest.expect(
      o.index!,
      unittest.equals(42),
    );
    checkAttachedDiskInitializeParams(o.initializeParams!);
    unittest.expect(
      o.interface!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkUnnamed819(o.licenses!);
    unittest.expect(
      o.mode!,
      unittest.equals('foo'),
    );
    checkInitialStateConfig(o.shieldedInstanceInitialState!);
    unittest.expect(
      o.source!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterAttachedDisk--;
}

core.Map<core.String, core.String> buildUnnamed820() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed820(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed821() => [
      'foo',
      'foo',
    ];

void checkUnnamed821(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAttachedDiskInitializeParams = 0;
api.AttachedDiskInitializeParams buildAttachedDiskInitializeParams() {
  final o = api.AttachedDiskInitializeParams();
  buildCounterAttachedDiskInitializeParams++;
  if (buildCounterAttachedDiskInitializeParams < 3) {
    o.description = 'foo';
    o.diskName = 'foo';
    o.diskSizeGb = 'foo';
    o.diskType = 'foo';
    o.labels = buildUnnamed820();
    o.onUpdateAction = 'foo';
    o.provisionedIops = 'foo';
    o.resourcePolicies = buildUnnamed821();
    o.sourceImage = 'foo';
    o.sourceImageEncryptionKey = buildCustomerEncryptionKey();
    o.sourceSnapshot = 'foo';
    o.sourceSnapshotEncryptionKey = buildCustomerEncryptionKey();
  }
  buildCounterAttachedDiskInitializeParams--;
  return o;
}

void checkAttachedDiskInitializeParams(api.AttachedDiskInitializeParams o) {
  buildCounterAttachedDiskInitializeParams++;
  if (buildCounterAttachedDiskInitializeParams < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.diskName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.diskType!,
      unittest.equals('foo'),
    );
    checkUnnamed820(o.labels!);
    unittest.expect(
      o.onUpdateAction!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.provisionedIops!,
      unittest.equals('foo'),
    );
    checkUnnamed821(o.resourcePolicies!);
    unittest.expect(
      o.sourceImage!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceImageEncryptionKey!);
    unittest.expect(
      o.sourceSnapshot!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceSnapshotEncryptionKey!);
  }
  buildCounterAttachedDiskInitializeParams--;
}

core.List<api.AuditLogConfig> buildUnnamed822() => [
      buildAuditLogConfig(),
      buildAuditLogConfig(),
    ];

void checkUnnamed822(core.List<api.AuditLogConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAuditLogConfig(o[0]);
  checkAuditLogConfig(o[1]);
}

core.List<core.String> buildUnnamed823() => [
      'foo',
      'foo',
    ];

void checkUnnamed823(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAuditConfig = 0;
api.AuditConfig buildAuditConfig() {
  final o = api.AuditConfig();
  buildCounterAuditConfig++;
  if (buildCounterAuditConfig < 3) {
    o.auditLogConfigs = buildUnnamed822();
    o.exemptedMembers = buildUnnamed823();
    o.service = 'foo';
  }
  buildCounterAuditConfig--;
  return o;
}

void checkAuditConfig(api.AuditConfig o) {
  buildCounterAuditConfig++;
  if (buildCounterAuditConfig < 3) {
    checkUnnamed822(o.auditLogConfigs!);
    checkUnnamed823(o.exemptedMembers!);
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
  }
  buildCounterAuditConfig--;
}

core.List<core.String> buildUnnamed824() => [
      'foo',
      'foo',
    ];

void checkUnnamed824(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAuditLogConfig = 0;
api.AuditLogConfig buildAuditLogConfig() {
  final o = api.AuditLogConfig();
  buildCounterAuditLogConfig++;
  if (buildCounterAuditLogConfig < 3) {
    o.exemptedMembers = buildUnnamed824();
    o.ignoreChildExemptions = true;
    o.logType = 'foo';
  }
  buildCounterAuditLogConfig--;
  return o;
}

void checkAuditLogConfig(api.AuditLogConfig o) {
  buildCounterAuditLogConfig++;
  if (buildCounterAuditLogConfig < 3) {
    checkUnnamed824(o.exemptedMembers!);
    unittest.expect(o.ignoreChildExemptions!, unittest.isTrue);
    unittest.expect(
      o.logType!,
      unittest.equals('foo'),
    );
  }
  buildCounterAuditLogConfig--;
}

core.int buildCounterAuthorizationLoggingOptions = 0;
api.AuthorizationLoggingOptions buildAuthorizationLoggingOptions() {
  final o = api.AuthorizationLoggingOptions();
  buildCounterAuthorizationLoggingOptions++;
  if (buildCounterAuthorizationLoggingOptions < 3) {
    o.permissionType = 'foo';
  }
  buildCounterAuthorizationLoggingOptions--;
  return o;
}

void checkAuthorizationLoggingOptions(api.AuthorizationLoggingOptions o) {
  buildCounterAuthorizationLoggingOptions++;
  if (buildCounterAuthorizationLoggingOptions < 3) {
    unittest.expect(
      o.permissionType!,
      unittest.equals('foo'),
    );
  }
  buildCounterAuthorizationLoggingOptions--;
}

core.Map<core.String, api.ScalingScheduleStatus> buildUnnamed825() => {
      'x': buildScalingScheduleStatus(),
      'y': buildScalingScheduleStatus(),
    };

void checkUnnamed825(core.Map<core.String, api.ScalingScheduleStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkScalingScheduleStatus(o['x']!);
  checkScalingScheduleStatus(o['y']!);
}

core.List<api.AutoscalerStatusDetails> buildUnnamed826() => [
      buildAutoscalerStatusDetails(),
      buildAutoscalerStatusDetails(),
    ];

void checkUnnamed826(core.List<api.AutoscalerStatusDetails> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalerStatusDetails(o[0]);
  checkAutoscalerStatusDetails(o[1]);
}

core.int buildCounterAutoscaler = 0;
api.Autoscaler buildAutoscaler() {
  final o = api.Autoscaler();
  buildCounterAutoscaler++;
  if (buildCounterAutoscaler < 3) {
    o.autoscalingPolicy = buildAutoscalingPolicy();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.recommendedSize = 42;
    o.region = 'foo';
    o.scalingScheduleStatus = buildUnnamed825();
    o.selfLink = 'foo';
    o.status = 'foo';
    o.statusDetails = buildUnnamed826();
    o.target = 'foo';
    o.zone = 'foo';
  }
  buildCounterAutoscaler--;
  return o;
}

void checkAutoscaler(api.Autoscaler o) {
  buildCounterAutoscaler++;
  if (buildCounterAutoscaler < 3) {
    checkAutoscalingPolicy(o.autoscalingPolicy!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.recommendedSize!,
      unittest.equals(42),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    checkUnnamed825(o.scalingScheduleStatus!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    checkUnnamed826(o.statusDetails!);
    unittest.expect(
      o.target!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscaler--;
}

core.Map<core.String, api.AutoscalersScopedList> buildUnnamed827() => {
      'x': buildAutoscalersScopedList(),
      'y': buildAutoscalersScopedList(),
    };

void checkUnnamed827(core.Map<core.String, api.AutoscalersScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalersScopedList(o['x']!);
  checkAutoscalersScopedList(o['y']!);
}

core.List<core.String> buildUnnamed828() => [
      'foo',
      'foo',
    ];

void checkUnnamed828(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterAutoscalerAggregatedListWarningData = 0;
api.AutoscalerAggregatedListWarningData
    buildAutoscalerAggregatedListWarningData() {
  final o = api.AutoscalerAggregatedListWarningData();
  buildCounterAutoscalerAggregatedListWarningData++;
  if (buildCounterAutoscalerAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAutoscalerAggregatedListWarningData--;
  return o;
}

void checkAutoscalerAggregatedListWarningData(
    api.AutoscalerAggregatedListWarningData o) {
  buildCounterAutoscalerAggregatedListWarningData++;
  if (buildCounterAutoscalerAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalerAggregatedListWarningData--;
}

core.List<api.AutoscalerAggregatedListWarningData> buildUnnamed829() => [
      buildAutoscalerAggregatedListWarningData(),
      buildAutoscalerAggregatedListWarningData(),
    ];

void checkUnnamed829(core.List<api.AutoscalerAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalerAggregatedListWarningData(o[0]);
  checkAutoscalerAggregatedListWarningData(o[1]);
}

core.int buildCounterAutoscalerAggregatedListWarning = 0;
api.AutoscalerAggregatedListWarning buildAutoscalerAggregatedListWarning() {
  final o = api.AutoscalerAggregatedListWarning();
  buildCounterAutoscalerAggregatedListWarning++;
  if (buildCounterAutoscalerAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed829();
    o.message = 'foo';
  }
  buildCounterAutoscalerAggregatedListWarning--;
  return o;
}

void checkAutoscalerAggregatedListWarning(
    api.AutoscalerAggregatedListWarning o) {
  buildCounterAutoscalerAggregatedListWarning++;
  if (buildCounterAutoscalerAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed829(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalerAggregatedListWarning--;
}

core.int buildCounterAutoscalerAggregatedList = 0;
api.AutoscalerAggregatedList buildAutoscalerAggregatedList() {
  final o = api.AutoscalerAggregatedList();
  buildCounterAutoscalerAggregatedList++;
  if (buildCounterAutoscalerAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed827();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed828();
    o.warning = buildAutoscalerAggregatedListWarning();
  }
  buildCounterAutoscalerAggregatedList--;
  return o;
}

void checkAutoscalerAggregatedList(api.AutoscalerAggregatedList o) {
  buildCounterAutoscalerAggregatedList++;
  if (buildCounterAutoscalerAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed827(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed828(o.unreachables!);
    checkAutoscalerAggregatedListWarning(o.warning!);
  }
  buildCounterAutoscalerAggregatedList--;
}

core.List<api.Autoscaler> buildUnnamed830() => [
      buildAutoscaler(),
      buildAutoscaler(),
    ];

void checkUnnamed830(core.List<api.Autoscaler> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscaler(o[0]);
  checkAutoscaler(o[1]);
}

core.int buildCounterAutoscalerListWarningData = 0;
api.AutoscalerListWarningData buildAutoscalerListWarningData() {
  final o = api.AutoscalerListWarningData();
  buildCounterAutoscalerListWarningData++;
  if (buildCounterAutoscalerListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAutoscalerListWarningData--;
  return o;
}

void checkAutoscalerListWarningData(api.AutoscalerListWarningData o) {
  buildCounterAutoscalerListWarningData++;
  if (buildCounterAutoscalerListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalerListWarningData--;
}

core.List<api.AutoscalerListWarningData> buildUnnamed831() => [
      buildAutoscalerListWarningData(),
      buildAutoscalerListWarningData(),
    ];

void checkUnnamed831(core.List<api.AutoscalerListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalerListWarningData(o[0]);
  checkAutoscalerListWarningData(o[1]);
}

core.int buildCounterAutoscalerListWarning = 0;
api.AutoscalerListWarning buildAutoscalerListWarning() {
  final o = api.AutoscalerListWarning();
  buildCounterAutoscalerListWarning++;
  if (buildCounterAutoscalerListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed831();
    o.message = 'foo';
  }
  buildCounterAutoscalerListWarning--;
  return o;
}

void checkAutoscalerListWarning(api.AutoscalerListWarning o) {
  buildCounterAutoscalerListWarning++;
  if (buildCounterAutoscalerListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed831(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalerListWarning--;
}

core.int buildCounterAutoscalerList = 0;
api.AutoscalerList buildAutoscalerList() {
  final o = api.AutoscalerList();
  buildCounterAutoscalerList++;
  if (buildCounterAutoscalerList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed830();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildAutoscalerListWarning();
  }
  buildCounterAutoscalerList--;
  return o;
}

void checkAutoscalerList(api.AutoscalerList o) {
  buildCounterAutoscalerList++;
  if (buildCounterAutoscalerList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed830(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkAutoscalerListWarning(o.warning!);
  }
  buildCounterAutoscalerList--;
}

core.int buildCounterAutoscalerStatusDetails = 0;
api.AutoscalerStatusDetails buildAutoscalerStatusDetails() {
  final o = api.AutoscalerStatusDetails();
  buildCounterAutoscalerStatusDetails++;
  if (buildCounterAutoscalerStatusDetails < 3) {
    o.message = 'foo';
    o.type = 'foo';
  }
  buildCounterAutoscalerStatusDetails--;
  return o;
}

void checkAutoscalerStatusDetails(api.AutoscalerStatusDetails o) {
  buildCounterAutoscalerStatusDetails++;
  if (buildCounterAutoscalerStatusDetails < 3) {
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalerStatusDetails--;
}

core.List<api.Autoscaler> buildUnnamed832() => [
      buildAutoscaler(),
      buildAutoscaler(),
    ];

void checkUnnamed832(core.List<api.Autoscaler> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscaler(o[0]);
  checkAutoscaler(o[1]);
}

core.int buildCounterAutoscalersScopedListWarningData = 0;
api.AutoscalersScopedListWarningData buildAutoscalersScopedListWarningData() {
  final o = api.AutoscalersScopedListWarningData();
  buildCounterAutoscalersScopedListWarningData++;
  if (buildCounterAutoscalersScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterAutoscalersScopedListWarningData--;
  return o;
}

void checkAutoscalersScopedListWarningData(
    api.AutoscalersScopedListWarningData o) {
  buildCounterAutoscalersScopedListWarningData++;
  if (buildCounterAutoscalersScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalersScopedListWarningData--;
}

core.List<api.AutoscalersScopedListWarningData> buildUnnamed833() => [
      buildAutoscalersScopedListWarningData(),
      buildAutoscalersScopedListWarningData(),
    ];

void checkUnnamed833(core.List<api.AutoscalersScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalersScopedListWarningData(o[0]);
  checkAutoscalersScopedListWarningData(o[1]);
}

core.int buildCounterAutoscalersScopedListWarning = 0;
api.AutoscalersScopedListWarning buildAutoscalersScopedListWarning() {
  final o = api.AutoscalersScopedListWarning();
  buildCounterAutoscalersScopedListWarning++;
  if (buildCounterAutoscalersScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed833();
    o.message = 'foo';
  }
  buildCounterAutoscalersScopedListWarning--;
  return o;
}

void checkAutoscalersScopedListWarning(api.AutoscalersScopedListWarning o) {
  buildCounterAutoscalersScopedListWarning++;
  if (buildCounterAutoscalersScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed833(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalersScopedListWarning--;
}

core.int buildCounterAutoscalersScopedList = 0;
api.AutoscalersScopedList buildAutoscalersScopedList() {
  final o = api.AutoscalersScopedList();
  buildCounterAutoscalersScopedList++;
  if (buildCounterAutoscalersScopedList < 3) {
    o.autoscalers = buildUnnamed832();
    o.warning = buildAutoscalersScopedListWarning();
  }
  buildCounterAutoscalersScopedList--;
  return o;
}

void checkAutoscalersScopedList(api.AutoscalersScopedList o) {
  buildCounterAutoscalersScopedList++;
  if (buildCounterAutoscalersScopedList < 3) {
    checkUnnamed832(o.autoscalers!);
    checkAutoscalersScopedListWarning(o.warning!);
  }
  buildCounterAutoscalersScopedList--;
}

core.List<api.AutoscalingPolicyCustomMetricUtilization> buildUnnamed834() => [
      buildAutoscalingPolicyCustomMetricUtilization(),
      buildAutoscalingPolicyCustomMetricUtilization(),
    ];

void checkUnnamed834(
    core.List<api.AutoscalingPolicyCustomMetricUtilization> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalingPolicyCustomMetricUtilization(o[0]);
  checkAutoscalingPolicyCustomMetricUtilization(o[1]);
}

core.Map<core.String, api.AutoscalingPolicyScalingSchedule> buildUnnamed835() =>
    {
      'x': buildAutoscalingPolicyScalingSchedule(),
      'y': buildAutoscalingPolicyScalingSchedule(),
    };

void checkUnnamed835(
    core.Map<core.String, api.AutoscalingPolicyScalingSchedule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscalingPolicyScalingSchedule(o['x']!);
  checkAutoscalingPolicyScalingSchedule(o['y']!);
}

core.int buildCounterAutoscalingPolicy = 0;
api.AutoscalingPolicy buildAutoscalingPolicy() {
  final o = api.AutoscalingPolicy();
  buildCounterAutoscalingPolicy++;
  if (buildCounterAutoscalingPolicy < 3) {
    o.coolDownPeriodSec = 42;
    o.cpuUtilization = buildAutoscalingPolicyCpuUtilization();
    o.customMetricUtilizations = buildUnnamed834();
    o.loadBalancingUtilization =
        buildAutoscalingPolicyLoadBalancingUtilization();
    o.maxNumReplicas = 42;
    o.minNumReplicas = 42;
    o.mode = 'foo';
    o.scaleInControl = buildAutoscalingPolicyScaleInControl();
    o.scalingSchedules = buildUnnamed835();
  }
  buildCounterAutoscalingPolicy--;
  return o;
}

void checkAutoscalingPolicy(api.AutoscalingPolicy o) {
  buildCounterAutoscalingPolicy++;
  if (buildCounterAutoscalingPolicy < 3) {
    unittest.expect(
      o.coolDownPeriodSec!,
      unittest.equals(42),
    );
    checkAutoscalingPolicyCpuUtilization(o.cpuUtilization!);
    checkUnnamed834(o.customMetricUtilizations!);
    checkAutoscalingPolicyLoadBalancingUtilization(o.loadBalancingUtilization!);
    unittest.expect(
      o.maxNumReplicas!,
      unittest.equals(42),
    );
    unittest.expect(
      o.minNumReplicas!,
      unittest.equals(42),
    );
    unittest.expect(
      o.mode!,
      unittest.equals('foo'),
    );
    checkAutoscalingPolicyScaleInControl(o.scaleInControl!);
    checkUnnamed835(o.scalingSchedules!);
  }
  buildCounterAutoscalingPolicy--;
}

core.int buildCounterAutoscalingPolicyCpuUtilization = 0;
api.AutoscalingPolicyCpuUtilization buildAutoscalingPolicyCpuUtilization() {
  final o = api.AutoscalingPolicyCpuUtilization();
  buildCounterAutoscalingPolicyCpuUtilization++;
  if (buildCounterAutoscalingPolicyCpuUtilization < 3) {
    o.predictiveMethod = 'foo';
    o.utilizationTarget = 42.0;
  }
  buildCounterAutoscalingPolicyCpuUtilization--;
  return o;
}

void checkAutoscalingPolicyCpuUtilization(
    api.AutoscalingPolicyCpuUtilization o) {
  buildCounterAutoscalingPolicyCpuUtilization++;
  if (buildCounterAutoscalingPolicyCpuUtilization < 3) {
    unittest.expect(
      o.predictiveMethod!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.utilizationTarget!,
      unittest.equals(42.0),
    );
  }
  buildCounterAutoscalingPolicyCpuUtilization--;
}

core.int buildCounterAutoscalingPolicyCustomMetricUtilization = 0;
api.AutoscalingPolicyCustomMetricUtilization
    buildAutoscalingPolicyCustomMetricUtilization() {
  final o = api.AutoscalingPolicyCustomMetricUtilization();
  buildCounterAutoscalingPolicyCustomMetricUtilization++;
  if (buildCounterAutoscalingPolicyCustomMetricUtilization < 3) {
    o.filter = 'foo';
    o.metric = 'foo';
    o.singleInstanceAssignment = 42.0;
    o.utilizationTarget = 42.0;
    o.utilizationTargetType = 'foo';
  }
  buildCounterAutoscalingPolicyCustomMetricUtilization--;
  return o;
}

void checkAutoscalingPolicyCustomMetricUtilization(
    api.AutoscalingPolicyCustomMetricUtilization o) {
  buildCounterAutoscalingPolicyCustomMetricUtilization++;
  if (buildCounterAutoscalingPolicyCustomMetricUtilization < 3) {
    unittest.expect(
      o.filter!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.metric!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.singleInstanceAssignment!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.utilizationTarget!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.utilizationTargetType!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalingPolicyCustomMetricUtilization--;
}

core.int buildCounterAutoscalingPolicyLoadBalancingUtilization = 0;
api.AutoscalingPolicyLoadBalancingUtilization
    buildAutoscalingPolicyLoadBalancingUtilization() {
  final o = api.AutoscalingPolicyLoadBalancingUtilization();
  buildCounterAutoscalingPolicyLoadBalancingUtilization++;
  if (buildCounterAutoscalingPolicyLoadBalancingUtilization < 3) {
    o.utilizationTarget = 42.0;
  }
  buildCounterAutoscalingPolicyLoadBalancingUtilization--;
  return o;
}

void checkAutoscalingPolicyLoadBalancingUtilization(
    api.AutoscalingPolicyLoadBalancingUtilization o) {
  buildCounterAutoscalingPolicyLoadBalancingUtilization++;
  if (buildCounterAutoscalingPolicyLoadBalancingUtilization < 3) {
    unittest.expect(
      o.utilizationTarget!,
      unittest.equals(42.0),
    );
  }
  buildCounterAutoscalingPolicyLoadBalancingUtilization--;
}

core.int buildCounterAutoscalingPolicyScaleInControl = 0;
api.AutoscalingPolicyScaleInControl buildAutoscalingPolicyScaleInControl() {
  final o = api.AutoscalingPolicyScaleInControl();
  buildCounterAutoscalingPolicyScaleInControl++;
  if (buildCounterAutoscalingPolicyScaleInControl < 3) {
    o.maxScaledInReplicas = buildFixedOrPercent();
    o.timeWindowSec = 42;
  }
  buildCounterAutoscalingPolicyScaleInControl--;
  return o;
}

void checkAutoscalingPolicyScaleInControl(
    api.AutoscalingPolicyScaleInControl o) {
  buildCounterAutoscalingPolicyScaleInControl++;
  if (buildCounterAutoscalingPolicyScaleInControl < 3) {
    checkFixedOrPercent(o.maxScaledInReplicas!);
    unittest.expect(
      o.timeWindowSec!,
      unittest.equals(42),
    );
  }
  buildCounterAutoscalingPolicyScaleInControl--;
}

core.int buildCounterAutoscalingPolicyScalingSchedule = 0;
api.AutoscalingPolicyScalingSchedule buildAutoscalingPolicyScalingSchedule() {
  final o = api.AutoscalingPolicyScalingSchedule();
  buildCounterAutoscalingPolicyScalingSchedule++;
  if (buildCounterAutoscalingPolicyScalingSchedule < 3) {
    o.description = 'foo';
    o.disabled = true;
    o.durationSec = 42;
    o.minRequiredReplicas = 42;
    o.schedule = 'foo';
    o.timeZone = 'foo';
  }
  buildCounterAutoscalingPolicyScalingSchedule--;
  return o;
}

void checkAutoscalingPolicyScalingSchedule(
    api.AutoscalingPolicyScalingSchedule o) {
  buildCounterAutoscalingPolicyScalingSchedule++;
  if (buildCounterAutoscalingPolicyScalingSchedule < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.disabled!, unittest.isTrue);
    unittest.expect(
      o.durationSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.minRequiredReplicas!,
      unittest.equals(42),
    );
    unittest.expect(
      o.schedule!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.timeZone!,
      unittest.equals('foo'),
    );
  }
  buildCounterAutoscalingPolicyScalingSchedule--;
}

core.int buildCounterBackend = 0;
api.Backend buildBackend() {
  final o = api.Backend();
  buildCounterBackend++;
  if (buildCounterBackend < 3) {
    o.balancingMode = 'foo';
    o.capacityScaler = 42.0;
    o.description = 'foo';
    o.failover = true;
    o.group = 'foo';
    o.maxConnections = 42;
    o.maxConnectionsPerEndpoint = 42;
    o.maxConnectionsPerInstance = 42;
    o.maxRate = 42;
    o.maxRatePerEndpoint = 42.0;
    o.maxRatePerInstance = 42.0;
    o.maxUtilization = 42.0;
  }
  buildCounterBackend--;
  return o;
}

void checkBackend(api.Backend o) {
  buildCounterBackend++;
  if (buildCounterBackend < 3) {
    unittest.expect(
      o.balancingMode!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.capacityScaler!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.failover!, unittest.isTrue);
    unittest.expect(
      o.group!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.maxConnections!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxConnectionsPerEndpoint!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxConnectionsPerInstance!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxRate!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxRatePerEndpoint!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.maxRatePerInstance!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.maxUtilization!,
      unittest.equals(42.0),
    );
  }
  buildCounterBackend--;
}

core.List<core.String> buildUnnamed836() => [
      'foo',
      'foo',
    ];

void checkUnnamed836(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBackendBucket = 0;
api.BackendBucket buildBackendBucket() {
  final o = api.BackendBucket();
  buildCounterBackendBucket++;
  if (buildCounterBackendBucket < 3) {
    o.bucketName = 'foo';
    o.cdnPolicy = buildBackendBucketCdnPolicy();
    o.creationTimestamp = 'foo';
    o.customResponseHeaders = buildUnnamed836();
    o.description = 'foo';
    o.enableCdn = true;
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterBackendBucket--;
  return o;
}

void checkBackendBucket(api.BackendBucket o) {
  buildCounterBackendBucket++;
  if (buildCounterBackendBucket < 3) {
    unittest.expect(
      o.bucketName!,
      unittest.equals('foo'),
    );
    checkBackendBucketCdnPolicy(o.cdnPolicy!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkUnnamed836(o.customResponseHeaders!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.enableCdn!, unittest.isTrue);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendBucket--;
}

core.List<api.BackendBucketCdnPolicyBypassCacheOnRequestHeader>
    buildUnnamed837() => [
          buildBackendBucketCdnPolicyBypassCacheOnRequestHeader(),
          buildBackendBucketCdnPolicyBypassCacheOnRequestHeader(),
        ];

void checkUnnamed837(
    core.List<api.BackendBucketCdnPolicyBypassCacheOnRequestHeader> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendBucketCdnPolicyBypassCacheOnRequestHeader(o[0]);
  checkBackendBucketCdnPolicyBypassCacheOnRequestHeader(o[1]);
}

core.List<api.BackendBucketCdnPolicyNegativeCachingPolicy> buildUnnamed838() =>
    [
      buildBackendBucketCdnPolicyNegativeCachingPolicy(),
      buildBackendBucketCdnPolicyNegativeCachingPolicy(),
    ];

void checkUnnamed838(
    core.List<api.BackendBucketCdnPolicyNegativeCachingPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendBucketCdnPolicyNegativeCachingPolicy(o[0]);
  checkBackendBucketCdnPolicyNegativeCachingPolicy(o[1]);
}

core.List<core.String> buildUnnamed839() => [
      'foo',
      'foo',
    ];

void checkUnnamed839(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBackendBucketCdnPolicy = 0;
api.BackendBucketCdnPolicy buildBackendBucketCdnPolicy() {
  final o = api.BackendBucketCdnPolicy();
  buildCounterBackendBucketCdnPolicy++;
  if (buildCounterBackendBucketCdnPolicy < 3) {
    o.bypassCacheOnRequestHeaders = buildUnnamed837();
    o.cacheMode = 'foo';
    o.clientTtl = 42;
    o.defaultTtl = 42;
    o.maxTtl = 42;
    o.negativeCaching = true;
    o.negativeCachingPolicy = buildUnnamed838();
    o.requestCoalescing = true;
    o.serveWhileStale = 42;
    o.signedUrlCacheMaxAgeSec = 'foo';
    o.signedUrlKeyNames = buildUnnamed839();
  }
  buildCounterBackendBucketCdnPolicy--;
  return o;
}

void checkBackendBucketCdnPolicy(api.BackendBucketCdnPolicy o) {
  buildCounterBackendBucketCdnPolicy++;
  if (buildCounterBackendBucketCdnPolicy < 3) {
    checkUnnamed837(o.bypassCacheOnRequestHeaders!);
    unittest.expect(
      o.cacheMode!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.clientTtl!,
      unittest.equals(42),
    );
    unittest.expect(
      o.defaultTtl!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxTtl!,
      unittest.equals(42),
    );
    unittest.expect(o.negativeCaching!, unittest.isTrue);
    checkUnnamed838(o.negativeCachingPolicy!);
    unittest.expect(o.requestCoalescing!, unittest.isTrue);
    unittest.expect(
      o.serveWhileStale!,
      unittest.equals(42),
    );
    unittest.expect(
      o.signedUrlCacheMaxAgeSec!,
      unittest.equals('foo'),
    );
    checkUnnamed839(o.signedUrlKeyNames!);
  }
  buildCounterBackendBucketCdnPolicy--;
}

core.int buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader = 0;
api.BackendBucketCdnPolicyBypassCacheOnRequestHeader
    buildBackendBucketCdnPolicyBypassCacheOnRequestHeader() {
  final o = api.BackendBucketCdnPolicyBypassCacheOnRequestHeader();
  buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader++;
  if (buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader < 3) {
    o.headerName = 'foo';
  }
  buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader--;
  return o;
}

void checkBackendBucketCdnPolicyBypassCacheOnRequestHeader(
    api.BackendBucketCdnPolicyBypassCacheOnRequestHeader o) {
  buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader++;
  if (buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader < 3) {
    unittest.expect(
      o.headerName!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendBucketCdnPolicyBypassCacheOnRequestHeader--;
}

core.int buildCounterBackendBucketCdnPolicyNegativeCachingPolicy = 0;
api.BackendBucketCdnPolicyNegativeCachingPolicy
    buildBackendBucketCdnPolicyNegativeCachingPolicy() {
  final o = api.BackendBucketCdnPolicyNegativeCachingPolicy();
  buildCounterBackendBucketCdnPolicyNegativeCachingPolicy++;
  if (buildCounterBackendBucketCdnPolicyNegativeCachingPolicy < 3) {
    o.code = 42;
    o.ttl = 42;
  }
  buildCounterBackendBucketCdnPolicyNegativeCachingPolicy--;
  return o;
}

void checkBackendBucketCdnPolicyNegativeCachingPolicy(
    api.BackendBucketCdnPolicyNegativeCachingPolicy o) {
  buildCounterBackendBucketCdnPolicyNegativeCachingPolicy++;
  if (buildCounterBackendBucketCdnPolicyNegativeCachingPolicy < 3) {
    unittest.expect(
      o.code!,
      unittest.equals(42),
    );
    unittest.expect(
      o.ttl!,
      unittest.equals(42),
    );
  }
  buildCounterBackendBucketCdnPolicyNegativeCachingPolicy--;
}

core.List<api.BackendBucket> buildUnnamed840() => [
      buildBackendBucket(),
      buildBackendBucket(),
    ];

void checkUnnamed840(core.List<api.BackendBucket> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendBucket(o[0]);
  checkBackendBucket(o[1]);
}

core.int buildCounterBackendBucketListWarningData = 0;
api.BackendBucketListWarningData buildBackendBucketListWarningData() {
  final o = api.BackendBucketListWarningData();
  buildCounterBackendBucketListWarningData++;
  if (buildCounterBackendBucketListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterBackendBucketListWarningData--;
  return o;
}

void checkBackendBucketListWarningData(api.BackendBucketListWarningData o) {
  buildCounterBackendBucketListWarningData++;
  if (buildCounterBackendBucketListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendBucketListWarningData--;
}

core.List<api.BackendBucketListWarningData> buildUnnamed841() => [
      buildBackendBucketListWarningData(),
      buildBackendBucketListWarningData(),
    ];

void checkUnnamed841(core.List<api.BackendBucketListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendBucketListWarningData(o[0]);
  checkBackendBucketListWarningData(o[1]);
}

core.int buildCounterBackendBucketListWarning = 0;
api.BackendBucketListWarning buildBackendBucketListWarning() {
  final o = api.BackendBucketListWarning();
  buildCounterBackendBucketListWarning++;
  if (buildCounterBackendBucketListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed841();
    o.message = 'foo';
  }
  buildCounterBackendBucketListWarning--;
  return o;
}

void checkBackendBucketListWarning(api.BackendBucketListWarning o) {
  buildCounterBackendBucketListWarning++;
  if (buildCounterBackendBucketListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed841(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendBucketListWarning--;
}

core.int buildCounterBackendBucketList = 0;
api.BackendBucketList buildBackendBucketList() {
  final o = api.BackendBucketList();
  buildCounterBackendBucketList++;
  if (buildCounterBackendBucketList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed840();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildBackendBucketListWarning();
  }
  buildCounterBackendBucketList--;
  return o;
}

void checkBackendBucketList(api.BackendBucketList o) {
  buildCounterBackendBucketList++;
  if (buildCounterBackendBucketList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed840(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkBackendBucketListWarning(o.warning!);
  }
  buildCounterBackendBucketList--;
}

core.List<api.Backend> buildUnnamed842() => [
      buildBackend(),
      buildBackend(),
    ];

void checkUnnamed842(core.List<api.Backend> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackend(o[0]);
  checkBackend(o[1]);
}

core.List<core.String> buildUnnamed843() => [
      'foo',
      'foo',
    ];

void checkUnnamed843(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed844() => [
      'foo',
      'foo',
    ];

void checkUnnamed844(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed845() => [
      'foo',
      'foo',
    ];

void checkUnnamed845(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBackendService = 0;
api.BackendService buildBackendService() {
  final o = api.BackendService();
  buildCounterBackendService++;
  if (buildCounterBackendService < 3) {
    o.affinityCookieTtlSec = 42;
    o.backends = buildUnnamed842();
    o.cdnPolicy = buildBackendServiceCdnPolicy();
    o.circuitBreakers = buildCircuitBreakers();
    o.connectionDraining = buildConnectionDraining();
    o.consistentHash = buildConsistentHashLoadBalancerSettings();
    o.creationTimestamp = 'foo';
    o.customRequestHeaders = buildUnnamed843();
    o.customResponseHeaders = buildUnnamed844();
    o.description = 'foo';
    o.enableCDN = true;
    o.failoverPolicy = buildBackendServiceFailoverPolicy();
    o.fingerprint = 'foo';
    o.healthChecks = buildUnnamed845();
    o.iap = buildBackendServiceIAP();
    o.id = 'foo';
    o.kind = 'foo';
    o.loadBalancingScheme = 'foo';
    o.localityLbPolicy = 'foo';
    o.logConfig = buildBackendServiceLogConfig();
    o.maxStreamDuration = buildDuration();
    o.name = 'foo';
    o.network = 'foo';
    o.outlierDetection = buildOutlierDetection();
    o.port = 42;
    o.portName = 'foo';
    o.protocol = 'foo';
    o.region = 'foo';
    o.securityPolicy = 'foo';
    o.securitySettings = buildSecuritySettings();
    o.selfLink = 'foo';
    o.sessionAffinity = 'foo';
    o.timeoutSec = 42;
  }
  buildCounterBackendService--;
  return o;
}

void checkBackendService(api.BackendService o) {
  buildCounterBackendService++;
  if (buildCounterBackendService < 3) {
    unittest.expect(
      o.affinityCookieTtlSec!,
      unittest.equals(42),
    );
    checkUnnamed842(o.backends!);
    checkBackendServiceCdnPolicy(o.cdnPolicy!);
    checkCircuitBreakers(o.circuitBreakers!);
    checkConnectionDraining(o.connectionDraining!);
    checkConsistentHashLoadBalancerSettings(o.consistentHash!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkUnnamed843(o.customRequestHeaders!);
    checkUnnamed844(o.customResponseHeaders!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.enableCDN!, unittest.isTrue);
    checkBackendServiceFailoverPolicy(o.failoverPolicy!);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed845(o.healthChecks!);
    checkBackendServiceIAP(o.iap!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.loadBalancingScheme!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.localityLbPolicy!,
      unittest.equals('foo'),
    );
    checkBackendServiceLogConfig(o.logConfig!);
    checkDuration(o.maxStreamDuration!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    checkOutlierDetection(o.outlierDetection!);
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.protocol!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.securityPolicy!,
      unittest.equals('foo'),
    );
    checkSecuritySettings(o.securitySettings!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sessionAffinity!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.timeoutSec!,
      unittest.equals(42),
    );
  }
  buildCounterBackendService--;
}

core.Map<core.String, api.BackendServicesScopedList> buildUnnamed846() => {
      'x': buildBackendServicesScopedList(),
      'y': buildBackendServicesScopedList(),
    };

void checkUnnamed846(core.Map<core.String, api.BackendServicesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServicesScopedList(o['x']!);
  checkBackendServicesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed847() => [
      'foo',
      'foo',
    ];

void checkUnnamed847(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBackendServiceAggregatedListWarningData = 0;
api.BackendServiceAggregatedListWarningData
    buildBackendServiceAggregatedListWarningData() {
  final o = api.BackendServiceAggregatedListWarningData();
  buildCounterBackendServiceAggregatedListWarningData++;
  if (buildCounterBackendServiceAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterBackendServiceAggregatedListWarningData--;
  return o;
}

void checkBackendServiceAggregatedListWarningData(
    api.BackendServiceAggregatedListWarningData o) {
  buildCounterBackendServiceAggregatedListWarningData++;
  if (buildCounterBackendServiceAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceAggregatedListWarningData--;
}

core.List<api.BackendServiceAggregatedListWarningData> buildUnnamed848() => [
      buildBackendServiceAggregatedListWarningData(),
      buildBackendServiceAggregatedListWarningData(),
    ];

void checkUnnamed848(core.List<api.BackendServiceAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServiceAggregatedListWarningData(o[0]);
  checkBackendServiceAggregatedListWarningData(o[1]);
}

core.int buildCounterBackendServiceAggregatedListWarning = 0;
api.BackendServiceAggregatedListWarning
    buildBackendServiceAggregatedListWarning() {
  final o = api.BackendServiceAggregatedListWarning();
  buildCounterBackendServiceAggregatedListWarning++;
  if (buildCounterBackendServiceAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed848();
    o.message = 'foo';
  }
  buildCounterBackendServiceAggregatedListWarning--;
  return o;
}

void checkBackendServiceAggregatedListWarning(
    api.BackendServiceAggregatedListWarning o) {
  buildCounterBackendServiceAggregatedListWarning++;
  if (buildCounterBackendServiceAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed848(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceAggregatedListWarning--;
}

core.int buildCounterBackendServiceAggregatedList = 0;
api.BackendServiceAggregatedList buildBackendServiceAggregatedList() {
  final o = api.BackendServiceAggregatedList();
  buildCounterBackendServiceAggregatedList++;
  if (buildCounterBackendServiceAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed846();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed847();
    o.warning = buildBackendServiceAggregatedListWarning();
  }
  buildCounterBackendServiceAggregatedList--;
  return o;
}

void checkBackendServiceAggregatedList(api.BackendServiceAggregatedList o) {
  buildCounterBackendServiceAggregatedList++;
  if (buildCounterBackendServiceAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed846(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed847(o.unreachables!);
    checkBackendServiceAggregatedListWarning(o.warning!);
  }
  buildCounterBackendServiceAggregatedList--;
}

core.List<api.BackendServiceCdnPolicyBypassCacheOnRequestHeader>
    buildUnnamed849() => [
          buildBackendServiceCdnPolicyBypassCacheOnRequestHeader(),
          buildBackendServiceCdnPolicyBypassCacheOnRequestHeader(),
        ];

void checkUnnamed849(
    core.List<api.BackendServiceCdnPolicyBypassCacheOnRequestHeader> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServiceCdnPolicyBypassCacheOnRequestHeader(o[0]);
  checkBackendServiceCdnPolicyBypassCacheOnRequestHeader(o[1]);
}

core.List<api.BackendServiceCdnPolicyNegativeCachingPolicy> buildUnnamed850() =>
    [
      buildBackendServiceCdnPolicyNegativeCachingPolicy(),
      buildBackendServiceCdnPolicyNegativeCachingPolicy(),
    ];

void checkUnnamed850(
    core.List<api.BackendServiceCdnPolicyNegativeCachingPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServiceCdnPolicyNegativeCachingPolicy(o[0]);
  checkBackendServiceCdnPolicyNegativeCachingPolicy(o[1]);
}

core.List<core.String> buildUnnamed851() => [
      'foo',
      'foo',
    ];

void checkUnnamed851(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBackendServiceCdnPolicy = 0;
api.BackendServiceCdnPolicy buildBackendServiceCdnPolicy() {
  final o = api.BackendServiceCdnPolicy();
  buildCounterBackendServiceCdnPolicy++;
  if (buildCounterBackendServiceCdnPolicy < 3) {
    o.bypassCacheOnRequestHeaders = buildUnnamed849();
    o.cacheKeyPolicy = buildCacheKeyPolicy();
    o.cacheMode = 'foo';
    o.clientTtl = 42;
    o.defaultTtl = 42;
    o.maxTtl = 42;
    o.negativeCaching = true;
    o.negativeCachingPolicy = buildUnnamed850();
    o.requestCoalescing = true;
    o.serveWhileStale = 42;
    o.signedUrlCacheMaxAgeSec = 'foo';
    o.signedUrlKeyNames = buildUnnamed851();
  }
  buildCounterBackendServiceCdnPolicy--;
  return o;
}

void checkBackendServiceCdnPolicy(api.BackendServiceCdnPolicy o) {
  buildCounterBackendServiceCdnPolicy++;
  if (buildCounterBackendServiceCdnPolicy < 3) {
    checkUnnamed849(o.bypassCacheOnRequestHeaders!);
    checkCacheKeyPolicy(o.cacheKeyPolicy!);
    unittest.expect(
      o.cacheMode!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.clientTtl!,
      unittest.equals(42),
    );
    unittest.expect(
      o.defaultTtl!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxTtl!,
      unittest.equals(42),
    );
    unittest.expect(o.negativeCaching!, unittest.isTrue);
    checkUnnamed850(o.negativeCachingPolicy!);
    unittest.expect(o.requestCoalescing!, unittest.isTrue);
    unittest.expect(
      o.serveWhileStale!,
      unittest.equals(42),
    );
    unittest.expect(
      o.signedUrlCacheMaxAgeSec!,
      unittest.equals('foo'),
    );
    checkUnnamed851(o.signedUrlKeyNames!);
  }
  buildCounterBackendServiceCdnPolicy--;
}

core.int buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader = 0;
api.BackendServiceCdnPolicyBypassCacheOnRequestHeader
    buildBackendServiceCdnPolicyBypassCacheOnRequestHeader() {
  final o = api.BackendServiceCdnPolicyBypassCacheOnRequestHeader();
  buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader++;
  if (buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader < 3) {
    o.headerName = 'foo';
  }
  buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader--;
  return o;
}

void checkBackendServiceCdnPolicyBypassCacheOnRequestHeader(
    api.BackendServiceCdnPolicyBypassCacheOnRequestHeader o) {
  buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader++;
  if (buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader < 3) {
    unittest.expect(
      o.headerName!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceCdnPolicyBypassCacheOnRequestHeader--;
}

core.int buildCounterBackendServiceCdnPolicyNegativeCachingPolicy = 0;
api.BackendServiceCdnPolicyNegativeCachingPolicy
    buildBackendServiceCdnPolicyNegativeCachingPolicy() {
  final o = api.BackendServiceCdnPolicyNegativeCachingPolicy();
  buildCounterBackendServiceCdnPolicyNegativeCachingPolicy++;
  if (buildCounterBackendServiceCdnPolicyNegativeCachingPolicy < 3) {
    o.code = 42;
    o.ttl = 42;
  }
  buildCounterBackendServiceCdnPolicyNegativeCachingPolicy--;
  return o;
}

void checkBackendServiceCdnPolicyNegativeCachingPolicy(
    api.BackendServiceCdnPolicyNegativeCachingPolicy o) {
  buildCounterBackendServiceCdnPolicyNegativeCachingPolicy++;
  if (buildCounterBackendServiceCdnPolicyNegativeCachingPolicy < 3) {
    unittest.expect(
      o.code!,
      unittest.equals(42),
    );
    unittest.expect(
      o.ttl!,
      unittest.equals(42),
    );
  }
  buildCounterBackendServiceCdnPolicyNegativeCachingPolicy--;
}

core.int buildCounterBackendServiceFailoverPolicy = 0;
api.BackendServiceFailoverPolicy buildBackendServiceFailoverPolicy() {
  final o = api.BackendServiceFailoverPolicy();
  buildCounterBackendServiceFailoverPolicy++;
  if (buildCounterBackendServiceFailoverPolicy < 3) {
    o.disableConnectionDrainOnFailover = true;
    o.dropTrafficIfUnhealthy = true;
    o.failoverRatio = 42.0;
  }
  buildCounterBackendServiceFailoverPolicy--;
  return o;
}

void checkBackendServiceFailoverPolicy(api.BackendServiceFailoverPolicy o) {
  buildCounterBackendServiceFailoverPolicy++;
  if (buildCounterBackendServiceFailoverPolicy < 3) {
    unittest.expect(o.disableConnectionDrainOnFailover!, unittest.isTrue);
    unittest.expect(o.dropTrafficIfUnhealthy!, unittest.isTrue);
    unittest.expect(
      o.failoverRatio!,
      unittest.equals(42.0),
    );
  }
  buildCounterBackendServiceFailoverPolicy--;
}

core.Map<core.String, core.String> buildUnnamed852() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed852(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<api.HealthStatus> buildUnnamed853() => [
      buildHealthStatus(),
      buildHealthStatus(),
    ];

void checkUnnamed853(core.List<api.HealthStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthStatus(o[0]);
  checkHealthStatus(o[1]);
}

core.int buildCounterBackendServiceGroupHealth = 0;
api.BackendServiceGroupHealth buildBackendServiceGroupHealth() {
  final o = api.BackendServiceGroupHealth();
  buildCounterBackendServiceGroupHealth++;
  if (buildCounterBackendServiceGroupHealth < 3) {
    o.annotations = buildUnnamed852();
    o.healthStatus = buildUnnamed853();
    o.kind = 'foo';
  }
  buildCounterBackendServiceGroupHealth--;
  return o;
}

void checkBackendServiceGroupHealth(api.BackendServiceGroupHealth o) {
  buildCounterBackendServiceGroupHealth++;
  if (buildCounterBackendServiceGroupHealth < 3) {
    checkUnnamed852(o.annotations!);
    checkUnnamed853(o.healthStatus!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceGroupHealth--;
}

core.int buildCounterBackendServiceIAP = 0;
api.BackendServiceIAP buildBackendServiceIAP() {
  final o = api.BackendServiceIAP();
  buildCounterBackendServiceIAP++;
  if (buildCounterBackendServiceIAP < 3) {
    o.enabled = true;
    o.oauth2ClientId = 'foo';
    o.oauth2ClientSecret = 'foo';
    o.oauth2ClientSecretSha256 = 'foo';
  }
  buildCounterBackendServiceIAP--;
  return o;
}

void checkBackendServiceIAP(api.BackendServiceIAP o) {
  buildCounterBackendServiceIAP++;
  if (buildCounterBackendServiceIAP < 3) {
    unittest.expect(o.enabled!, unittest.isTrue);
    unittest.expect(
      o.oauth2ClientId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.oauth2ClientSecret!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.oauth2ClientSecretSha256!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceIAP--;
}

core.List<api.BackendService> buildUnnamed854() => [
      buildBackendService(),
      buildBackendService(),
    ];

void checkUnnamed854(core.List<api.BackendService> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendService(o[0]);
  checkBackendService(o[1]);
}

core.int buildCounterBackendServiceListWarningData = 0;
api.BackendServiceListWarningData buildBackendServiceListWarningData() {
  final o = api.BackendServiceListWarningData();
  buildCounterBackendServiceListWarningData++;
  if (buildCounterBackendServiceListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterBackendServiceListWarningData--;
  return o;
}

void checkBackendServiceListWarningData(api.BackendServiceListWarningData o) {
  buildCounterBackendServiceListWarningData++;
  if (buildCounterBackendServiceListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceListWarningData--;
}

core.List<api.BackendServiceListWarningData> buildUnnamed855() => [
      buildBackendServiceListWarningData(),
      buildBackendServiceListWarningData(),
    ];

void checkUnnamed855(core.List<api.BackendServiceListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServiceListWarningData(o[0]);
  checkBackendServiceListWarningData(o[1]);
}

core.int buildCounterBackendServiceListWarning = 0;
api.BackendServiceListWarning buildBackendServiceListWarning() {
  final o = api.BackendServiceListWarning();
  buildCounterBackendServiceListWarning++;
  if (buildCounterBackendServiceListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed855();
    o.message = 'foo';
  }
  buildCounterBackendServiceListWarning--;
  return o;
}

void checkBackendServiceListWarning(api.BackendServiceListWarning o) {
  buildCounterBackendServiceListWarning++;
  if (buildCounterBackendServiceListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed855(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceListWarning--;
}

core.int buildCounterBackendServiceList = 0;
api.BackendServiceList buildBackendServiceList() {
  final o = api.BackendServiceList();
  buildCounterBackendServiceList++;
  if (buildCounterBackendServiceList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed854();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildBackendServiceListWarning();
  }
  buildCounterBackendServiceList--;
  return o;
}

void checkBackendServiceList(api.BackendServiceList o) {
  buildCounterBackendServiceList++;
  if (buildCounterBackendServiceList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed854(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkBackendServiceListWarning(o.warning!);
  }
  buildCounterBackendServiceList--;
}

core.int buildCounterBackendServiceLogConfig = 0;
api.BackendServiceLogConfig buildBackendServiceLogConfig() {
  final o = api.BackendServiceLogConfig();
  buildCounterBackendServiceLogConfig++;
  if (buildCounterBackendServiceLogConfig < 3) {
    o.enable = true;
    o.sampleRate = 42.0;
  }
  buildCounterBackendServiceLogConfig--;
  return o;
}

void checkBackendServiceLogConfig(api.BackendServiceLogConfig o) {
  buildCounterBackendServiceLogConfig++;
  if (buildCounterBackendServiceLogConfig < 3) {
    unittest.expect(o.enable!, unittest.isTrue);
    unittest.expect(
      o.sampleRate!,
      unittest.equals(42.0),
    );
  }
  buildCounterBackendServiceLogConfig--;
}

core.int buildCounterBackendServiceReference = 0;
api.BackendServiceReference buildBackendServiceReference() {
  final o = api.BackendServiceReference();
  buildCounterBackendServiceReference++;
  if (buildCounterBackendServiceReference < 3) {
    o.backendService = 'foo';
  }
  buildCounterBackendServiceReference--;
  return o;
}

void checkBackendServiceReference(api.BackendServiceReference o) {
  buildCounterBackendServiceReference++;
  if (buildCounterBackendServiceReference < 3) {
    unittest.expect(
      o.backendService!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServiceReference--;
}

core.List<api.BackendService> buildUnnamed856() => [
      buildBackendService(),
      buildBackendService(),
    ];

void checkUnnamed856(core.List<api.BackendService> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendService(o[0]);
  checkBackendService(o[1]);
}

core.int buildCounterBackendServicesScopedListWarningData = 0;
api.BackendServicesScopedListWarningData
    buildBackendServicesScopedListWarningData() {
  final o = api.BackendServicesScopedListWarningData();
  buildCounterBackendServicesScopedListWarningData++;
  if (buildCounterBackendServicesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterBackendServicesScopedListWarningData--;
  return o;
}

void checkBackendServicesScopedListWarningData(
    api.BackendServicesScopedListWarningData o) {
  buildCounterBackendServicesScopedListWarningData++;
  if (buildCounterBackendServicesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServicesScopedListWarningData--;
}

core.List<api.BackendServicesScopedListWarningData> buildUnnamed857() => [
      buildBackendServicesScopedListWarningData(),
      buildBackendServicesScopedListWarningData(),
    ];

void checkUnnamed857(core.List<api.BackendServicesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBackendServicesScopedListWarningData(o[0]);
  checkBackendServicesScopedListWarningData(o[1]);
}

core.int buildCounterBackendServicesScopedListWarning = 0;
api.BackendServicesScopedListWarning buildBackendServicesScopedListWarning() {
  final o = api.BackendServicesScopedListWarning();
  buildCounterBackendServicesScopedListWarning++;
  if (buildCounterBackendServicesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed857();
    o.message = 'foo';
  }
  buildCounterBackendServicesScopedListWarning--;
  return o;
}

void checkBackendServicesScopedListWarning(
    api.BackendServicesScopedListWarning o) {
  buildCounterBackendServicesScopedListWarning++;
  if (buildCounterBackendServicesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed857(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterBackendServicesScopedListWarning--;
}

core.int buildCounterBackendServicesScopedList = 0;
api.BackendServicesScopedList buildBackendServicesScopedList() {
  final o = api.BackendServicesScopedList();
  buildCounterBackendServicesScopedList++;
  if (buildCounterBackendServicesScopedList < 3) {
    o.backendServices = buildUnnamed856();
    o.warning = buildBackendServicesScopedListWarning();
  }
  buildCounterBackendServicesScopedList--;
  return o;
}

void checkBackendServicesScopedList(api.BackendServicesScopedList o) {
  buildCounterBackendServicesScopedList++;
  if (buildCounterBackendServicesScopedList < 3) {
    checkUnnamed856(o.backendServices!);
    checkBackendServicesScopedListWarning(o.warning!);
  }
  buildCounterBackendServicesScopedList--;
}

core.List<core.String> buildUnnamed858() => [
      'foo',
      'foo',
    ];

void checkUnnamed858(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterBinding = 0;
api.Binding buildBinding() {
  final o = api.Binding();
  buildCounterBinding++;
  if (buildCounterBinding < 3) {
    o.bindingId = 'foo';
    o.condition = buildExpr();
    o.members = buildUnnamed858();
    o.role = 'foo';
  }
  buildCounterBinding--;
  return o;
}

void checkBinding(api.Binding o) {
  buildCounterBinding++;
  if (buildCounterBinding < 3) {
    unittest.expect(
      o.bindingId!,
      unittest.equals('foo'),
    );
    checkExpr(o.condition!);
    checkUnnamed858(o.members!);
    unittest.expect(
      o.role!,
      unittest.equals('foo'),
    );
  }
  buildCounterBinding--;
}

core.Map<core.String, api.BulkInsertInstanceResourcePerInstanceProperties>
    buildUnnamed859() => {
          'x': buildBulkInsertInstanceResourcePerInstanceProperties(),
          'y': buildBulkInsertInstanceResourcePerInstanceProperties(),
        };

void checkUnnamed859(
    core.Map<core.String, api.BulkInsertInstanceResourcePerInstanceProperties>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBulkInsertInstanceResourcePerInstanceProperties(o['x']!);
  checkBulkInsertInstanceResourcePerInstanceProperties(o['y']!);
}

core.int buildCounterBulkInsertInstanceResource = 0;
api.BulkInsertInstanceResource buildBulkInsertInstanceResource() {
  final o = api.BulkInsertInstanceResource();
  buildCounterBulkInsertInstanceResource++;
  if (buildCounterBulkInsertInstanceResource < 3) {
    o.count = 'foo';
    o.instanceProperties = buildInstanceProperties();
    o.locationPolicy = buildLocationPolicy();
    o.minCount = 'foo';
    o.namePattern = 'foo';
    o.perInstanceProperties = buildUnnamed859();
    o.sourceInstanceTemplate = 'foo';
  }
  buildCounterBulkInsertInstanceResource--;
  return o;
}

void checkBulkInsertInstanceResource(api.BulkInsertInstanceResource o) {
  buildCounterBulkInsertInstanceResource++;
  if (buildCounterBulkInsertInstanceResource < 3) {
    unittest.expect(
      o.count!,
      unittest.equals('foo'),
    );
    checkInstanceProperties(o.instanceProperties!);
    checkLocationPolicy(o.locationPolicy!);
    unittest.expect(
      o.minCount!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.namePattern!,
      unittest.equals('foo'),
    );
    checkUnnamed859(o.perInstanceProperties!);
    unittest.expect(
      o.sourceInstanceTemplate!,
      unittest.equals('foo'),
    );
  }
  buildCounterBulkInsertInstanceResource--;
}

core.int buildCounterBulkInsertInstanceResourcePerInstanceProperties = 0;
api.BulkInsertInstanceResourcePerInstanceProperties
    buildBulkInsertInstanceResourcePerInstanceProperties() {
  final o = api.BulkInsertInstanceResourcePerInstanceProperties();
  buildCounterBulkInsertInstanceResourcePerInstanceProperties++;
  if (buildCounterBulkInsertInstanceResourcePerInstanceProperties < 3) {
    o.name = 'foo';
  }
  buildCounterBulkInsertInstanceResourcePerInstanceProperties--;
  return o;
}

void checkBulkInsertInstanceResourcePerInstanceProperties(
    api.BulkInsertInstanceResourcePerInstanceProperties o) {
  buildCounterBulkInsertInstanceResourcePerInstanceProperties++;
  if (buildCounterBulkInsertInstanceResourcePerInstanceProperties < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
  }
  buildCounterBulkInsertInstanceResourcePerInstanceProperties--;
}

core.int buildCounterCacheInvalidationRule = 0;
api.CacheInvalidationRule buildCacheInvalidationRule() {
  final o = api.CacheInvalidationRule();
  buildCounterCacheInvalidationRule++;
  if (buildCounterCacheInvalidationRule < 3) {
    o.host = 'foo';
    o.path = 'foo';
  }
  buildCounterCacheInvalidationRule--;
  return o;
}

void checkCacheInvalidationRule(api.CacheInvalidationRule o) {
  buildCounterCacheInvalidationRule++;
  if (buildCounterCacheInvalidationRule < 3) {
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.path!,
      unittest.equals('foo'),
    );
  }
  buildCounterCacheInvalidationRule--;
}

core.List<core.String> buildUnnamed860() => [
      'foo',
      'foo',
    ];

void checkUnnamed860(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed861() => [
      'foo',
      'foo',
    ];

void checkUnnamed861(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterCacheKeyPolicy = 0;
api.CacheKeyPolicy buildCacheKeyPolicy() {
  final o = api.CacheKeyPolicy();
  buildCounterCacheKeyPolicy++;
  if (buildCounterCacheKeyPolicy < 3) {
    o.includeHost = true;
    o.includeProtocol = true;
    o.includeQueryString = true;
    o.queryStringBlacklist = buildUnnamed860();
    o.queryStringWhitelist = buildUnnamed861();
  }
  buildCounterCacheKeyPolicy--;
  return o;
}

void checkCacheKeyPolicy(api.CacheKeyPolicy o) {
  buildCounterCacheKeyPolicy++;
  if (buildCounterCacheKeyPolicy < 3) {
    unittest.expect(o.includeHost!, unittest.isTrue);
    unittest.expect(o.includeProtocol!, unittest.isTrue);
    unittest.expect(o.includeQueryString!, unittest.isTrue);
    checkUnnamed860(o.queryStringBlacklist!);
    checkUnnamed861(o.queryStringWhitelist!);
  }
  buildCounterCacheKeyPolicy--;
}

core.int buildCounterCircuitBreakers = 0;
api.CircuitBreakers buildCircuitBreakers() {
  final o = api.CircuitBreakers();
  buildCounterCircuitBreakers++;
  if (buildCounterCircuitBreakers < 3) {
    o.maxConnections = 42;
    o.maxPendingRequests = 42;
    o.maxRequests = 42;
    o.maxRequestsPerConnection = 42;
    o.maxRetries = 42;
  }
  buildCounterCircuitBreakers--;
  return o;
}

void checkCircuitBreakers(api.CircuitBreakers o) {
  buildCounterCircuitBreakers++;
  if (buildCounterCircuitBreakers < 3) {
    unittest.expect(
      o.maxConnections!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxPendingRequests!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxRequests!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxRequestsPerConnection!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maxRetries!,
      unittest.equals(42),
    );
  }
  buildCounterCircuitBreakers--;
}

core.List<api.Reservation> buildUnnamed862() => [
      buildReservation(),
      buildReservation(),
    ];

void checkUnnamed862(core.List<api.Reservation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservation(o[0]);
  checkReservation(o[1]);
}

core.List<api.ResourceCommitment> buildUnnamed863() => [
      buildResourceCommitment(),
      buildResourceCommitment(),
    ];

void checkUnnamed863(core.List<api.ResourceCommitment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourceCommitment(o[0]);
  checkResourceCommitment(o[1]);
}

core.int buildCounterCommitment = 0;
api.Commitment buildCommitment() {
  final o = api.Commitment();
  buildCounterCommitment++;
  if (buildCounterCommitment < 3) {
    o.category = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.endTimestamp = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.licenseResource = buildLicenseResourceCommitment();
    o.name = 'foo';
    o.plan = 'foo';
    o.region = 'foo';
    o.reservations = buildUnnamed862();
    o.resources = buildUnnamed863();
    o.selfLink = 'foo';
    o.startTimestamp = 'foo';
    o.status = 'foo';
    o.statusMessage = 'foo';
    o.type = 'foo';
  }
  buildCounterCommitment--;
  return o;
}

void checkCommitment(api.Commitment o) {
  buildCounterCommitment++;
  if (buildCounterCommitment < 3) {
    unittest.expect(
      o.category!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.endTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkLicenseResourceCommitment(o.licenseResource!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.plan!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    checkUnnamed862(o.reservations!);
    checkUnnamed863(o.resources!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.statusMessage!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitment--;
}

core.Map<core.String, api.CommitmentsScopedList> buildUnnamed864() => {
      'x': buildCommitmentsScopedList(),
      'y': buildCommitmentsScopedList(),
    };

void checkUnnamed864(core.Map<core.String, api.CommitmentsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitmentsScopedList(o['x']!);
  checkCommitmentsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed865() => [
      'foo',
      'foo',
    ];

void checkUnnamed865(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterCommitmentAggregatedListWarningData = 0;
api.CommitmentAggregatedListWarningData
    buildCommitmentAggregatedListWarningData() {
  final o = api.CommitmentAggregatedListWarningData();
  buildCounterCommitmentAggregatedListWarningData++;
  if (buildCounterCommitmentAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterCommitmentAggregatedListWarningData--;
  return o;
}

void checkCommitmentAggregatedListWarningData(
    api.CommitmentAggregatedListWarningData o) {
  buildCounterCommitmentAggregatedListWarningData++;
  if (buildCounterCommitmentAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentAggregatedListWarningData--;
}

core.List<api.CommitmentAggregatedListWarningData> buildUnnamed866() => [
      buildCommitmentAggregatedListWarningData(),
      buildCommitmentAggregatedListWarningData(),
    ];

void checkUnnamed866(core.List<api.CommitmentAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitmentAggregatedListWarningData(o[0]);
  checkCommitmentAggregatedListWarningData(o[1]);
}

core.int buildCounterCommitmentAggregatedListWarning = 0;
api.CommitmentAggregatedListWarning buildCommitmentAggregatedListWarning() {
  final o = api.CommitmentAggregatedListWarning();
  buildCounterCommitmentAggregatedListWarning++;
  if (buildCounterCommitmentAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed866();
    o.message = 'foo';
  }
  buildCounterCommitmentAggregatedListWarning--;
  return o;
}

void checkCommitmentAggregatedListWarning(
    api.CommitmentAggregatedListWarning o) {
  buildCounterCommitmentAggregatedListWarning++;
  if (buildCounterCommitmentAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed866(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentAggregatedListWarning--;
}

core.int buildCounterCommitmentAggregatedList = 0;
api.CommitmentAggregatedList buildCommitmentAggregatedList() {
  final o = api.CommitmentAggregatedList();
  buildCounterCommitmentAggregatedList++;
  if (buildCounterCommitmentAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed864();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed865();
    o.warning = buildCommitmentAggregatedListWarning();
  }
  buildCounterCommitmentAggregatedList--;
  return o;
}

void checkCommitmentAggregatedList(api.CommitmentAggregatedList o) {
  buildCounterCommitmentAggregatedList++;
  if (buildCounterCommitmentAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed864(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed865(o.unreachables!);
    checkCommitmentAggregatedListWarning(o.warning!);
  }
  buildCounterCommitmentAggregatedList--;
}

core.List<api.Commitment> buildUnnamed867() => [
      buildCommitment(),
      buildCommitment(),
    ];

void checkUnnamed867(core.List<api.Commitment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitment(o[0]);
  checkCommitment(o[1]);
}

core.int buildCounterCommitmentListWarningData = 0;
api.CommitmentListWarningData buildCommitmentListWarningData() {
  final o = api.CommitmentListWarningData();
  buildCounterCommitmentListWarningData++;
  if (buildCounterCommitmentListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterCommitmentListWarningData--;
  return o;
}

void checkCommitmentListWarningData(api.CommitmentListWarningData o) {
  buildCounterCommitmentListWarningData++;
  if (buildCounterCommitmentListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentListWarningData--;
}

core.List<api.CommitmentListWarningData> buildUnnamed868() => [
      buildCommitmentListWarningData(),
      buildCommitmentListWarningData(),
    ];

void checkUnnamed868(core.List<api.CommitmentListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitmentListWarningData(o[0]);
  checkCommitmentListWarningData(o[1]);
}

core.int buildCounterCommitmentListWarning = 0;
api.CommitmentListWarning buildCommitmentListWarning() {
  final o = api.CommitmentListWarning();
  buildCounterCommitmentListWarning++;
  if (buildCounterCommitmentListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed868();
    o.message = 'foo';
  }
  buildCounterCommitmentListWarning--;
  return o;
}

void checkCommitmentListWarning(api.CommitmentListWarning o) {
  buildCounterCommitmentListWarning++;
  if (buildCounterCommitmentListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed868(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentListWarning--;
}

core.int buildCounterCommitmentList = 0;
api.CommitmentList buildCommitmentList() {
  final o = api.CommitmentList();
  buildCounterCommitmentList++;
  if (buildCounterCommitmentList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed867();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildCommitmentListWarning();
  }
  buildCounterCommitmentList--;
  return o;
}

void checkCommitmentList(api.CommitmentList o) {
  buildCounterCommitmentList++;
  if (buildCounterCommitmentList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed867(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkCommitmentListWarning(o.warning!);
  }
  buildCounterCommitmentList--;
}

core.List<api.Commitment> buildUnnamed869() => [
      buildCommitment(),
      buildCommitment(),
    ];

void checkUnnamed869(core.List<api.Commitment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitment(o[0]);
  checkCommitment(o[1]);
}

core.int buildCounterCommitmentsScopedListWarningData = 0;
api.CommitmentsScopedListWarningData buildCommitmentsScopedListWarningData() {
  final o = api.CommitmentsScopedListWarningData();
  buildCounterCommitmentsScopedListWarningData++;
  if (buildCounterCommitmentsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterCommitmentsScopedListWarningData--;
  return o;
}

void checkCommitmentsScopedListWarningData(
    api.CommitmentsScopedListWarningData o) {
  buildCounterCommitmentsScopedListWarningData++;
  if (buildCounterCommitmentsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentsScopedListWarningData--;
}

core.List<api.CommitmentsScopedListWarningData> buildUnnamed870() => [
      buildCommitmentsScopedListWarningData(),
      buildCommitmentsScopedListWarningData(),
    ];

void checkUnnamed870(core.List<api.CommitmentsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCommitmentsScopedListWarningData(o[0]);
  checkCommitmentsScopedListWarningData(o[1]);
}

core.int buildCounterCommitmentsScopedListWarning = 0;
api.CommitmentsScopedListWarning buildCommitmentsScopedListWarning() {
  final o = api.CommitmentsScopedListWarning();
  buildCounterCommitmentsScopedListWarning++;
  if (buildCounterCommitmentsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed870();
    o.message = 'foo';
  }
  buildCounterCommitmentsScopedListWarning--;
  return o;
}

void checkCommitmentsScopedListWarning(api.CommitmentsScopedListWarning o) {
  buildCounterCommitmentsScopedListWarning++;
  if (buildCounterCommitmentsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed870(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterCommitmentsScopedListWarning--;
}

core.int buildCounterCommitmentsScopedList = 0;
api.CommitmentsScopedList buildCommitmentsScopedList() {
  final o = api.CommitmentsScopedList();
  buildCounterCommitmentsScopedList++;
  if (buildCounterCommitmentsScopedList < 3) {
    o.commitments = buildUnnamed869();
    o.warning = buildCommitmentsScopedListWarning();
  }
  buildCounterCommitmentsScopedList--;
  return o;
}

void checkCommitmentsScopedList(api.CommitmentsScopedList o) {
  buildCounterCommitmentsScopedList++;
  if (buildCounterCommitmentsScopedList < 3) {
    checkUnnamed869(o.commitments!);
    checkCommitmentsScopedListWarning(o.warning!);
  }
  buildCounterCommitmentsScopedList--;
}

core.List<core.String> buildUnnamed871() => [
      'foo',
      'foo',
    ];

void checkUnnamed871(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterCondition = 0;
api.Condition buildCondition() {
  final o = api.Condition();
  buildCounterCondition++;
  if (buildCounterCondition < 3) {
    o.iam = 'foo';
    o.op = 'foo';
    o.svc = 'foo';
    o.sys = 'foo';
    o.values = buildUnnamed871();
  }
  buildCounterCondition--;
  return o;
}

void checkCondition(api.Condition o) {
  buildCounterCondition++;
  if (buildCounterCondition < 3) {
    unittest.expect(
      o.iam!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.op!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.svc!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sys!,
      unittest.equals('foo'),
    );
    checkUnnamed871(o.values!);
  }
  buildCounterCondition--;
}

core.int buildCounterConfidentialInstanceConfig = 0;
api.ConfidentialInstanceConfig buildConfidentialInstanceConfig() {
  final o = api.ConfidentialInstanceConfig();
  buildCounterConfidentialInstanceConfig++;
  if (buildCounterConfidentialInstanceConfig < 3) {
    o.enableConfidentialCompute = true;
  }
  buildCounterConfidentialInstanceConfig--;
  return o;
}

void checkConfidentialInstanceConfig(api.ConfidentialInstanceConfig o) {
  buildCounterConfidentialInstanceConfig++;
  if (buildCounterConfidentialInstanceConfig < 3) {
    unittest.expect(o.enableConfidentialCompute!, unittest.isTrue);
  }
  buildCounterConfidentialInstanceConfig--;
}

core.int buildCounterConnectionDraining = 0;
api.ConnectionDraining buildConnectionDraining() {
  final o = api.ConnectionDraining();
  buildCounterConnectionDraining++;
  if (buildCounterConnectionDraining < 3) {
    o.drainingTimeoutSec = 42;
  }
  buildCounterConnectionDraining--;
  return o;
}

void checkConnectionDraining(api.ConnectionDraining o) {
  buildCounterConnectionDraining++;
  if (buildCounterConnectionDraining < 3) {
    unittest.expect(
      o.drainingTimeoutSec!,
      unittest.equals(42),
    );
  }
  buildCounterConnectionDraining--;
}

core.int buildCounterConsistentHashLoadBalancerSettings = 0;
api.ConsistentHashLoadBalancerSettings
    buildConsistentHashLoadBalancerSettings() {
  final o = api.ConsistentHashLoadBalancerSettings();
  buildCounterConsistentHashLoadBalancerSettings++;
  if (buildCounterConsistentHashLoadBalancerSettings < 3) {
    o.httpCookie = buildConsistentHashLoadBalancerSettingsHttpCookie();
    o.httpHeaderName = 'foo';
    o.minimumRingSize = 'foo';
  }
  buildCounterConsistentHashLoadBalancerSettings--;
  return o;
}

void checkConsistentHashLoadBalancerSettings(
    api.ConsistentHashLoadBalancerSettings o) {
  buildCounterConsistentHashLoadBalancerSettings++;
  if (buildCounterConsistentHashLoadBalancerSettings < 3) {
    checkConsistentHashLoadBalancerSettingsHttpCookie(o.httpCookie!);
    unittest.expect(
      o.httpHeaderName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.minimumRingSize!,
      unittest.equals('foo'),
    );
  }
  buildCounterConsistentHashLoadBalancerSettings--;
}

core.int buildCounterConsistentHashLoadBalancerSettingsHttpCookie = 0;
api.ConsistentHashLoadBalancerSettingsHttpCookie
    buildConsistentHashLoadBalancerSettingsHttpCookie() {
  final o = api.ConsistentHashLoadBalancerSettingsHttpCookie();
  buildCounterConsistentHashLoadBalancerSettingsHttpCookie++;
  if (buildCounterConsistentHashLoadBalancerSettingsHttpCookie < 3) {
    o.name = 'foo';
    o.path = 'foo';
    o.ttl = buildDuration();
  }
  buildCounterConsistentHashLoadBalancerSettingsHttpCookie--;
  return o;
}

void checkConsistentHashLoadBalancerSettingsHttpCookie(
    api.ConsistentHashLoadBalancerSettingsHttpCookie o) {
  buildCounterConsistentHashLoadBalancerSettingsHttpCookie++;
  if (buildCounterConsistentHashLoadBalancerSettingsHttpCookie < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.path!,
      unittest.equals('foo'),
    );
    checkDuration(o.ttl!);
  }
  buildCounterConsistentHashLoadBalancerSettingsHttpCookie--;
}

core.List<core.String> buildUnnamed872() => [
      'foo',
      'foo',
    ];

void checkUnnamed872(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed873() => [
      'foo',
      'foo',
    ];

void checkUnnamed873(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed874() => [
      'foo',
      'foo',
    ];

void checkUnnamed874(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed875() => [
      'foo',
      'foo',
    ];

void checkUnnamed875(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed876() => [
      'foo',
      'foo',
    ];

void checkUnnamed876(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterCorsPolicy = 0;
api.CorsPolicy buildCorsPolicy() {
  final o = api.CorsPolicy();
  buildCounterCorsPolicy++;
  if (buildCounterCorsPolicy < 3) {
    o.allowCredentials = true;
    o.allowHeaders = buildUnnamed872();
    o.allowMethods = buildUnnamed873();
    o.allowOriginRegexes = buildUnnamed874();
    o.allowOrigins = buildUnnamed875();
    o.disabled = true;
    o.exposeHeaders = buildUnnamed876();
    o.maxAge = 42;
  }
  buildCounterCorsPolicy--;
  return o;
}

void checkCorsPolicy(api.CorsPolicy o) {
  buildCounterCorsPolicy++;
  if (buildCounterCorsPolicy < 3) {
    unittest.expect(o.allowCredentials!, unittest.isTrue);
    checkUnnamed872(o.allowHeaders!);
    checkUnnamed873(o.allowMethods!);
    checkUnnamed874(o.allowOriginRegexes!);
    checkUnnamed875(o.allowOrigins!);
    unittest.expect(o.disabled!, unittest.isTrue);
    checkUnnamed876(o.exposeHeaders!);
    unittest.expect(
      o.maxAge!,
      unittest.equals(42),
    );
  }
  buildCounterCorsPolicy--;
}

core.int buildCounterCustomerEncryptionKey = 0;
api.CustomerEncryptionKey buildCustomerEncryptionKey() {
  final o = api.CustomerEncryptionKey();
  buildCounterCustomerEncryptionKey++;
  if (buildCounterCustomerEncryptionKey < 3) {
    o.kmsKeyName = 'foo';
    o.kmsKeyServiceAccount = 'foo';
    o.rawKey = 'foo';
    o.rsaEncryptedKey = 'foo';
    o.sha256 = 'foo';
  }
  buildCounterCustomerEncryptionKey--;
  return o;
}

void checkCustomerEncryptionKey(api.CustomerEncryptionKey o) {
  buildCounterCustomerEncryptionKey++;
  if (buildCounterCustomerEncryptionKey < 3) {
    unittest.expect(
      o.kmsKeyName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kmsKeyServiceAccount!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.rawKey!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.rsaEncryptedKey!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sha256!,
      unittest.equals('foo'),
    );
  }
  buildCounterCustomerEncryptionKey--;
}

core.int buildCounterCustomerEncryptionKeyProtectedDisk = 0;
api.CustomerEncryptionKeyProtectedDisk
    buildCustomerEncryptionKeyProtectedDisk() {
  final o = api.CustomerEncryptionKeyProtectedDisk();
  buildCounterCustomerEncryptionKeyProtectedDisk++;
  if (buildCounterCustomerEncryptionKeyProtectedDisk < 3) {
    o.diskEncryptionKey = buildCustomerEncryptionKey();
    o.source = 'foo';
  }
  buildCounterCustomerEncryptionKeyProtectedDisk--;
  return o;
}

void checkCustomerEncryptionKeyProtectedDisk(
    api.CustomerEncryptionKeyProtectedDisk o) {
  buildCounterCustomerEncryptionKeyProtectedDisk++;
  if (buildCounterCustomerEncryptionKeyProtectedDisk < 3) {
    checkCustomerEncryptionKey(o.diskEncryptionKey!);
    unittest.expect(
      o.source!,
      unittest.equals('foo'),
    );
  }
  buildCounterCustomerEncryptionKeyProtectedDisk--;
}

core.int buildCounterDeprecationStatus = 0;
api.DeprecationStatus buildDeprecationStatus() {
  final o = api.DeprecationStatus();
  buildCounterDeprecationStatus++;
  if (buildCounterDeprecationStatus < 3) {
    o.deleted = 'foo';
    o.deprecated = 'foo';
    o.obsolete = 'foo';
    o.replacement = 'foo';
    o.state = 'foo';
  }
  buildCounterDeprecationStatus--;
  return o;
}

void checkDeprecationStatus(api.DeprecationStatus o) {
  buildCounterDeprecationStatus++;
  if (buildCounterDeprecationStatus < 3) {
    unittest.expect(
      o.deleted!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.deprecated!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.obsolete!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.replacement!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterDeprecationStatus--;
}

core.List<api.GuestOsFeature> buildUnnamed877() => [
      buildGuestOsFeature(),
      buildGuestOsFeature(),
    ];

void checkUnnamed877(core.List<api.GuestOsFeature> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkGuestOsFeature(o[0]);
  checkGuestOsFeature(o[1]);
}

core.Map<core.String, core.String> buildUnnamed878() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed878(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed879() => [
      'foo',
      'foo',
    ];

void checkUnnamed879(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed880() => [
      'foo',
      'foo',
    ];

void checkUnnamed880(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed881() => [
      'foo',
      'foo',
    ];

void checkUnnamed881(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed882() => [
      'foo',
      'foo',
    ];

void checkUnnamed882(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed883() => [
      'foo',
      'foo',
    ];

void checkUnnamed883(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterDisk = 0;
api.Disk buildDisk() {
  final o = api.Disk();
  buildCounterDisk++;
  if (buildCounterDisk < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.diskEncryptionKey = buildCustomerEncryptionKey();
    o.guestOsFeatures = buildUnnamed877();
    o.id = 'foo';
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed878();
    o.lastAttachTimestamp = 'foo';
    o.lastDetachTimestamp = 'foo';
    o.licenseCodes = buildUnnamed879();
    o.licenses = buildUnnamed880();
    o.locationHint = 'foo';
    o.name = 'foo';
    o.options = 'foo';
    o.physicalBlockSizeBytes = 'foo';
    o.provisionedIops = 'foo';
    o.region = 'foo';
    o.replicaZones = buildUnnamed881();
    o.resourcePolicies = buildUnnamed882();
    o.satisfiesPzs = true;
    o.selfLink = 'foo';
    o.sizeGb = 'foo';
    o.sourceDisk = 'foo';
    o.sourceDiskId = 'foo';
    o.sourceImage = 'foo';
    o.sourceImageEncryptionKey = buildCustomerEncryptionKey();
    o.sourceImageId = 'foo';
    o.sourceSnapshot = 'foo';
    o.sourceSnapshotEncryptionKey = buildCustomerEncryptionKey();
    o.sourceSnapshotId = 'foo';
    o.sourceStorageObject = 'foo';
    o.status = 'foo';
    o.type = 'foo';
    o.users = buildUnnamed883();
    o.zone = 'foo';
  }
  buildCounterDisk--;
  return o;
}

void checkDisk(api.Disk o) {
  buildCounterDisk++;
  if (buildCounterDisk < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.diskEncryptionKey!);
    checkUnnamed877(o.guestOsFeatures!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed878(o.labels!);
    unittest.expect(
      o.lastAttachTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.lastDetachTimestamp!,
      unittest.equals('foo'),
    );
    checkUnnamed879(o.licenseCodes!);
    checkUnnamed880(o.licenses!);
    unittest.expect(
      o.locationHint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.options!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.physicalBlockSizeBytes!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.provisionedIops!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    checkUnnamed881(o.replicaZones!);
    checkUnnamed882(o.resourcePolicies!);
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceDisk!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceDiskId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceImage!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceImageEncryptionKey!);
    unittest.expect(
      o.sourceImageId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceSnapshot!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceSnapshotEncryptionKey!);
    unittest.expect(
      o.sourceSnapshotId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceStorageObject!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
    checkUnnamed883(o.users!);
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterDisk--;
}

core.Map<core.String, api.DisksScopedList> buildUnnamed884() => {
      'x': buildDisksScopedList(),
      'y': buildDisksScopedList(),
    };

void checkUnnamed884(core.Map<core.String, api.DisksScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDisksScopedList(o['x']!);
  checkDisksScopedList(o['y']!);
}

core.List<core.String> buildUnnamed885() => [
      'foo',
      'foo',
    ];

void checkUnnamed885(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterDiskAggregatedListWarningData = 0;
api.DiskAggregatedListWarningData buildDiskAggregatedListWarningData() {
  final o = api.DiskAggregatedListWarningData();
  buildCounterDiskAggregatedListWarningData++;
  if (buildCounterDiskAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDiskAggregatedListWarningData--;
  return o;
}

void checkDiskAggregatedListWarningData(api.DiskAggregatedListWarningData o) {
  buildCounterDiskAggregatedListWarningData++;
  if (buildCounterDiskAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskAggregatedListWarningData--;
}

core.List<api.DiskAggregatedListWarningData> buildUnnamed886() => [
      buildDiskAggregatedListWarningData(),
      buildDiskAggregatedListWarningData(),
    ];

void checkUnnamed886(core.List<api.DiskAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskAggregatedListWarningData(o[0]);
  checkDiskAggregatedListWarningData(o[1]);
}

core.int buildCounterDiskAggregatedListWarning = 0;
api.DiskAggregatedListWarning buildDiskAggregatedListWarning() {
  final o = api.DiskAggregatedListWarning();
  buildCounterDiskAggregatedListWarning++;
  if (buildCounterDiskAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed886();
    o.message = 'foo';
  }
  buildCounterDiskAggregatedListWarning--;
  return o;
}

void checkDiskAggregatedListWarning(api.DiskAggregatedListWarning o) {
  buildCounterDiskAggregatedListWarning++;
  if (buildCounterDiskAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed886(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskAggregatedListWarning--;
}

core.int buildCounterDiskAggregatedList = 0;
api.DiskAggregatedList buildDiskAggregatedList() {
  final o = api.DiskAggregatedList();
  buildCounterDiskAggregatedList++;
  if (buildCounterDiskAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed884();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed885();
    o.warning = buildDiskAggregatedListWarning();
  }
  buildCounterDiskAggregatedList--;
  return o;
}

void checkDiskAggregatedList(api.DiskAggregatedList o) {
  buildCounterDiskAggregatedList++;
  if (buildCounterDiskAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed884(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed885(o.unreachables!);
    checkDiskAggregatedListWarning(o.warning!);
  }
  buildCounterDiskAggregatedList--;
}

core.int buildCounterDiskInstantiationConfig = 0;
api.DiskInstantiationConfig buildDiskInstantiationConfig() {
  final o = api.DiskInstantiationConfig();
  buildCounterDiskInstantiationConfig++;
  if (buildCounterDiskInstantiationConfig < 3) {
    o.autoDelete = true;
    o.customImage = 'foo';
    o.deviceName = 'foo';
    o.instantiateFrom = 'foo';
  }
  buildCounterDiskInstantiationConfig--;
  return o;
}

void checkDiskInstantiationConfig(api.DiskInstantiationConfig o) {
  buildCounterDiskInstantiationConfig++;
  if (buildCounterDiskInstantiationConfig < 3) {
    unittest.expect(o.autoDelete!, unittest.isTrue);
    unittest.expect(
      o.customImage!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.deviceName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instantiateFrom!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskInstantiationConfig--;
}

core.List<api.Disk> buildUnnamed887() => [
      buildDisk(),
      buildDisk(),
    ];

void checkUnnamed887(core.List<api.Disk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDisk(o[0]);
  checkDisk(o[1]);
}

core.int buildCounterDiskListWarningData = 0;
api.DiskListWarningData buildDiskListWarningData() {
  final o = api.DiskListWarningData();
  buildCounterDiskListWarningData++;
  if (buildCounterDiskListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDiskListWarningData--;
  return o;
}

void checkDiskListWarningData(api.DiskListWarningData o) {
  buildCounterDiskListWarningData++;
  if (buildCounterDiskListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskListWarningData--;
}

core.List<api.DiskListWarningData> buildUnnamed888() => [
      buildDiskListWarningData(),
      buildDiskListWarningData(),
    ];

void checkUnnamed888(core.List<api.DiskListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskListWarningData(o[0]);
  checkDiskListWarningData(o[1]);
}

core.int buildCounterDiskListWarning = 0;
api.DiskListWarning buildDiskListWarning() {
  final o = api.DiskListWarning();
  buildCounterDiskListWarning++;
  if (buildCounterDiskListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed888();
    o.message = 'foo';
  }
  buildCounterDiskListWarning--;
  return o;
}

void checkDiskListWarning(api.DiskListWarning o) {
  buildCounterDiskListWarning++;
  if (buildCounterDiskListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed888(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskListWarning--;
}

core.int buildCounterDiskList = 0;
api.DiskList buildDiskList() {
  final o = api.DiskList();
  buildCounterDiskList++;
  if (buildCounterDiskList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed887();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildDiskListWarning();
  }
  buildCounterDiskList--;
  return o;
}

void checkDiskList(api.DiskList o) {
  buildCounterDiskList++;
  if (buildCounterDiskList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed887(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkDiskListWarning(o.warning!);
  }
  buildCounterDiskList--;
}

core.int buildCounterDiskMoveRequest = 0;
api.DiskMoveRequest buildDiskMoveRequest() {
  final o = api.DiskMoveRequest();
  buildCounterDiskMoveRequest++;
  if (buildCounterDiskMoveRequest < 3) {
    o.destinationZone = 'foo';
    o.targetDisk = 'foo';
  }
  buildCounterDiskMoveRequest--;
  return o;
}

void checkDiskMoveRequest(api.DiskMoveRequest o) {
  buildCounterDiskMoveRequest++;
  if (buildCounterDiskMoveRequest < 3) {
    unittest.expect(
      o.destinationZone!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetDisk!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskMoveRequest--;
}

core.int buildCounterDiskType = 0;
api.DiskType buildDiskType() {
  final o = api.DiskType();
  buildCounterDiskType++;
  if (buildCounterDiskType < 3) {
    o.creationTimestamp = 'foo';
    o.defaultDiskSizeGb = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.validDiskSize = 'foo';
    o.zone = 'foo';
  }
  buildCounterDiskType--;
  return o;
}

void checkDiskType(api.DiskType o) {
  buildCounterDiskType++;
  if (buildCounterDiskType < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.defaultDiskSizeGb!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.validDiskSize!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskType--;
}

core.Map<core.String, api.DiskTypesScopedList> buildUnnamed889() => {
      'x': buildDiskTypesScopedList(),
      'y': buildDiskTypesScopedList(),
    };

void checkUnnamed889(core.Map<core.String, api.DiskTypesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskTypesScopedList(o['x']!);
  checkDiskTypesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed890() => [
      'foo',
      'foo',
    ];

void checkUnnamed890(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterDiskTypeAggregatedListWarningData = 0;
api.DiskTypeAggregatedListWarningData buildDiskTypeAggregatedListWarningData() {
  final o = api.DiskTypeAggregatedListWarningData();
  buildCounterDiskTypeAggregatedListWarningData++;
  if (buildCounterDiskTypeAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDiskTypeAggregatedListWarningData--;
  return o;
}

void checkDiskTypeAggregatedListWarningData(
    api.DiskTypeAggregatedListWarningData o) {
  buildCounterDiskTypeAggregatedListWarningData++;
  if (buildCounterDiskTypeAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypeAggregatedListWarningData--;
}

core.List<api.DiskTypeAggregatedListWarningData> buildUnnamed891() => [
      buildDiskTypeAggregatedListWarningData(),
      buildDiskTypeAggregatedListWarningData(),
    ];

void checkUnnamed891(core.List<api.DiskTypeAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskTypeAggregatedListWarningData(o[0]);
  checkDiskTypeAggregatedListWarningData(o[1]);
}

core.int buildCounterDiskTypeAggregatedListWarning = 0;
api.DiskTypeAggregatedListWarning buildDiskTypeAggregatedListWarning() {
  final o = api.DiskTypeAggregatedListWarning();
  buildCounterDiskTypeAggregatedListWarning++;
  if (buildCounterDiskTypeAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed891();
    o.message = 'foo';
  }
  buildCounterDiskTypeAggregatedListWarning--;
  return o;
}

void checkDiskTypeAggregatedListWarning(api.DiskTypeAggregatedListWarning o) {
  buildCounterDiskTypeAggregatedListWarning++;
  if (buildCounterDiskTypeAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed891(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypeAggregatedListWarning--;
}

core.int buildCounterDiskTypeAggregatedList = 0;
api.DiskTypeAggregatedList buildDiskTypeAggregatedList() {
  final o = api.DiskTypeAggregatedList();
  buildCounterDiskTypeAggregatedList++;
  if (buildCounterDiskTypeAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed889();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed890();
    o.warning = buildDiskTypeAggregatedListWarning();
  }
  buildCounterDiskTypeAggregatedList--;
  return o;
}

void checkDiskTypeAggregatedList(api.DiskTypeAggregatedList o) {
  buildCounterDiskTypeAggregatedList++;
  if (buildCounterDiskTypeAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed889(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed890(o.unreachables!);
    checkDiskTypeAggregatedListWarning(o.warning!);
  }
  buildCounterDiskTypeAggregatedList--;
}

core.List<api.DiskType> buildUnnamed892() => [
      buildDiskType(),
      buildDiskType(),
    ];

void checkUnnamed892(core.List<api.DiskType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskType(o[0]);
  checkDiskType(o[1]);
}

core.int buildCounterDiskTypeListWarningData = 0;
api.DiskTypeListWarningData buildDiskTypeListWarningData() {
  final o = api.DiskTypeListWarningData();
  buildCounterDiskTypeListWarningData++;
  if (buildCounterDiskTypeListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDiskTypeListWarningData--;
  return o;
}

void checkDiskTypeListWarningData(api.DiskTypeListWarningData o) {
  buildCounterDiskTypeListWarningData++;
  if (buildCounterDiskTypeListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypeListWarningData--;
}

core.List<api.DiskTypeListWarningData> buildUnnamed893() => [
      buildDiskTypeListWarningData(),
      buildDiskTypeListWarningData(),
    ];

void checkUnnamed893(core.List<api.DiskTypeListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskTypeListWarningData(o[0]);
  checkDiskTypeListWarningData(o[1]);
}

core.int buildCounterDiskTypeListWarning = 0;
api.DiskTypeListWarning buildDiskTypeListWarning() {
  final o = api.DiskTypeListWarning();
  buildCounterDiskTypeListWarning++;
  if (buildCounterDiskTypeListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed893();
    o.message = 'foo';
  }
  buildCounterDiskTypeListWarning--;
  return o;
}

void checkDiskTypeListWarning(api.DiskTypeListWarning o) {
  buildCounterDiskTypeListWarning++;
  if (buildCounterDiskTypeListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed893(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypeListWarning--;
}

core.int buildCounterDiskTypeList = 0;
api.DiskTypeList buildDiskTypeList() {
  final o = api.DiskTypeList();
  buildCounterDiskTypeList++;
  if (buildCounterDiskTypeList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed892();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildDiskTypeListWarning();
  }
  buildCounterDiskTypeList--;
  return o;
}

void checkDiskTypeList(api.DiskTypeList o) {
  buildCounterDiskTypeList++;
  if (buildCounterDiskTypeList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed892(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkDiskTypeListWarning(o.warning!);
  }
  buildCounterDiskTypeList--;
}

core.List<api.DiskType> buildUnnamed894() => [
      buildDiskType(),
      buildDiskType(),
    ];

void checkUnnamed894(core.List<api.DiskType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskType(o[0]);
  checkDiskType(o[1]);
}

core.int buildCounterDiskTypesScopedListWarningData = 0;
api.DiskTypesScopedListWarningData buildDiskTypesScopedListWarningData() {
  final o = api.DiskTypesScopedListWarningData();
  buildCounterDiskTypesScopedListWarningData++;
  if (buildCounterDiskTypesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDiskTypesScopedListWarningData--;
  return o;
}

void checkDiskTypesScopedListWarningData(api.DiskTypesScopedListWarningData o) {
  buildCounterDiskTypesScopedListWarningData++;
  if (buildCounterDiskTypesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypesScopedListWarningData--;
}

core.List<api.DiskTypesScopedListWarningData> buildUnnamed895() => [
      buildDiskTypesScopedListWarningData(),
      buildDiskTypesScopedListWarningData(),
    ];

void checkUnnamed895(core.List<api.DiskTypesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskTypesScopedListWarningData(o[0]);
  checkDiskTypesScopedListWarningData(o[1]);
}

core.int buildCounterDiskTypesScopedListWarning = 0;
api.DiskTypesScopedListWarning buildDiskTypesScopedListWarning() {
  final o = api.DiskTypesScopedListWarning();
  buildCounterDiskTypesScopedListWarning++;
  if (buildCounterDiskTypesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed895();
    o.message = 'foo';
  }
  buildCounterDiskTypesScopedListWarning--;
  return o;
}

void checkDiskTypesScopedListWarning(api.DiskTypesScopedListWarning o) {
  buildCounterDiskTypesScopedListWarning++;
  if (buildCounterDiskTypesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed895(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDiskTypesScopedListWarning--;
}

core.int buildCounterDiskTypesScopedList = 0;
api.DiskTypesScopedList buildDiskTypesScopedList() {
  final o = api.DiskTypesScopedList();
  buildCounterDiskTypesScopedList++;
  if (buildCounterDiskTypesScopedList < 3) {
    o.diskTypes = buildUnnamed894();
    o.warning = buildDiskTypesScopedListWarning();
  }
  buildCounterDiskTypesScopedList--;
  return o;
}

void checkDiskTypesScopedList(api.DiskTypesScopedList o) {
  buildCounterDiskTypesScopedList++;
  if (buildCounterDiskTypesScopedList < 3) {
    checkUnnamed894(o.diskTypes!);
    checkDiskTypesScopedListWarning(o.warning!);
  }
  buildCounterDiskTypesScopedList--;
}

core.List<core.String> buildUnnamed896() => [
      'foo',
      'foo',
    ];

void checkUnnamed896(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterDisksAddResourcePoliciesRequest = 0;
api.DisksAddResourcePoliciesRequest buildDisksAddResourcePoliciesRequest() {
  final o = api.DisksAddResourcePoliciesRequest();
  buildCounterDisksAddResourcePoliciesRequest++;
  if (buildCounterDisksAddResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed896();
  }
  buildCounterDisksAddResourcePoliciesRequest--;
  return o;
}

void checkDisksAddResourcePoliciesRequest(
    api.DisksAddResourcePoliciesRequest o) {
  buildCounterDisksAddResourcePoliciesRequest++;
  if (buildCounterDisksAddResourcePoliciesRequest < 3) {
    checkUnnamed896(o.resourcePolicies!);
  }
  buildCounterDisksAddResourcePoliciesRequest--;
}

core.List<core.String> buildUnnamed897() => [
      'foo',
      'foo',
    ];

void checkUnnamed897(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterDisksRemoveResourcePoliciesRequest = 0;
api.DisksRemoveResourcePoliciesRequest
    buildDisksRemoveResourcePoliciesRequest() {
  final o = api.DisksRemoveResourcePoliciesRequest();
  buildCounterDisksRemoveResourcePoliciesRequest++;
  if (buildCounterDisksRemoveResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed897();
  }
  buildCounterDisksRemoveResourcePoliciesRequest--;
  return o;
}

void checkDisksRemoveResourcePoliciesRequest(
    api.DisksRemoveResourcePoliciesRequest o) {
  buildCounterDisksRemoveResourcePoliciesRequest++;
  if (buildCounterDisksRemoveResourcePoliciesRequest < 3) {
    checkUnnamed897(o.resourcePolicies!);
  }
  buildCounterDisksRemoveResourcePoliciesRequest--;
}

core.int buildCounterDisksResizeRequest = 0;
api.DisksResizeRequest buildDisksResizeRequest() {
  final o = api.DisksResizeRequest();
  buildCounterDisksResizeRequest++;
  if (buildCounterDisksResizeRequest < 3) {
    o.sizeGb = 'foo';
  }
  buildCounterDisksResizeRequest--;
  return o;
}

void checkDisksResizeRequest(api.DisksResizeRequest o) {
  buildCounterDisksResizeRequest++;
  if (buildCounterDisksResizeRequest < 3) {
    unittest.expect(
      o.sizeGb!,
      unittest.equals('foo'),
    );
  }
  buildCounterDisksResizeRequest--;
}

core.List<api.Disk> buildUnnamed898() => [
      buildDisk(),
      buildDisk(),
    ];

void checkUnnamed898(core.List<api.Disk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDisk(o[0]);
  checkDisk(o[1]);
}

core.int buildCounterDisksScopedListWarningData = 0;
api.DisksScopedListWarningData buildDisksScopedListWarningData() {
  final o = api.DisksScopedListWarningData();
  buildCounterDisksScopedListWarningData++;
  if (buildCounterDisksScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterDisksScopedListWarningData--;
  return o;
}

void checkDisksScopedListWarningData(api.DisksScopedListWarningData o) {
  buildCounterDisksScopedListWarningData++;
  if (buildCounterDisksScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterDisksScopedListWarningData--;
}

core.List<api.DisksScopedListWarningData> buildUnnamed899() => [
      buildDisksScopedListWarningData(),
      buildDisksScopedListWarningData(),
    ];

void checkUnnamed899(core.List<api.DisksScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDisksScopedListWarningData(o[0]);
  checkDisksScopedListWarningData(o[1]);
}

core.int buildCounterDisksScopedListWarning = 0;
api.DisksScopedListWarning buildDisksScopedListWarning() {
  final o = api.DisksScopedListWarning();
  buildCounterDisksScopedListWarning++;
  if (buildCounterDisksScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed899();
    o.message = 'foo';
  }
  buildCounterDisksScopedListWarning--;
  return o;
}

void checkDisksScopedListWarning(api.DisksScopedListWarning o) {
  buildCounterDisksScopedListWarning++;
  if (buildCounterDisksScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed899(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterDisksScopedListWarning--;
}

core.int buildCounterDisksScopedList = 0;
api.DisksScopedList buildDisksScopedList() {
  final o = api.DisksScopedList();
  buildCounterDisksScopedList++;
  if (buildCounterDisksScopedList < 3) {
    o.disks = buildUnnamed898();
    o.warning = buildDisksScopedListWarning();
  }
  buildCounterDisksScopedList--;
  return o;
}

void checkDisksScopedList(api.DisksScopedList o) {
  buildCounterDisksScopedList++;
  if (buildCounterDisksScopedList < 3) {
    checkUnnamed898(o.disks!);
    checkDisksScopedListWarning(o.warning!);
  }
  buildCounterDisksScopedList--;
}

core.int buildCounterDisplayDevice = 0;
api.DisplayDevice buildDisplayDevice() {
  final o = api.DisplayDevice();
  buildCounterDisplayDevice++;
  if (buildCounterDisplayDevice < 3) {
    o.enableDisplay = true;
  }
  buildCounterDisplayDevice--;
  return o;
}

void checkDisplayDevice(api.DisplayDevice o) {
  buildCounterDisplayDevice++;
  if (buildCounterDisplayDevice < 3) {
    unittest.expect(o.enableDisplay!, unittest.isTrue);
  }
  buildCounterDisplayDevice--;
}

core.List<api.DistributionPolicyZoneConfiguration> buildUnnamed900() => [
      buildDistributionPolicyZoneConfiguration(),
      buildDistributionPolicyZoneConfiguration(),
    ];

void checkUnnamed900(core.List<api.DistributionPolicyZoneConfiguration> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDistributionPolicyZoneConfiguration(o[0]);
  checkDistributionPolicyZoneConfiguration(o[1]);
}

core.int buildCounterDistributionPolicy = 0;
api.DistributionPolicy buildDistributionPolicy() {
  final o = api.DistributionPolicy();
  buildCounterDistributionPolicy++;
  if (buildCounterDistributionPolicy < 3) {
    o.targetShape = 'foo';
    o.zones = buildUnnamed900();
  }
  buildCounterDistributionPolicy--;
  return o;
}

void checkDistributionPolicy(api.DistributionPolicy o) {
  buildCounterDistributionPolicy++;
  if (buildCounterDistributionPolicy < 3) {
    unittest.expect(
      o.targetShape!,
      unittest.equals('foo'),
    );
    checkUnnamed900(o.zones!);
  }
  buildCounterDistributionPolicy--;
}

core.int buildCounterDistributionPolicyZoneConfiguration = 0;
api.DistributionPolicyZoneConfiguration
    buildDistributionPolicyZoneConfiguration() {
  final o = api.DistributionPolicyZoneConfiguration();
  buildCounterDistributionPolicyZoneConfiguration++;
  if (buildCounterDistributionPolicyZoneConfiguration < 3) {
    o.zone = 'foo';
  }
  buildCounterDistributionPolicyZoneConfiguration--;
  return o;
}

void checkDistributionPolicyZoneConfiguration(
    api.DistributionPolicyZoneConfiguration o) {
  buildCounterDistributionPolicyZoneConfiguration++;
  if (buildCounterDistributionPolicyZoneConfiguration < 3) {
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterDistributionPolicyZoneConfiguration--;
}

core.int buildCounterDuration = 0;
api.Duration buildDuration() {
  final o = api.Duration();
  buildCounterDuration++;
  if (buildCounterDuration < 3) {
    o.nanos = 42;
    o.seconds = 'foo';
  }
  buildCounterDuration--;
  return o;
}

void checkDuration(api.Duration o) {
  buildCounterDuration++;
  if (buildCounterDuration < 3) {
    unittest.expect(
      o.nanos!,
      unittest.equals(42),
    );
    unittest.expect(
      o.seconds!,
      unittest.equals('foo'),
    );
  }
  buildCounterDuration--;
}

core.int buildCounterExchangedPeeringRoute = 0;
api.ExchangedPeeringRoute buildExchangedPeeringRoute() {
  final o = api.ExchangedPeeringRoute();
  buildCounterExchangedPeeringRoute++;
  if (buildCounterExchangedPeeringRoute < 3) {
    o.destRange = 'foo';
    o.imported = true;
    o.nextHopRegion = 'foo';
    o.priority = 42;
    o.type = 'foo';
  }
  buildCounterExchangedPeeringRoute--;
  return o;
}

void checkExchangedPeeringRoute(api.ExchangedPeeringRoute o) {
  buildCounterExchangedPeeringRoute++;
  if (buildCounterExchangedPeeringRoute < 3) {
    unittest.expect(
      o.destRange!,
      unittest.equals('foo'),
    );
    unittest.expect(o.imported!, unittest.isTrue);
    unittest.expect(
      o.nextHopRegion!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterExchangedPeeringRoute--;
}

core.List<api.ExchangedPeeringRoute> buildUnnamed901() => [
      buildExchangedPeeringRoute(),
      buildExchangedPeeringRoute(),
    ];

void checkUnnamed901(core.List<api.ExchangedPeeringRoute> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkExchangedPeeringRoute(o[0]);
  checkExchangedPeeringRoute(o[1]);
}

core.int buildCounterExchangedPeeringRoutesListWarningData = 0;
api.ExchangedPeeringRoutesListWarningData
    buildExchangedPeeringRoutesListWarningData() {
  final o = api.ExchangedPeeringRoutesListWarningData();
  buildCounterExchangedPeeringRoutesListWarningData++;
  if (buildCounterExchangedPeeringRoutesListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterExchangedPeeringRoutesListWarningData--;
  return o;
}

void checkExchangedPeeringRoutesListWarningData(
    api.ExchangedPeeringRoutesListWarningData o) {
  buildCounterExchangedPeeringRoutesListWarningData++;
  if (buildCounterExchangedPeeringRoutesListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterExchangedPeeringRoutesListWarningData--;
}

core.List<api.ExchangedPeeringRoutesListWarningData> buildUnnamed902() => [
      buildExchangedPeeringRoutesListWarningData(),
      buildExchangedPeeringRoutesListWarningData(),
    ];

void checkUnnamed902(core.List<api.ExchangedPeeringRoutesListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkExchangedPeeringRoutesListWarningData(o[0]);
  checkExchangedPeeringRoutesListWarningData(o[1]);
}

core.int buildCounterExchangedPeeringRoutesListWarning = 0;
api.ExchangedPeeringRoutesListWarning buildExchangedPeeringRoutesListWarning() {
  final o = api.ExchangedPeeringRoutesListWarning();
  buildCounterExchangedPeeringRoutesListWarning++;
  if (buildCounterExchangedPeeringRoutesListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed902();
    o.message = 'foo';
  }
  buildCounterExchangedPeeringRoutesListWarning--;
  return o;
}

void checkExchangedPeeringRoutesListWarning(
    api.ExchangedPeeringRoutesListWarning o) {
  buildCounterExchangedPeeringRoutesListWarning++;
  if (buildCounterExchangedPeeringRoutesListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed902(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterExchangedPeeringRoutesListWarning--;
}

core.int buildCounterExchangedPeeringRoutesList = 0;
api.ExchangedPeeringRoutesList buildExchangedPeeringRoutesList() {
  final o = api.ExchangedPeeringRoutesList();
  buildCounterExchangedPeeringRoutesList++;
  if (buildCounterExchangedPeeringRoutesList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed901();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildExchangedPeeringRoutesListWarning();
  }
  buildCounterExchangedPeeringRoutesList--;
  return o;
}

void checkExchangedPeeringRoutesList(api.ExchangedPeeringRoutesList o) {
  buildCounterExchangedPeeringRoutesList++;
  if (buildCounterExchangedPeeringRoutesList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed901(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkExchangedPeeringRoutesListWarning(o.warning!);
  }
  buildCounterExchangedPeeringRoutesList--;
}

core.int buildCounterExpr = 0;
api.Expr buildExpr() {
  final o = api.Expr();
  buildCounterExpr++;
  if (buildCounterExpr < 3) {
    o.description = 'foo';
    o.expression = 'foo';
    o.location = 'foo';
    o.title = 'foo';
  }
  buildCounterExpr--;
  return o;
}

void checkExpr(api.Expr o) {
  buildCounterExpr++;
  if (buildCounterExpr < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expression!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.location!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.title!,
      unittest.equals('foo'),
    );
  }
  buildCounterExpr--;
}

core.List<api.ExternalVpnGatewayInterface> buildUnnamed903() => [
      buildExternalVpnGatewayInterface(),
      buildExternalVpnGatewayInterface(),
    ];

void checkUnnamed903(core.List<api.ExternalVpnGatewayInterface> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkExternalVpnGatewayInterface(o[0]);
  checkExternalVpnGatewayInterface(o[1]);
}

core.Map<core.String, core.String> buildUnnamed904() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed904(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterExternalVpnGateway = 0;
api.ExternalVpnGateway buildExternalVpnGateway() {
  final o = api.ExternalVpnGateway();
  buildCounterExternalVpnGateway++;
  if (buildCounterExternalVpnGateway < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.interfaces = buildUnnamed903();
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed904();
    o.name = 'foo';
    o.redundancyType = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterExternalVpnGateway--;
  return o;
}

void checkExternalVpnGateway(api.ExternalVpnGateway o) {
  buildCounterExternalVpnGateway++;
  if (buildCounterExternalVpnGateway < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed903(o.interfaces!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed904(o.labels!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.redundancyType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterExternalVpnGateway--;
}

core.int buildCounterExternalVpnGatewayInterface = 0;
api.ExternalVpnGatewayInterface buildExternalVpnGatewayInterface() {
  final o = api.ExternalVpnGatewayInterface();
  buildCounterExternalVpnGatewayInterface++;
  if (buildCounterExternalVpnGatewayInterface < 3) {
    o.id = 42;
    o.ipAddress = 'foo';
  }
  buildCounterExternalVpnGatewayInterface--;
  return o;
}

void checkExternalVpnGatewayInterface(api.ExternalVpnGatewayInterface o) {
  buildCounterExternalVpnGatewayInterface++;
  if (buildCounterExternalVpnGatewayInterface < 3) {
    unittest.expect(
      o.id!,
      unittest.equals(42),
    );
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
  }
  buildCounterExternalVpnGatewayInterface--;
}

core.List<api.ExternalVpnGateway> buildUnnamed905() => [
      buildExternalVpnGateway(),
      buildExternalVpnGateway(),
    ];

void checkUnnamed905(core.List<api.ExternalVpnGateway> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkExternalVpnGateway(o[0]);
  checkExternalVpnGateway(o[1]);
}

core.int buildCounterExternalVpnGatewayListWarningData = 0;
api.ExternalVpnGatewayListWarningData buildExternalVpnGatewayListWarningData() {
  final o = api.ExternalVpnGatewayListWarningData();
  buildCounterExternalVpnGatewayListWarningData++;
  if (buildCounterExternalVpnGatewayListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterExternalVpnGatewayListWarningData--;
  return o;
}

void checkExternalVpnGatewayListWarningData(
    api.ExternalVpnGatewayListWarningData o) {
  buildCounterExternalVpnGatewayListWarningData++;
  if (buildCounterExternalVpnGatewayListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterExternalVpnGatewayListWarningData--;
}

core.List<api.ExternalVpnGatewayListWarningData> buildUnnamed906() => [
      buildExternalVpnGatewayListWarningData(),
      buildExternalVpnGatewayListWarningData(),
    ];

void checkUnnamed906(core.List<api.ExternalVpnGatewayListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkExternalVpnGatewayListWarningData(o[0]);
  checkExternalVpnGatewayListWarningData(o[1]);
}

core.int buildCounterExternalVpnGatewayListWarning = 0;
api.ExternalVpnGatewayListWarning buildExternalVpnGatewayListWarning() {
  final o = api.ExternalVpnGatewayListWarning();
  buildCounterExternalVpnGatewayListWarning++;
  if (buildCounterExternalVpnGatewayListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed906();
    o.message = 'foo';
  }
  buildCounterExternalVpnGatewayListWarning--;
  return o;
}

void checkExternalVpnGatewayListWarning(api.ExternalVpnGatewayListWarning o) {
  buildCounterExternalVpnGatewayListWarning++;
  if (buildCounterExternalVpnGatewayListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed906(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterExternalVpnGatewayListWarning--;
}

core.int buildCounterExternalVpnGatewayList = 0;
api.ExternalVpnGatewayList buildExternalVpnGatewayList() {
  final o = api.ExternalVpnGatewayList();
  buildCounterExternalVpnGatewayList++;
  if (buildCounterExternalVpnGatewayList < 3) {
    o.etag = 'foo';
    o.id = 'foo';
    o.items = buildUnnamed905();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildExternalVpnGatewayListWarning();
  }
  buildCounterExternalVpnGatewayList--;
  return o;
}

void checkExternalVpnGatewayList(api.ExternalVpnGatewayList o) {
  buildCounterExternalVpnGatewayList++;
  if (buildCounterExternalVpnGatewayList < 3) {
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed905(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkExternalVpnGatewayListWarning(o.warning!);
  }
  buildCounterExternalVpnGatewayList--;
}

core.int buildCounterFileContentBuffer = 0;
api.FileContentBuffer buildFileContentBuffer() {
  final o = api.FileContentBuffer();
  buildCounterFileContentBuffer++;
  if (buildCounterFileContentBuffer < 3) {
    o.content = 'foo';
    o.fileType = 'foo';
  }
  buildCounterFileContentBuffer--;
  return o;
}

void checkFileContentBuffer(api.FileContentBuffer o) {
  buildCounterFileContentBuffer++;
  if (buildCounterFileContentBuffer < 3) {
    unittest.expect(
      o.content!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fileType!,
      unittest.equals('foo'),
    );
  }
  buildCounterFileContentBuffer--;
}

core.List<core.String> buildUnnamed907() => [
      'foo',
      'foo',
    ];

void checkUnnamed907(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewallAllowed = 0;
api.FirewallAllowed buildFirewallAllowed() {
  final o = api.FirewallAllowed();
  buildCounterFirewallAllowed++;
  if (buildCounterFirewallAllowed < 3) {
    o.IPProtocol = 'foo';
    o.ports = buildUnnamed907();
  }
  buildCounterFirewallAllowed--;
  return o;
}

void checkFirewallAllowed(api.FirewallAllowed o) {
  buildCounterFirewallAllowed++;
  if (buildCounterFirewallAllowed < 3) {
    unittest.expect(
      o.IPProtocol!,
      unittest.equals('foo'),
    );
    checkUnnamed907(o.ports!);
  }
  buildCounterFirewallAllowed--;
}

core.List<api.FirewallAllowed> buildUnnamed908() => [
      buildFirewallAllowed(),
      buildFirewallAllowed(),
    ];

void checkUnnamed908(core.List<api.FirewallAllowed> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallAllowed(o[0]);
  checkFirewallAllowed(o[1]);
}

core.List<core.String> buildUnnamed909() => [
      'foo',
      'foo',
    ];

void checkUnnamed909(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewallDenied = 0;
api.FirewallDenied buildFirewallDenied() {
  final o = api.FirewallDenied();
  buildCounterFirewallDenied++;
  if (buildCounterFirewallDenied < 3) {
    o.IPProtocol = 'foo';
    o.ports = buildUnnamed909();
  }
  buildCounterFirewallDenied--;
  return o;
}

void checkFirewallDenied(api.FirewallDenied o) {
  buildCounterFirewallDenied++;
  if (buildCounterFirewallDenied < 3) {
    unittest.expect(
      o.IPProtocol!,
      unittest.equals('foo'),
    );
    checkUnnamed909(o.ports!);
  }
  buildCounterFirewallDenied--;
}

core.List<api.FirewallDenied> buildUnnamed910() => [
      buildFirewallDenied(),
      buildFirewallDenied(),
    ];

void checkUnnamed910(core.List<api.FirewallDenied> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallDenied(o[0]);
  checkFirewallDenied(o[1]);
}

core.List<core.String> buildUnnamed911() => [
      'foo',
      'foo',
    ];

void checkUnnamed911(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed912() => [
      'foo',
      'foo',
    ];

void checkUnnamed912(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed913() => [
      'foo',
      'foo',
    ];

void checkUnnamed913(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed914() => [
      'foo',
      'foo',
    ];

void checkUnnamed914(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed915() => [
      'foo',
      'foo',
    ];

void checkUnnamed915(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed916() => [
      'foo',
      'foo',
    ];

void checkUnnamed916(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewall = 0;
api.Firewall buildFirewall() {
  final o = api.Firewall();
  buildCounterFirewall++;
  if (buildCounterFirewall < 3) {
    o.allowed = buildUnnamed908();
    o.creationTimestamp = 'foo';
    o.denied = buildUnnamed910();
    o.description = 'foo';
    o.destinationRanges = buildUnnamed911();
    o.direction = 'foo';
    o.disabled = true;
    o.id = 'foo';
    o.kind = 'foo';
    o.logConfig = buildFirewallLogConfig();
    o.name = 'foo';
    o.network = 'foo';
    o.priority = 42;
    o.selfLink = 'foo';
    o.sourceRanges = buildUnnamed912();
    o.sourceServiceAccounts = buildUnnamed913();
    o.sourceTags = buildUnnamed914();
    o.targetServiceAccounts = buildUnnamed915();
    o.targetTags = buildUnnamed916();
  }
  buildCounterFirewall--;
  return o;
}

void checkFirewall(api.Firewall o) {
  buildCounterFirewall++;
  if (buildCounterFirewall < 3) {
    checkUnnamed908(o.allowed!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkUnnamed910(o.denied!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed911(o.destinationRanges!);
    unittest.expect(
      o.direction!,
      unittest.equals('foo'),
    );
    unittest.expect(o.disabled!, unittest.isTrue);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkFirewallLogConfig(o.logConfig!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed912(o.sourceRanges!);
    checkUnnamed913(o.sourceServiceAccounts!);
    checkUnnamed914(o.sourceTags!);
    checkUnnamed915(o.targetServiceAccounts!);
    checkUnnamed916(o.targetTags!);
  }
  buildCounterFirewall--;
}

core.List<api.Firewall> buildUnnamed917() => [
      buildFirewall(),
      buildFirewall(),
    ];

void checkUnnamed917(core.List<api.Firewall> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewall(o[0]);
  checkFirewall(o[1]);
}

core.int buildCounterFirewallListWarningData = 0;
api.FirewallListWarningData buildFirewallListWarningData() {
  final o = api.FirewallListWarningData();
  buildCounterFirewallListWarningData++;
  if (buildCounterFirewallListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterFirewallListWarningData--;
  return o;
}

void checkFirewallListWarningData(api.FirewallListWarningData o) {
  buildCounterFirewallListWarningData++;
  if (buildCounterFirewallListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallListWarningData--;
}

core.List<api.FirewallListWarningData> buildUnnamed918() => [
      buildFirewallListWarningData(),
      buildFirewallListWarningData(),
    ];

void checkUnnamed918(core.List<api.FirewallListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallListWarningData(o[0]);
  checkFirewallListWarningData(o[1]);
}

core.int buildCounterFirewallListWarning = 0;
api.FirewallListWarning buildFirewallListWarning() {
  final o = api.FirewallListWarning();
  buildCounterFirewallListWarning++;
  if (buildCounterFirewallListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed918();
    o.message = 'foo';
  }
  buildCounterFirewallListWarning--;
  return o;
}

void checkFirewallListWarning(api.FirewallListWarning o) {
  buildCounterFirewallListWarning++;
  if (buildCounterFirewallListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed918(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallListWarning--;
}

core.int buildCounterFirewallList = 0;
api.FirewallList buildFirewallList() {
  final o = api.FirewallList();
  buildCounterFirewallList++;
  if (buildCounterFirewallList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed917();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildFirewallListWarning();
  }
  buildCounterFirewallList--;
  return o;
}

void checkFirewallList(api.FirewallList o) {
  buildCounterFirewallList++;
  if (buildCounterFirewallList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed917(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkFirewallListWarning(o.warning!);
  }
  buildCounterFirewallList--;
}

core.int buildCounterFirewallLogConfig = 0;
api.FirewallLogConfig buildFirewallLogConfig() {
  final o = api.FirewallLogConfig();
  buildCounterFirewallLogConfig++;
  if (buildCounterFirewallLogConfig < 3) {
    o.enable = true;
    o.metadata = 'foo';
  }
  buildCounterFirewallLogConfig--;
  return o;
}

void checkFirewallLogConfig(api.FirewallLogConfig o) {
  buildCounterFirewallLogConfig++;
  if (buildCounterFirewallLogConfig < 3) {
    unittest.expect(o.enable!, unittest.isTrue);
    unittest.expect(
      o.metadata!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallLogConfig--;
}

core.List<api.FirewallPolicyAssociation> buildUnnamed919() => [
      buildFirewallPolicyAssociation(),
      buildFirewallPolicyAssociation(),
    ];

void checkUnnamed919(core.List<api.FirewallPolicyAssociation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyAssociation(o[0]);
  checkFirewallPolicyAssociation(o[1]);
}

core.int buildCounterFirewallPoliciesListAssociationsResponse = 0;
api.FirewallPoliciesListAssociationsResponse
    buildFirewallPoliciesListAssociationsResponse() {
  final o = api.FirewallPoliciesListAssociationsResponse();
  buildCounterFirewallPoliciesListAssociationsResponse++;
  if (buildCounterFirewallPoliciesListAssociationsResponse < 3) {
    o.associations = buildUnnamed919();
    o.kind = 'foo';
  }
  buildCounterFirewallPoliciesListAssociationsResponse--;
  return o;
}

void checkFirewallPoliciesListAssociationsResponse(
    api.FirewallPoliciesListAssociationsResponse o) {
  buildCounterFirewallPoliciesListAssociationsResponse++;
  if (buildCounterFirewallPoliciesListAssociationsResponse < 3) {
    checkUnnamed919(o.associations!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallPoliciesListAssociationsResponse--;
}

core.List<api.FirewallPolicyAssociation> buildUnnamed920() => [
      buildFirewallPolicyAssociation(),
      buildFirewallPolicyAssociation(),
    ];

void checkUnnamed920(core.List<api.FirewallPolicyAssociation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyAssociation(o[0]);
  checkFirewallPolicyAssociation(o[1]);
}

core.List<api.FirewallPolicyRule> buildUnnamed921() => [
      buildFirewallPolicyRule(),
      buildFirewallPolicyRule(),
    ];

void checkUnnamed921(core.List<api.FirewallPolicyRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyRule(o[0]);
  checkFirewallPolicyRule(o[1]);
}

core.int buildCounterFirewallPolicy = 0;
api.FirewallPolicy buildFirewallPolicy() {
  final o = api.FirewallPolicy();
  buildCounterFirewallPolicy++;
  if (buildCounterFirewallPolicy < 3) {
    o.associations = buildUnnamed920();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.displayName = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.parent = 'foo';
    o.ruleTupleCount = 42;
    o.rules = buildUnnamed921();
    o.selfLink = 'foo';
    o.selfLinkWithId = 'foo';
    o.shortName = 'foo';
  }
  buildCounterFirewallPolicy--;
  return o;
}

void checkFirewallPolicy(api.FirewallPolicy o) {
  buildCounterFirewallPolicy++;
  if (buildCounterFirewallPolicy < 3) {
    checkUnnamed920(o.associations!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.displayName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.parent!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ruleTupleCount!,
      unittest.equals(42),
    );
    checkUnnamed921(o.rules!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLinkWithId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.shortName!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallPolicy--;
}

core.int buildCounterFirewallPolicyAssociation = 0;
api.FirewallPolicyAssociation buildFirewallPolicyAssociation() {
  final o = api.FirewallPolicyAssociation();
  buildCounterFirewallPolicyAssociation++;
  if (buildCounterFirewallPolicyAssociation < 3) {
    o.attachmentTarget = 'foo';
    o.displayName = 'foo';
    o.firewallPolicyId = 'foo';
    o.name = 'foo';
    o.shortName = 'foo';
  }
  buildCounterFirewallPolicyAssociation--;
  return o;
}

void checkFirewallPolicyAssociation(api.FirewallPolicyAssociation o) {
  buildCounterFirewallPolicyAssociation++;
  if (buildCounterFirewallPolicyAssociation < 3) {
    unittest.expect(
      o.attachmentTarget!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.displayName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.firewallPolicyId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.shortName!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallPolicyAssociation--;
}

core.List<api.FirewallPolicy> buildUnnamed922() => [
      buildFirewallPolicy(),
      buildFirewallPolicy(),
    ];

void checkUnnamed922(core.List<api.FirewallPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicy(o[0]);
  checkFirewallPolicy(o[1]);
}

core.int buildCounterFirewallPolicyListWarningData = 0;
api.FirewallPolicyListWarningData buildFirewallPolicyListWarningData() {
  final o = api.FirewallPolicyListWarningData();
  buildCounterFirewallPolicyListWarningData++;
  if (buildCounterFirewallPolicyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterFirewallPolicyListWarningData--;
  return o;
}

void checkFirewallPolicyListWarningData(api.FirewallPolicyListWarningData o) {
  buildCounterFirewallPolicyListWarningData++;
  if (buildCounterFirewallPolicyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallPolicyListWarningData--;
}

core.List<api.FirewallPolicyListWarningData> buildUnnamed923() => [
      buildFirewallPolicyListWarningData(),
      buildFirewallPolicyListWarningData(),
    ];

void checkUnnamed923(core.List<api.FirewallPolicyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyListWarningData(o[0]);
  checkFirewallPolicyListWarningData(o[1]);
}

core.int buildCounterFirewallPolicyListWarning = 0;
api.FirewallPolicyListWarning buildFirewallPolicyListWarning() {
  final o = api.FirewallPolicyListWarning();
  buildCounterFirewallPolicyListWarning++;
  if (buildCounterFirewallPolicyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed923();
    o.message = 'foo';
  }
  buildCounterFirewallPolicyListWarning--;
  return o;
}

void checkFirewallPolicyListWarning(api.FirewallPolicyListWarning o) {
  buildCounterFirewallPolicyListWarning++;
  if (buildCounterFirewallPolicyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed923(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterFirewallPolicyListWarning--;
}

core.int buildCounterFirewallPolicyList = 0;
api.FirewallPolicyList buildFirewallPolicyList() {
  final o = api.FirewallPolicyList();
  buildCounterFirewallPolicyList++;
  if (buildCounterFirewallPolicyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed922();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.warning = buildFirewallPolicyListWarning();
  }
  buildCounterFirewallPolicyList--;
  return o;
}

void checkFirewallPolicyList(api.FirewallPolicyList o) {
  buildCounterFirewallPolicyList++;
  if (buildCounterFirewallPolicyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed922(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkFirewallPolicyListWarning(o.warning!);
  }
  buildCounterFirewallPolicyList--;
}

core.List<core.String> buildUnnamed924() => [
      'foo',
      'foo',
    ];

void checkUnnamed924(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed925() => [
      'foo',
      'foo',
    ];

void checkUnnamed925(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewallPolicyRule = 0;
api.FirewallPolicyRule buildFirewallPolicyRule() {
  final o = api.FirewallPolicyRule();
  buildCounterFirewallPolicyRule++;
  if (buildCounterFirewallPolicyRule < 3) {
    o.action = 'foo';
    o.description = 'foo';
    o.direction = 'foo';
    o.disabled = true;
    o.enableLogging = true;
    o.kind = 'foo';
    o.match = buildFirewallPolicyRuleMatcher();
    o.priority = 42;
    o.ruleTupleCount = 42;
    o.targetResources = buildUnnamed924();
    o.targetServiceAccounts = buildUnnamed925();
  }
  buildCounterFirewallPolicyRule--;
  return o;
}

void checkFirewallPolicyRule(api.FirewallPolicyRule o) {
  buildCounterFirewallPolicyRule++;
  if (buildCounterFirewallPolicyRule < 3) {
    unittest.expect(
      o.action!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.direction!,
      unittest.equals('foo'),
    );
    unittest.expect(o.disabled!, unittest.isTrue);
    unittest.expect(o.enableLogging!, unittest.isTrue);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkFirewallPolicyRuleMatcher(o.match!);
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.ruleTupleCount!,
      unittest.equals(42),
    );
    checkUnnamed924(o.targetResources!);
    checkUnnamed925(o.targetServiceAccounts!);
  }
  buildCounterFirewallPolicyRule--;
}

core.List<core.String> buildUnnamed926() => [
      'foo',
      'foo',
    ];

void checkUnnamed926(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.FirewallPolicyRuleMatcherLayer4Config> buildUnnamed927() => [
      buildFirewallPolicyRuleMatcherLayer4Config(),
      buildFirewallPolicyRuleMatcherLayer4Config(),
    ];

void checkUnnamed927(core.List<api.FirewallPolicyRuleMatcherLayer4Config> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyRuleMatcherLayer4Config(o[0]);
  checkFirewallPolicyRuleMatcherLayer4Config(o[1]);
}

core.List<core.String> buildUnnamed928() => [
      'foo',
      'foo',
    ];

void checkUnnamed928(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewallPolicyRuleMatcher = 0;
api.FirewallPolicyRuleMatcher buildFirewallPolicyRuleMatcher() {
  final o = api.FirewallPolicyRuleMatcher();
  buildCounterFirewallPolicyRuleMatcher++;
  if (buildCounterFirewallPolicyRuleMatcher < 3) {
    o.destIpRanges = buildUnnamed926();
    o.layer4Configs = buildUnnamed927();
    o.srcIpRanges = buildUnnamed928();
  }
  buildCounterFirewallPolicyRuleMatcher--;
  return o;
}

void checkFirewallPolicyRuleMatcher(api.FirewallPolicyRuleMatcher o) {
  buildCounterFirewallPolicyRuleMatcher++;
  if (buildCounterFirewallPolicyRuleMatcher < 3) {
    checkUnnamed926(o.destIpRanges!);
    checkUnnamed927(o.layer4Configs!);
    checkUnnamed928(o.srcIpRanges!);
  }
  buildCounterFirewallPolicyRuleMatcher--;
}

core.List<core.String> buildUnnamed929() => [
      'foo',
      'foo',
    ];

void checkUnnamed929(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterFirewallPolicyRuleMatcherLayer4Config = 0;
api.FirewallPolicyRuleMatcherLayer4Config
    buildFirewallPolicyRuleMatcherLayer4Config() {
  final o = api.FirewallPolicyRuleMatcherLayer4Config();
  buildCounterFirewallPolicyRuleMatcherLayer4Config++;
  if (buildCounterFirewallPolicyRuleMatcherLayer4Config < 3) {
    o.ipProtocol = 'foo';
    o.ports = buildUnnamed929();
  }
  buildCounterFirewallPolicyRuleMatcherLayer4Config--;
  return o;
}

void checkFirewallPolicyRuleMatcherLayer4Config(
    api.FirewallPolicyRuleMatcherLayer4Config o) {
  buildCounterFirewallPolicyRuleMatcherLayer4Config++;
  if (buildCounterFirewallPolicyRuleMatcherLayer4Config < 3) {
    unittest.expect(
      o.ipProtocol!,
      unittest.equals('foo'),
    );
    checkUnnamed929(o.ports!);
  }
  buildCounterFirewallPolicyRuleMatcherLayer4Config--;
}

core.int buildCounterFixedOrPercent = 0;
api.FixedOrPercent buildFixedOrPercent() {
  final o = api.FixedOrPercent();
  buildCounterFixedOrPercent++;
  if (buildCounterFixedOrPercent < 3) {
    o.calculated = 42;
    o.fixed = 42;
    o.percent = 42;
  }
  buildCounterFixedOrPercent--;
  return o;
}

void checkFixedOrPercent(api.FixedOrPercent o) {
  buildCounterFixedOrPercent++;
  if (buildCounterFixedOrPercent < 3) {
    unittest.expect(
      o.calculated!,
      unittest.equals(42),
    );
    unittest.expect(
      o.fixed!,
      unittest.equals(42),
    );
    unittest.expect(
      o.percent!,
      unittest.equals(42),
    );
  }
  buildCounterFixedOrPercent--;
}

core.Map<core.String, core.String> buildUnnamed930() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed930(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<api.MetadataFilter> buildUnnamed931() => [
      buildMetadataFilter(),
      buildMetadataFilter(),
    ];

void checkUnnamed931(core.List<api.MetadataFilter> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMetadataFilter(o[0]);
  checkMetadataFilter(o[1]);
}

core.List<core.String> buildUnnamed932() => [
      'foo',
      'foo',
    ];

void checkUnnamed932(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.ForwardingRuleServiceDirectoryRegistration> buildUnnamed933() => [
      buildForwardingRuleServiceDirectoryRegistration(),
      buildForwardingRuleServiceDirectoryRegistration(),
    ];

void checkUnnamed933(
    core.List<api.ForwardingRuleServiceDirectoryRegistration> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRuleServiceDirectoryRegistration(o[0]);
  checkForwardingRuleServiceDirectoryRegistration(o[1]);
}

core.int buildCounterForwardingRule = 0;
api.ForwardingRule buildForwardingRule() {
  final o = api.ForwardingRule();
  buildCounterForwardingRule++;
  if (buildCounterForwardingRule < 3) {
    o.IPAddress = 'foo';
    o.IPProtocol = 'foo';
    o.allPorts = true;
    o.allowGlobalAccess = true;
    o.backendService = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.ipVersion = 'foo';
    o.isMirroringCollector = true;
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed930();
    o.loadBalancingScheme = 'foo';
    o.metadataFilters = buildUnnamed931();
    o.name = 'foo';
    o.network = 'foo';
    o.networkTier = 'foo';
    o.portRange = 'foo';
    o.ports = buildUnnamed932();
    o.pscConnectionId = 'foo';
    o.pscConnectionStatus = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.serviceDirectoryRegistrations = buildUnnamed933();
    o.serviceLabel = 'foo';
    o.serviceName = 'foo';
    o.subnetwork = 'foo';
    o.target = 'foo';
  }
  buildCounterForwardingRule--;
  return o;
}

void checkForwardingRule(api.ForwardingRule o) {
  buildCounterForwardingRule++;
  if (buildCounterForwardingRule < 3) {
    unittest.expect(
      o.IPAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.IPProtocol!,
      unittest.equals('foo'),
    );
    unittest.expect(o.allPorts!, unittest.isTrue);
    unittest.expect(o.allowGlobalAccess!, unittest.isTrue);
    unittest.expect(
      o.backendService!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipVersion!,
      unittest.equals('foo'),
    );
    unittest.expect(o.isMirroringCollector!, unittest.isTrue);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed930(o.labels!);
    unittest.expect(
      o.loadBalancingScheme!,
      unittest.equals('foo'),
    );
    checkUnnamed931(o.metadataFilters!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.networkTier!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portRange!,
      unittest.equals('foo'),
    );
    checkUnnamed932(o.ports!);
    unittest.expect(
      o.pscConnectionId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.pscConnectionStatus!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed933(o.serviceDirectoryRegistrations!);
    unittest.expect(
      o.serviceLabel!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.serviceName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.target!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRule--;
}

core.Map<core.String, api.ForwardingRulesScopedList> buildUnnamed934() => {
      'x': buildForwardingRulesScopedList(),
      'y': buildForwardingRulesScopedList(),
    };

void checkUnnamed934(core.Map<core.String, api.ForwardingRulesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRulesScopedList(o['x']!);
  checkForwardingRulesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed935() => [
      'foo',
      'foo',
    ];

void checkUnnamed935(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterForwardingRuleAggregatedListWarningData = 0;
api.ForwardingRuleAggregatedListWarningData
    buildForwardingRuleAggregatedListWarningData() {
  final o = api.ForwardingRuleAggregatedListWarningData();
  buildCounterForwardingRuleAggregatedListWarningData++;
  if (buildCounterForwardingRuleAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterForwardingRuleAggregatedListWarningData--;
  return o;
}

void checkForwardingRuleAggregatedListWarningData(
    api.ForwardingRuleAggregatedListWarningData o) {
  buildCounterForwardingRuleAggregatedListWarningData++;
  if (buildCounterForwardingRuleAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleAggregatedListWarningData--;
}

core.List<api.ForwardingRuleAggregatedListWarningData> buildUnnamed936() => [
      buildForwardingRuleAggregatedListWarningData(),
      buildForwardingRuleAggregatedListWarningData(),
    ];

void checkUnnamed936(core.List<api.ForwardingRuleAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRuleAggregatedListWarningData(o[0]);
  checkForwardingRuleAggregatedListWarningData(o[1]);
}

core.int buildCounterForwardingRuleAggregatedListWarning = 0;
api.ForwardingRuleAggregatedListWarning
    buildForwardingRuleAggregatedListWarning() {
  final o = api.ForwardingRuleAggregatedListWarning();
  buildCounterForwardingRuleAggregatedListWarning++;
  if (buildCounterForwardingRuleAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed936();
    o.message = 'foo';
  }
  buildCounterForwardingRuleAggregatedListWarning--;
  return o;
}

void checkForwardingRuleAggregatedListWarning(
    api.ForwardingRuleAggregatedListWarning o) {
  buildCounterForwardingRuleAggregatedListWarning++;
  if (buildCounterForwardingRuleAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed936(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleAggregatedListWarning--;
}

core.int buildCounterForwardingRuleAggregatedList = 0;
api.ForwardingRuleAggregatedList buildForwardingRuleAggregatedList() {
  final o = api.ForwardingRuleAggregatedList();
  buildCounterForwardingRuleAggregatedList++;
  if (buildCounterForwardingRuleAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed934();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed935();
    o.warning = buildForwardingRuleAggregatedListWarning();
  }
  buildCounterForwardingRuleAggregatedList--;
  return o;
}

void checkForwardingRuleAggregatedList(api.ForwardingRuleAggregatedList o) {
  buildCounterForwardingRuleAggregatedList++;
  if (buildCounterForwardingRuleAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed934(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed935(o.unreachables!);
    checkForwardingRuleAggregatedListWarning(o.warning!);
  }
  buildCounterForwardingRuleAggregatedList--;
}

core.List<api.ForwardingRule> buildUnnamed937() => [
      buildForwardingRule(),
      buildForwardingRule(),
    ];

void checkUnnamed937(core.List<api.ForwardingRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRule(o[0]);
  checkForwardingRule(o[1]);
}

core.int buildCounterForwardingRuleListWarningData = 0;
api.ForwardingRuleListWarningData buildForwardingRuleListWarningData() {
  final o = api.ForwardingRuleListWarningData();
  buildCounterForwardingRuleListWarningData++;
  if (buildCounterForwardingRuleListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterForwardingRuleListWarningData--;
  return o;
}

void checkForwardingRuleListWarningData(api.ForwardingRuleListWarningData o) {
  buildCounterForwardingRuleListWarningData++;
  if (buildCounterForwardingRuleListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleListWarningData--;
}

core.List<api.ForwardingRuleListWarningData> buildUnnamed938() => [
      buildForwardingRuleListWarningData(),
      buildForwardingRuleListWarningData(),
    ];

void checkUnnamed938(core.List<api.ForwardingRuleListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRuleListWarningData(o[0]);
  checkForwardingRuleListWarningData(o[1]);
}

core.int buildCounterForwardingRuleListWarning = 0;
api.ForwardingRuleListWarning buildForwardingRuleListWarning() {
  final o = api.ForwardingRuleListWarning();
  buildCounterForwardingRuleListWarning++;
  if (buildCounterForwardingRuleListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed938();
    o.message = 'foo';
  }
  buildCounterForwardingRuleListWarning--;
  return o;
}

void checkForwardingRuleListWarning(api.ForwardingRuleListWarning o) {
  buildCounterForwardingRuleListWarning++;
  if (buildCounterForwardingRuleListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed938(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleListWarning--;
}

core.int buildCounterForwardingRuleList = 0;
api.ForwardingRuleList buildForwardingRuleList() {
  final o = api.ForwardingRuleList();
  buildCounterForwardingRuleList++;
  if (buildCounterForwardingRuleList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed937();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildForwardingRuleListWarning();
  }
  buildCounterForwardingRuleList--;
  return o;
}

void checkForwardingRuleList(api.ForwardingRuleList o) {
  buildCounterForwardingRuleList++;
  if (buildCounterForwardingRuleList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed937(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkForwardingRuleListWarning(o.warning!);
  }
  buildCounterForwardingRuleList--;
}

core.int buildCounterForwardingRuleReference = 0;
api.ForwardingRuleReference buildForwardingRuleReference() {
  final o = api.ForwardingRuleReference();
  buildCounterForwardingRuleReference++;
  if (buildCounterForwardingRuleReference < 3) {
    o.forwardingRule = 'foo';
  }
  buildCounterForwardingRuleReference--;
  return o;
}

void checkForwardingRuleReference(api.ForwardingRuleReference o) {
  buildCounterForwardingRuleReference++;
  if (buildCounterForwardingRuleReference < 3) {
    unittest.expect(
      o.forwardingRule!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleReference--;
}

core.int buildCounterForwardingRuleServiceDirectoryRegistration = 0;
api.ForwardingRuleServiceDirectoryRegistration
    buildForwardingRuleServiceDirectoryRegistration() {
  final o = api.ForwardingRuleServiceDirectoryRegistration();
  buildCounterForwardingRuleServiceDirectoryRegistration++;
  if (buildCounterForwardingRuleServiceDirectoryRegistration < 3) {
    o.namespace = 'foo';
    o.service = 'foo';
    o.serviceDirectoryRegion = 'foo';
  }
  buildCounterForwardingRuleServiceDirectoryRegistration--;
  return o;
}

void checkForwardingRuleServiceDirectoryRegistration(
    api.ForwardingRuleServiceDirectoryRegistration o) {
  buildCounterForwardingRuleServiceDirectoryRegistration++;
  if (buildCounterForwardingRuleServiceDirectoryRegistration < 3) {
    unittest.expect(
      o.namespace!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.serviceDirectoryRegion!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRuleServiceDirectoryRegistration--;
}

core.List<api.ForwardingRule> buildUnnamed939() => [
      buildForwardingRule(),
      buildForwardingRule(),
    ];

void checkUnnamed939(core.List<api.ForwardingRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRule(o[0]);
  checkForwardingRule(o[1]);
}

core.int buildCounterForwardingRulesScopedListWarningData = 0;
api.ForwardingRulesScopedListWarningData
    buildForwardingRulesScopedListWarningData() {
  final o = api.ForwardingRulesScopedListWarningData();
  buildCounterForwardingRulesScopedListWarningData++;
  if (buildCounterForwardingRulesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterForwardingRulesScopedListWarningData--;
  return o;
}

void checkForwardingRulesScopedListWarningData(
    api.ForwardingRulesScopedListWarningData o) {
  buildCounterForwardingRulesScopedListWarningData++;
  if (buildCounterForwardingRulesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRulesScopedListWarningData--;
}

core.List<api.ForwardingRulesScopedListWarningData> buildUnnamed940() => [
      buildForwardingRulesScopedListWarningData(),
      buildForwardingRulesScopedListWarningData(),
    ];

void checkUnnamed940(core.List<api.ForwardingRulesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkForwardingRulesScopedListWarningData(o[0]);
  checkForwardingRulesScopedListWarningData(o[1]);
}

core.int buildCounterForwardingRulesScopedListWarning = 0;
api.ForwardingRulesScopedListWarning buildForwardingRulesScopedListWarning() {
  final o = api.ForwardingRulesScopedListWarning();
  buildCounterForwardingRulesScopedListWarning++;
  if (buildCounterForwardingRulesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed940();
    o.message = 'foo';
  }
  buildCounterForwardingRulesScopedListWarning--;
  return o;
}

void checkForwardingRulesScopedListWarning(
    api.ForwardingRulesScopedListWarning o) {
  buildCounterForwardingRulesScopedListWarning++;
  if (buildCounterForwardingRulesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed940(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterForwardingRulesScopedListWarning--;
}

core.int buildCounterForwardingRulesScopedList = 0;
api.ForwardingRulesScopedList buildForwardingRulesScopedList() {
  final o = api.ForwardingRulesScopedList();
  buildCounterForwardingRulesScopedList++;
  if (buildCounterForwardingRulesScopedList < 3) {
    o.forwardingRules = buildUnnamed939();
    o.warning = buildForwardingRulesScopedListWarning();
  }
  buildCounterForwardingRulesScopedList--;
  return o;
}

void checkForwardingRulesScopedList(api.ForwardingRulesScopedList o) {
  buildCounterForwardingRulesScopedList++;
  if (buildCounterForwardingRulesScopedList < 3) {
    checkUnnamed939(o.forwardingRules!);
    checkForwardingRulesScopedListWarning(o.warning!);
  }
  buildCounterForwardingRulesScopedList--;
}

core.int buildCounterGRPCHealthCheck = 0;
api.GRPCHealthCheck buildGRPCHealthCheck() {
  final o = api.GRPCHealthCheck();
  buildCounterGRPCHealthCheck++;
  if (buildCounterGRPCHealthCheck < 3) {
    o.grpcServiceName = 'foo';
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
  }
  buildCounterGRPCHealthCheck--;
  return o;
}

void checkGRPCHealthCheck(api.GRPCHealthCheck o) {
  buildCounterGRPCHealthCheck++;
  if (buildCounterGRPCHealthCheck < 3) {
    unittest.expect(
      o.grpcServiceName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
  }
  buildCounterGRPCHealthCheck--;
}

core.List<api.NetworkEndpoint> buildUnnamed941() => [
      buildNetworkEndpoint(),
      buildNetworkEndpoint(),
    ];

void checkUnnamed941(core.List<api.NetworkEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpoint(o[0]);
  checkNetworkEndpoint(o[1]);
}

core.int buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest = 0;
api.GlobalNetworkEndpointGroupsAttachEndpointsRequest
    buildGlobalNetworkEndpointGroupsAttachEndpointsRequest() {
  final o = api.GlobalNetworkEndpointGroupsAttachEndpointsRequest();
  buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest++;
  if (buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest < 3) {
    o.networkEndpoints = buildUnnamed941();
  }
  buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest--;
  return o;
}

void checkGlobalNetworkEndpointGroupsAttachEndpointsRequest(
    api.GlobalNetworkEndpointGroupsAttachEndpointsRequest o) {
  buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest++;
  if (buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest < 3) {
    checkUnnamed941(o.networkEndpoints!);
  }
  buildCounterGlobalNetworkEndpointGroupsAttachEndpointsRequest--;
}

core.List<api.NetworkEndpoint> buildUnnamed942() => [
      buildNetworkEndpoint(),
      buildNetworkEndpoint(),
    ];

void checkUnnamed942(core.List<api.NetworkEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpoint(o[0]);
  checkNetworkEndpoint(o[1]);
}

core.int buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest = 0;
api.GlobalNetworkEndpointGroupsDetachEndpointsRequest
    buildGlobalNetworkEndpointGroupsDetachEndpointsRequest() {
  final o = api.GlobalNetworkEndpointGroupsDetachEndpointsRequest();
  buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest++;
  if (buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest < 3) {
    o.networkEndpoints = buildUnnamed942();
  }
  buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest--;
  return o;
}

void checkGlobalNetworkEndpointGroupsDetachEndpointsRequest(
    api.GlobalNetworkEndpointGroupsDetachEndpointsRequest o) {
  buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest++;
  if (buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest < 3) {
    checkUnnamed942(o.networkEndpoints!);
  }
  buildCounterGlobalNetworkEndpointGroupsDetachEndpointsRequest--;
}

core.List<api.Binding> buildUnnamed943() => [
      buildBinding(),
      buildBinding(),
    ];

void checkUnnamed943(core.List<api.Binding> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBinding(o[0]);
  checkBinding(o[1]);
}

core.int buildCounterGlobalOrganizationSetPolicyRequest = 0;
api.GlobalOrganizationSetPolicyRequest
    buildGlobalOrganizationSetPolicyRequest() {
  final o = api.GlobalOrganizationSetPolicyRequest();
  buildCounterGlobalOrganizationSetPolicyRequest++;
  if (buildCounterGlobalOrganizationSetPolicyRequest < 3) {
    o.bindings = buildUnnamed943();
    o.etag = 'foo';
    o.policy = buildPolicy();
  }
  buildCounterGlobalOrganizationSetPolicyRequest--;
  return o;
}

void checkGlobalOrganizationSetPolicyRequest(
    api.GlobalOrganizationSetPolicyRequest o) {
  buildCounterGlobalOrganizationSetPolicyRequest++;
  if (buildCounterGlobalOrganizationSetPolicyRequest < 3) {
    checkUnnamed943(o.bindings!);
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    checkPolicy(o.policy!);
  }
  buildCounterGlobalOrganizationSetPolicyRequest--;
}

core.Map<core.String, core.String> buildUnnamed944() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed944(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterGlobalSetLabelsRequest = 0;
api.GlobalSetLabelsRequest buildGlobalSetLabelsRequest() {
  final o = api.GlobalSetLabelsRequest();
  buildCounterGlobalSetLabelsRequest++;
  if (buildCounterGlobalSetLabelsRequest < 3) {
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed944();
  }
  buildCounterGlobalSetLabelsRequest--;
  return o;
}

void checkGlobalSetLabelsRequest(api.GlobalSetLabelsRequest o) {
  buildCounterGlobalSetLabelsRequest++;
  if (buildCounterGlobalSetLabelsRequest < 3) {
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed944(o.labels!);
  }
  buildCounterGlobalSetLabelsRequest--;
}

core.List<api.Binding> buildUnnamed945() => [
      buildBinding(),
      buildBinding(),
    ];

void checkUnnamed945(core.List<api.Binding> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBinding(o[0]);
  checkBinding(o[1]);
}

core.int buildCounterGlobalSetPolicyRequest = 0;
api.GlobalSetPolicyRequest buildGlobalSetPolicyRequest() {
  final o = api.GlobalSetPolicyRequest();
  buildCounterGlobalSetPolicyRequest++;
  if (buildCounterGlobalSetPolicyRequest < 3) {
    o.bindings = buildUnnamed945();
    o.etag = 'foo';
    o.policy = buildPolicy();
  }
  buildCounterGlobalSetPolicyRequest--;
  return o;
}

void checkGlobalSetPolicyRequest(api.GlobalSetPolicyRequest o) {
  buildCounterGlobalSetPolicyRequest++;
  if (buildCounterGlobalSetPolicyRequest < 3) {
    checkUnnamed945(o.bindings!);
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    checkPolicy(o.policy!);
  }
  buildCounterGlobalSetPolicyRequest--;
}

core.int buildCounterGuestAttributes = 0;
api.GuestAttributes buildGuestAttributes() {
  final o = api.GuestAttributes();
  buildCounterGuestAttributes++;
  if (buildCounterGuestAttributes < 3) {
    o.kind = 'foo';
    o.queryPath = 'foo';
    o.queryValue = buildGuestAttributesValue();
    o.selfLink = 'foo';
    o.variableKey = 'foo';
    o.variableValue = 'foo';
  }
  buildCounterGuestAttributes--;
  return o;
}

void checkGuestAttributes(api.GuestAttributes o) {
  buildCounterGuestAttributes++;
  if (buildCounterGuestAttributes < 3) {
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.queryPath!,
      unittest.equals('foo'),
    );
    checkGuestAttributesValue(o.queryValue!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.variableKey!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.variableValue!,
      unittest.equals('foo'),
    );
  }
  buildCounterGuestAttributes--;
}

core.int buildCounterGuestAttributesEntry = 0;
api.GuestAttributesEntry buildGuestAttributesEntry() {
  final o = api.GuestAttributesEntry();
  buildCounterGuestAttributesEntry++;
  if (buildCounterGuestAttributesEntry < 3) {
    o.key = 'foo';
    o.namespace = 'foo';
    o.value = 'foo';
  }
  buildCounterGuestAttributesEntry--;
  return o;
}

void checkGuestAttributesEntry(api.GuestAttributesEntry o) {
  buildCounterGuestAttributesEntry++;
  if (buildCounterGuestAttributesEntry < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.namespace!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterGuestAttributesEntry--;
}

core.List<api.GuestAttributesEntry> buildUnnamed946() => [
      buildGuestAttributesEntry(),
      buildGuestAttributesEntry(),
    ];

void checkUnnamed946(core.List<api.GuestAttributesEntry> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkGuestAttributesEntry(o[0]);
  checkGuestAttributesEntry(o[1]);
}

core.int buildCounterGuestAttributesValue = 0;
api.GuestAttributesValue buildGuestAttributesValue() {
  final o = api.GuestAttributesValue();
  buildCounterGuestAttributesValue++;
  if (buildCounterGuestAttributesValue < 3) {
    o.items = buildUnnamed946();
  }
  buildCounterGuestAttributesValue--;
  return o;
}

void checkGuestAttributesValue(api.GuestAttributesValue o) {
  buildCounterGuestAttributesValue++;
  if (buildCounterGuestAttributesValue < 3) {
    checkUnnamed946(o.items!);
  }
  buildCounterGuestAttributesValue--;
}

core.int buildCounterGuestOsFeature = 0;
api.GuestOsFeature buildGuestOsFeature() {
  final o = api.GuestOsFeature();
  buildCounterGuestOsFeature++;
  if (buildCounterGuestOsFeature < 3) {
    o.type = 'foo';
  }
  buildCounterGuestOsFeature--;
  return o;
}

void checkGuestOsFeature(api.GuestOsFeature o) {
  buildCounterGuestOsFeature++;
  if (buildCounterGuestOsFeature < 3) {
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterGuestOsFeature--;
}

core.int buildCounterHTTP2HealthCheck = 0;
api.HTTP2HealthCheck buildHTTP2HealthCheck() {
  final o = api.HTTP2HealthCheck();
  buildCounterHTTP2HealthCheck++;
  if (buildCounterHTTP2HealthCheck < 3) {
    o.host = 'foo';
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
    o.proxyHeader = 'foo';
    o.requestPath = 'foo';
    o.response = 'foo';
  }
  buildCounterHTTP2HealthCheck--;
  return o;
}

void checkHTTP2HealthCheck(api.HTTP2HealthCheck o) {
  buildCounterHTTP2HealthCheck++;
  if (buildCounterHTTP2HealthCheck < 3) {
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.requestPath!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.response!,
      unittest.equals('foo'),
    );
  }
  buildCounterHTTP2HealthCheck--;
}

core.int buildCounterHTTPHealthCheck = 0;
api.HTTPHealthCheck buildHTTPHealthCheck() {
  final o = api.HTTPHealthCheck();
  buildCounterHTTPHealthCheck++;
  if (buildCounterHTTPHealthCheck < 3) {
    o.host = 'foo';
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
    o.proxyHeader = 'foo';
    o.requestPath = 'foo';
    o.response = 'foo';
  }
  buildCounterHTTPHealthCheck--;
  return o;
}

void checkHTTPHealthCheck(api.HTTPHealthCheck o) {
  buildCounterHTTPHealthCheck++;
  if (buildCounterHTTPHealthCheck < 3) {
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.requestPath!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.response!,
      unittest.equals('foo'),
    );
  }
  buildCounterHTTPHealthCheck--;
}

core.int buildCounterHTTPSHealthCheck = 0;
api.HTTPSHealthCheck buildHTTPSHealthCheck() {
  final o = api.HTTPSHealthCheck();
  buildCounterHTTPSHealthCheck++;
  if (buildCounterHTTPSHealthCheck < 3) {
    o.host = 'foo';
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
    o.proxyHeader = 'foo';
    o.requestPath = 'foo';
    o.response = 'foo';
  }
  buildCounterHTTPSHealthCheck--;
  return o;
}

void checkHTTPSHealthCheck(api.HTTPSHealthCheck o) {
  buildCounterHTTPSHealthCheck++;
  if (buildCounterHTTPSHealthCheck < 3) {
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.requestPath!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.response!,
      unittest.equals('foo'),
    );
  }
  buildCounterHTTPSHealthCheck--;
}

core.int buildCounterHealthCheck = 0;
api.HealthCheck buildHealthCheck() {
  final o = api.HealthCheck();
  buildCounterHealthCheck++;
  if (buildCounterHealthCheck < 3) {
    o.checkIntervalSec = 42;
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.grpcHealthCheck = buildGRPCHealthCheck();
    o.healthyThreshold = 42;
    o.http2HealthCheck = buildHTTP2HealthCheck();
    o.httpHealthCheck = buildHTTPHealthCheck();
    o.httpsHealthCheck = buildHTTPSHealthCheck();
    o.id = 'foo';
    o.kind = 'foo';
    o.logConfig = buildHealthCheckLogConfig();
    o.name = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.sslHealthCheck = buildSSLHealthCheck();
    o.tcpHealthCheck = buildTCPHealthCheck();
    o.timeoutSec = 42;
    o.type = 'foo';
    o.unhealthyThreshold = 42;
  }
  buildCounterHealthCheck--;
  return o;
}

void checkHealthCheck(api.HealthCheck o) {
  buildCounterHealthCheck++;
  if (buildCounterHealthCheck < 3) {
    unittest.expect(
      o.checkIntervalSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkGRPCHealthCheck(o.grpcHealthCheck!);
    unittest.expect(
      o.healthyThreshold!,
      unittest.equals(42),
    );
    checkHTTP2HealthCheck(o.http2HealthCheck!);
    checkHTTPHealthCheck(o.httpHealthCheck!);
    checkHTTPSHealthCheck(o.httpsHealthCheck!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkHealthCheckLogConfig(o.logConfig!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSSLHealthCheck(o.sslHealthCheck!);
    checkTCPHealthCheck(o.tcpHealthCheck!);
    unittest.expect(
      o.timeoutSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.unhealthyThreshold!,
      unittest.equals(42),
    );
  }
  buildCounterHealthCheck--;
}

core.List<api.HealthCheck> buildUnnamed947() => [
      buildHealthCheck(),
      buildHealthCheck(),
    ];

void checkUnnamed947(core.List<api.HealthCheck> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheck(o[0]);
  checkHealthCheck(o[1]);
}

core.int buildCounterHealthCheckListWarningData = 0;
api.HealthCheckListWarningData buildHealthCheckListWarningData() {
  final o = api.HealthCheckListWarningData();
  buildCounterHealthCheckListWarningData++;
  if (buildCounterHealthCheckListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHealthCheckListWarningData--;
  return o;
}

void checkHealthCheckListWarningData(api.HealthCheckListWarningData o) {
  buildCounterHealthCheckListWarningData++;
  if (buildCounterHealthCheckListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckListWarningData--;
}

core.List<api.HealthCheckListWarningData> buildUnnamed948() => [
      buildHealthCheckListWarningData(),
      buildHealthCheckListWarningData(),
    ];

void checkUnnamed948(core.List<api.HealthCheckListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheckListWarningData(o[0]);
  checkHealthCheckListWarningData(o[1]);
}

core.int buildCounterHealthCheckListWarning = 0;
api.HealthCheckListWarning buildHealthCheckListWarning() {
  final o = api.HealthCheckListWarning();
  buildCounterHealthCheckListWarning++;
  if (buildCounterHealthCheckListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed948();
    o.message = 'foo';
  }
  buildCounterHealthCheckListWarning--;
  return o;
}

void checkHealthCheckListWarning(api.HealthCheckListWarning o) {
  buildCounterHealthCheckListWarning++;
  if (buildCounterHealthCheckListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed948(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckListWarning--;
}

core.int buildCounterHealthCheckList = 0;
api.HealthCheckList buildHealthCheckList() {
  final o = api.HealthCheckList();
  buildCounterHealthCheckList++;
  if (buildCounterHealthCheckList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed947();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildHealthCheckListWarning();
  }
  buildCounterHealthCheckList--;
  return o;
}

void checkHealthCheckList(api.HealthCheckList o) {
  buildCounterHealthCheckList++;
  if (buildCounterHealthCheckList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed947(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkHealthCheckListWarning(o.warning!);
  }
  buildCounterHealthCheckList--;
}

core.int buildCounterHealthCheckLogConfig = 0;
api.HealthCheckLogConfig buildHealthCheckLogConfig() {
  final o = api.HealthCheckLogConfig();
  buildCounterHealthCheckLogConfig++;
  if (buildCounterHealthCheckLogConfig < 3) {
    o.enable = true;
  }
  buildCounterHealthCheckLogConfig--;
  return o;
}

void checkHealthCheckLogConfig(api.HealthCheckLogConfig o) {
  buildCounterHealthCheckLogConfig++;
  if (buildCounterHealthCheckLogConfig < 3) {
    unittest.expect(o.enable!, unittest.isTrue);
  }
  buildCounterHealthCheckLogConfig--;
}

core.int buildCounterHealthCheckReference = 0;
api.HealthCheckReference buildHealthCheckReference() {
  final o = api.HealthCheckReference();
  buildCounterHealthCheckReference++;
  if (buildCounterHealthCheckReference < 3) {
    o.healthCheck = 'foo';
  }
  buildCounterHealthCheckReference--;
  return o;
}

void checkHealthCheckReference(api.HealthCheckReference o) {
  buildCounterHealthCheckReference++;
  if (buildCounterHealthCheckReference < 3) {
    unittest.expect(
      o.healthCheck!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckReference--;
}

core.List<core.String> buildUnnamed949() => [
      'foo',
      'foo',
    ];

void checkUnnamed949(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed950() => [
      'foo',
      'foo',
    ];

void checkUnnamed950(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed951() => [
      'foo',
      'foo',
    ];

void checkUnnamed951(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterHealthCheckService = 0;
api.HealthCheckService buildHealthCheckService() {
  final o = api.HealthCheckService();
  buildCounterHealthCheckService++;
  if (buildCounterHealthCheckService < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.healthChecks = buildUnnamed949();
    o.healthStatusAggregationPolicy = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.networkEndpointGroups = buildUnnamed950();
    o.notificationEndpoints = buildUnnamed951();
    o.region = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterHealthCheckService--;
  return o;
}

void checkHealthCheckService(api.HealthCheckService o) {
  buildCounterHealthCheckService++;
  if (buildCounterHealthCheckService < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed949(o.healthChecks!);
    unittest.expect(
      o.healthStatusAggregationPolicy!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed950(o.networkEndpointGroups!);
    checkUnnamed951(o.notificationEndpoints!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckService--;
}

core.int buildCounterHealthCheckServiceReference = 0;
api.HealthCheckServiceReference buildHealthCheckServiceReference() {
  final o = api.HealthCheckServiceReference();
  buildCounterHealthCheckServiceReference++;
  if (buildCounterHealthCheckServiceReference < 3) {
    o.healthCheckService = 'foo';
  }
  buildCounterHealthCheckServiceReference--;
  return o;
}

void checkHealthCheckServiceReference(api.HealthCheckServiceReference o) {
  buildCounterHealthCheckServiceReference++;
  if (buildCounterHealthCheckServiceReference < 3) {
    unittest.expect(
      o.healthCheckService!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckServiceReference--;
}

core.List<api.HealthCheckService> buildUnnamed952() => [
      buildHealthCheckService(),
      buildHealthCheckService(),
    ];

void checkUnnamed952(core.List<api.HealthCheckService> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheckService(o[0]);
  checkHealthCheckService(o[1]);
}

core.int buildCounterHealthCheckServicesListWarningData = 0;
api.HealthCheckServicesListWarningData
    buildHealthCheckServicesListWarningData() {
  final o = api.HealthCheckServicesListWarningData();
  buildCounterHealthCheckServicesListWarningData++;
  if (buildCounterHealthCheckServicesListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHealthCheckServicesListWarningData--;
  return o;
}

void checkHealthCheckServicesListWarningData(
    api.HealthCheckServicesListWarningData o) {
  buildCounterHealthCheckServicesListWarningData++;
  if (buildCounterHealthCheckServicesListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckServicesListWarningData--;
}

core.List<api.HealthCheckServicesListWarningData> buildUnnamed953() => [
      buildHealthCheckServicesListWarningData(),
      buildHealthCheckServicesListWarningData(),
    ];

void checkUnnamed953(core.List<api.HealthCheckServicesListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheckServicesListWarningData(o[0]);
  checkHealthCheckServicesListWarningData(o[1]);
}

core.int buildCounterHealthCheckServicesListWarning = 0;
api.HealthCheckServicesListWarning buildHealthCheckServicesListWarning() {
  final o = api.HealthCheckServicesListWarning();
  buildCounterHealthCheckServicesListWarning++;
  if (buildCounterHealthCheckServicesListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed953();
    o.message = 'foo';
  }
  buildCounterHealthCheckServicesListWarning--;
  return o;
}

void checkHealthCheckServicesListWarning(api.HealthCheckServicesListWarning o) {
  buildCounterHealthCheckServicesListWarning++;
  if (buildCounterHealthCheckServicesListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed953(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthCheckServicesListWarning--;
}

core.int buildCounterHealthCheckServicesList = 0;
api.HealthCheckServicesList buildHealthCheckServicesList() {
  final o = api.HealthCheckServicesList();
  buildCounterHealthCheckServicesList++;
  if (buildCounterHealthCheckServicesList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed952();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildHealthCheckServicesListWarning();
  }
  buildCounterHealthCheckServicesList--;
  return o;
}

void checkHealthCheckServicesList(api.HealthCheckServicesList o) {
  buildCounterHealthCheckServicesList++;
  if (buildCounterHealthCheckServicesList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed952(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkHealthCheckServicesListWarning(o.warning!);
  }
  buildCounterHealthCheckServicesList--;
}

core.Map<core.String, api.HealthChecksScopedList> buildUnnamed954() => {
      'x': buildHealthChecksScopedList(),
      'y': buildHealthChecksScopedList(),
    };

void checkUnnamed954(core.Map<core.String, api.HealthChecksScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthChecksScopedList(o['x']!);
  checkHealthChecksScopedList(o['y']!);
}

core.List<core.String> buildUnnamed955() => [
      'foo',
      'foo',
    ];

void checkUnnamed955(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterHealthChecksAggregatedListWarningData = 0;
api.HealthChecksAggregatedListWarningData
    buildHealthChecksAggregatedListWarningData() {
  final o = api.HealthChecksAggregatedListWarningData();
  buildCounterHealthChecksAggregatedListWarningData++;
  if (buildCounterHealthChecksAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHealthChecksAggregatedListWarningData--;
  return o;
}

void checkHealthChecksAggregatedListWarningData(
    api.HealthChecksAggregatedListWarningData o) {
  buildCounterHealthChecksAggregatedListWarningData++;
  if (buildCounterHealthChecksAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthChecksAggregatedListWarningData--;
}

core.List<api.HealthChecksAggregatedListWarningData> buildUnnamed956() => [
      buildHealthChecksAggregatedListWarningData(),
      buildHealthChecksAggregatedListWarningData(),
    ];

void checkUnnamed956(core.List<api.HealthChecksAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthChecksAggregatedListWarningData(o[0]);
  checkHealthChecksAggregatedListWarningData(o[1]);
}

core.int buildCounterHealthChecksAggregatedListWarning = 0;
api.HealthChecksAggregatedListWarning buildHealthChecksAggregatedListWarning() {
  final o = api.HealthChecksAggregatedListWarning();
  buildCounterHealthChecksAggregatedListWarning++;
  if (buildCounterHealthChecksAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed956();
    o.message = 'foo';
  }
  buildCounterHealthChecksAggregatedListWarning--;
  return o;
}

void checkHealthChecksAggregatedListWarning(
    api.HealthChecksAggregatedListWarning o) {
  buildCounterHealthChecksAggregatedListWarning++;
  if (buildCounterHealthChecksAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed956(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthChecksAggregatedListWarning--;
}

core.int buildCounterHealthChecksAggregatedList = 0;
api.HealthChecksAggregatedList buildHealthChecksAggregatedList() {
  final o = api.HealthChecksAggregatedList();
  buildCounterHealthChecksAggregatedList++;
  if (buildCounterHealthChecksAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed954();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed955();
    o.warning = buildHealthChecksAggregatedListWarning();
  }
  buildCounterHealthChecksAggregatedList--;
  return o;
}

void checkHealthChecksAggregatedList(api.HealthChecksAggregatedList o) {
  buildCounterHealthChecksAggregatedList++;
  if (buildCounterHealthChecksAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed954(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed955(o.unreachables!);
    checkHealthChecksAggregatedListWarning(o.warning!);
  }
  buildCounterHealthChecksAggregatedList--;
}

core.List<api.HealthCheck> buildUnnamed957() => [
      buildHealthCheck(),
      buildHealthCheck(),
    ];

void checkUnnamed957(core.List<api.HealthCheck> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheck(o[0]);
  checkHealthCheck(o[1]);
}

core.int buildCounterHealthChecksScopedListWarningData = 0;
api.HealthChecksScopedListWarningData buildHealthChecksScopedListWarningData() {
  final o = api.HealthChecksScopedListWarningData();
  buildCounterHealthChecksScopedListWarningData++;
  if (buildCounterHealthChecksScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHealthChecksScopedListWarningData--;
  return o;
}

void checkHealthChecksScopedListWarningData(
    api.HealthChecksScopedListWarningData o) {
  buildCounterHealthChecksScopedListWarningData++;
  if (buildCounterHealthChecksScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthChecksScopedListWarningData--;
}

core.List<api.HealthChecksScopedListWarningData> buildUnnamed958() => [
      buildHealthChecksScopedListWarningData(),
      buildHealthChecksScopedListWarningData(),
    ];

void checkUnnamed958(core.List<api.HealthChecksScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthChecksScopedListWarningData(o[0]);
  checkHealthChecksScopedListWarningData(o[1]);
}

core.int buildCounterHealthChecksScopedListWarning = 0;
api.HealthChecksScopedListWarning buildHealthChecksScopedListWarning() {
  final o = api.HealthChecksScopedListWarning();
  buildCounterHealthChecksScopedListWarning++;
  if (buildCounterHealthChecksScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed958();
    o.message = 'foo';
  }
  buildCounterHealthChecksScopedListWarning--;
  return o;
}

void checkHealthChecksScopedListWarning(api.HealthChecksScopedListWarning o) {
  buildCounterHealthChecksScopedListWarning++;
  if (buildCounterHealthChecksScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed958(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthChecksScopedListWarning--;
}

core.int buildCounterHealthChecksScopedList = 0;
api.HealthChecksScopedList buildHealthChecksScopedList() {
  final o = api.HealthChecksScopedList();
  buildCounterHealthChecksScopedList++;
  if (buildCounterHealthChecksScopedList < 3) {
    o.healthChecks = buildUnnamed957();
    o.warning = buildHealthChecksScopedListWarning();
  }
  buildCounterHealthChecksScopedList--;
  return o;
}

void checkHealthChecksScopedList(api.HealthChecksScopedList o) {
  buildCounterHealthChecksScopedList++;
  if (buildCounterHealthChecksScopedList < 3) {
    checkUnnamed957(o.healthChecks!);
    checkHealthChecksScopedListWarning(o.warning!);
  }
  buildCounterHealthChecksScopedList--;
}

core.Map<core.String, core.String> buildUnnamed959() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed959(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterHealthStatus = 0;
api.HealthStatus buildHealthStatus() {
  final o = api.HealthStatus();
  buildCounterHealthStatus++;
  if (buildCounterHealthStatus < 3) {
    o.annotations = buildUnnamed959();
    o.forwardingRule = 'foo';
    o.forwardingRuleIp = 'foo';
    o.healthState = 'foo';
    o.instance = 'foo';
    o.ipAddress = 'foo';
    o.port = 42;
    o.weight = 'foo';
    o.weightError = 'foo';
  }
  buildCounterHealthStatus--;
  return o;
}

void checkHealthStatus(api.HealthStatus o) {
  buildCounterHealthStatus++;
  if (buildCounterHealthStatus < 3) {
    checkUnnamed959(o.annotations!);
    unittest.expect(
      o.forwardingRule!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.forwardingRuleIp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.healthState!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.weight!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.weightError!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthStatus--;
}

core.int buildCounterHealthStatusForNetworkEndpoint = 0;
api.HealthStatusForNetworkEndpoint buildHealthStatusForNetworkEndpoint() {
  final o = api.HealthStatusForNetworkEndpoint();
  buildCounterHealthStatusForNetworkEndpoint++;
  if (buildCounterHealthStatusForNetworkEndpoint < 3) {
    o.backendService = buildBackendServiceReference();
    o.forwardingRule = buildForwardingRuleReference();
    o.healthCheck = buildHealthCheckReference();
    o.healthCheckService = buildHealthCheckServiceReference();
    o.healthState = 'foo';
  }
  buildCounterHealthStatusForNetworkEndpoint--;
  return o;
}

void checkHealthStatusForNetworkEndpoint(api.HealthStatusForNetworkEndpoint o) {
  buildCounterHealthStatusForNetworkEndpoint++;
  if (buildCounterHealthStatusForNetworkEndpoint < 3) {
    checkBackendServiceReference(o.backendService!);
    checkForwardingRuleReference(o.forwardingRule!);
    checkHealthCheckReference(o.healthCheck!);
    checkHealthCheckServiceReference(o.healthCheckService!);
    unittest.expect(
      o.healthState!,
      unittest.equals('foo'),
    );
  }
  buildCounterHealthStatusForNetworkEndpoint--;
}

core.List<core.String> buildUnnamed960() => [
      'foo',
      'foo',
    ];

void checkUnnamed960(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterHostRule = 0;
api.HostRule buildHostRule() {
  final o = api.HostRule();
  buildCounterHostRule++;
  if (buildCounterHostRule < 3) {
    o.description = 'foo';
    o.hosts = buildUnnamed960();
    o.pathMatcher = 'foo';
  }
  buildCounterHostRule--;
  return o;
}

void checkHostRule(api.HostRule o) {
  buildCounterHostRule++;
  if (buildCounterHostRule < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed960(o.hosts!);
    unittest.expect(
      o.pathMatcher!,
      unittest.equals('foo'),
    );
  }
  buildCounterHostRule--;
}

core.int buildCounterHttpFaultAbort = 0;
api.HttpFaultAbort buildHttpFaultAbort() {
  final o = api.HttpFaultAbort();
  buildCounterHttpFaultAbort++;
  if (buildCounterHttpFaultAbort < 3) {
    o.httpStatus = 42;
    o.percentage = 42.0;
  }
  buildCounterHttpFaultAbort--;
  return o;
}

void checkHttpFaultAbort(api.HttpFaultAbort o) {
  buildCounterHttpFaultAbort++;
  if (buildCounterHttpFaultAbort < 3) {
    unittest.expect(
      o.httpStatus!,
      unittest.equals(42),
    );
    unittest.expect(
      o.percentage!,
      unittest.equals(42.0),
    );
  }
  buildCounterHttpFaultAbort--;
}

core.int buildCounterHttpFaultDelay = 0;
api.HttpFaultDelay buildHttpFaultDelay() {
  final o = api.HttpFaultDelay();
  buildCounterHttpFaultDelay++;
  if (buildCounterHttpFaultDelay < 3) {
    o.fixedDelay = buildDuration();
    o.percentage = 42.0;
  }
  buildCounterHttpFaultDelay--;
  return o;
}

void checkHttpFaultDelay(api.HttpFaultDelay o) {
  buildCounterHttpFaultDelay++;
  if (buildCounterHttpFaultDelay < 3) {
    checkDuration(o.fixedDelay!);
    unittest.expect(
      o.percentage!,
      unittest.equals(42.0),
    );
  }
  buildCounterHttpFaultDelay--;
}

core.int buildCounterHttpFaultInjection = 0;
api.HttpFaultInjection buildHttpFaultInjection() {
  final o = api.HttpFaultInjection();
  buildCounterHttpFaultInjection++;
  if (buildCounterHttpFaultInjection < 3) {
    o.abort = buildHttpFaultAbort();
    o.delay = buildHttpFaultDelay();
  }
  buildCounterHttpFaultInjection--;
  return o;
}

void checkHttpFaultInjection(api.HttpFaultInjection o) {
  buildCounterHttpFaultInjection++;
  if (buildCounterHttpFaultInjection < 3) {
    checkHttpFaultAbort(o.abort!);
    checkHttpFaultDelay(o.delay!);
  }
  buildCounterHttpFaultInjection--;
}

core.List<api.HttpHeaderOption> buildUnnamed961() => [
      buildHttpHeaderOption(),
      buildHttpHeaderOption(),
    ];

void checkUnnamed961(core.List<api.HttpHeaderOption> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpHeaderOption(o[0]);
  checkHttpHeaderOption(o[1]);
}

core.List<core.String> buildUnnamed962() => [
      'foo',
      'foo',
    ];

void checkUnnamed962(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.HttpHeaderOption> buildUnnamed963() => [
      buildHttpHeaderOption(),
      buildHttpHeaderOption(),
    ];

void checkUnnamed963(core.List<api.HttpHeaderOption> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpHeaderOption(o[0]);
  checkHttpHeaderOption(o[1]);
}

core.List<core.String> buildUnnamed964() => [
      'foo',
      'foo',
    ];

void checkUnnamed964(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterHttpHeaderAction = 0;
api.HttpHeaderAction buildHttpHeaderAction() {
  final o = api.HttpHeaderAction();
  buildCounterHttpHeaderAction++;
  if (buildCounterHttpHeaderAction < 3) {
    o.requestHeadersToAdd = buildUnnamed961();
    o.requestHeadersToRemove = buildUnnamed962();
    o.responseHeadersToAdd = buildUnnamed963();
    o.responseHeadersToRemove = buildUnnamed964();
  }
  buildCounterHttpHeaderAction--;
  return o;
}

void checkHttpHeaderAction(api.HttpHeaderAction o) {
  buildCounterHttpHeaderAction++;
  if (buildCounterHttpHeaderAction < 3) {
    checkUnnamed961(o.requestHeadersToAdd!);
    checkUnnamed962(o.requestHeadersToRemove!);
    checkUnnamed963(o.responseHeadersToAdd!);
    checkUnnamed964(o.responseHeadersToRemove!);
  }
  buildCounterHttpHeaderAction--;
}

core.int buildCounterHttpHeaderMatch = 0;
api.HttpHeaderMatch buildHttpHeaderMatch() {
  final o = api.HttpHeaderMatch();
  buildCounterHttpHeaderMatch++;
  if (buildCounterHttpHeaderMatch < 3) {
    o.exactMatch = 'foo';
    o.headerName = 'foo';
    o.invertMatch = true;
    o.prefixMatch = 'foo';
    o.presentMatch = true;
    o.rangeMatch = buildInt64RangeMatch();
    o.regexMatch = 'foo';
    o.suffixMatch = 'foo';
  }
  buildCounterHttpHeaderMatch--;
  return o;
}

void checkHttpHeaderMatch(api.HttpHeaderMatch o) {
  buildCounterHttpHeaderMatch++;
  if (buildCounterHttpHeaderMatch < 3) {
    unittest.expect(
      o.exactMatch!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.headerName!,
      unittest.equals('foo'),
    );
    unittest.expect(o.invertMatch!, unittest.isTrue);
    unittest.expect(
      o.prefixMatch!,
      unittest.equals('foo'),
    );
    unittest.expect(o.presentMatch!, unittest.isTrue);
    checkInt64RangeMatch(o.rangeMatch!);
    unittest.expect(
      o.regexMatch!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.suffixMatch!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpHeaderMatch--;
}

core.int buildCounterHttpHeaderOption = 0;
api.HttpHeaderOption buildHttpHeaderOption() {
  final o = api.HttpHeaderOption();
  buildCounterHttpHeaderOption++;
  if (buildCounterHttpHeaderOption < 3) {
    o.headerName = 'foo';
    o.headerValue = 'foo';
    o.replace = true;
  }
  buildCounterHttpHeaderOption--;
  return o;
}

void checkHttpHeaderOption(api.HttpHeaderOption o) {
  buildCounterHttpHeaderOption++;
  if (buildCounterHttpHeaderOption < 3) {
    unittest.expect(
      o.headerName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.headerValue!,
      unittest.equals('foo'),
    );
    unittest.expect(o.replace!, unittest.isTrue);
  }
  buildCounterHttpHeaderOption--;
}

core.int buildCounterHttpHealthCheck = 0;
api.HttpHealthCheck buildHttpHealthCheck() {
  final o = api.HttpHealthCheck();
  buildCounterHttpHealthCheck++;
  if (buildCounterHttpHealthCheck < 3) {
    o.checkIntervalSec = 42;
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.healthyThreshold = 42;
    o.host = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.port = 42;
    o.requestPath = 'foo';
    o.selfLink = 'foo';
    o.timeoutSec = 42;
    o.unhealthyThreshold = 42;
  }
  buildCounterHttpHealthCheck--;
  return o;
}

void checkHttpHealthCheck(api.HttpHealthCheck o) {
  buildCounterHttpHealthCheck++;
  if (buildCounterHttpHealthCheck < 3) {
    unittest.expect(
      o.checkIntervalSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.healthyThreshold!,
      unittest.equals(42),
    );
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.requestPath!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.timeoutSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.unhealthyThreshold!,
      unittest.equals(42),
    );
  }
  buildCounterHttpHealthCheck--;
}

core.List<api.HttpHealthCheck> buildUnnamed965() => [
      buildHttpHealthCheck(),
      buildHttpHealthCheck(),
    ];

void checkUnnamed965(core.List<api.HttpHealthCheck> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpHealthCheck(o[0]);
  checkHttpHealthCheck(o[1]);
}

core.int buildCounterHttpHealthCheckListWarningData = 0;
api.HttpHealthCheckListWarningData buildHttpHealthCheckListWarningData() {
  final o = api.HttpHealthCheckListWarningData();
  buildCounterHttpHealthCheckListWarningData++;
  if (buildCounterHttpHealthCheckListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHttpHealthCheckListWarningData--;
  return o;
}

void checkHttpHealthCheckListWarningData(api.HttpHealthCheckListWarningData o) {
  buildCounterHttpHealthCheckListWarningData++;
  if (buildCounterHttpHealthCheckListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpHealthCheckListWarningData--;
}

core.List<api.HttpHealthCheckListWarningData> buildUnnamed966() => [
      buildHttpHealthCheckListWarningData(),
      buildHttpHealthCheckListWarningData(),
    ];

void checkUnnamed966(core.List<api.HttpHealthCheckListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpHealthCheckListWarningData(o[0]);
  checkHttpHealthCheckListWarningData(o[1]);
}

core.int buildCounterHttpHealthCheckListWarning = 0;
api.HttpHealthCheckListWarning buildHttpHealthCheckListWarning() {
  final o = api.HttpHealthCheckListWarning();
  buildCounterHttpHealthCheckListWarning++;
  if (buildCounterHttpHealthCheckListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed966();
    o.message = 'foo';
  }
  buildCounterHttpHealthCheckListWarning--;
  return o;
}

void checkHttpHealthCheckListWarning(api.HttpHealthCheckListWarning o) {
  buildCounterHttpHealthCheckListWarning++;
  if (buildCounterHttpHealthCheckListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed966(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpHealthCheckListWarning--;
}

core.int buildCounterHttpHealthCheckList = 0;
api.HttpHealthCheckList buildHttpHealthCheckList() {
  final o = api.HttpHealthCheckList();
  buildCounterHttpHealthCheckList++;
  if (buildCounterHttpHealthCheckList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed965();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildHttpHealthCheckListWarning();
  }
  buildCounterHttpHealthCheckList--;
  return o;
}

void checkHttpHealthCheckList(api.HttpHealthCheckList o) {
  buildCounterHttpHealthCheckList++;
  if (buildCounterHttpHealthCheckList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed965(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkHttpHealthCheckListWarning(o.warning!);
  }
  buildCounterHttpHealthCheckList--;
}

core.int buildCounterHttpQueryParameterMatch = 0;
api.HttpQueryParameterMatch buildHttpQueryParameterMatch() {
  final o = api.HttpQueryParameterMatch();
  buildCounterHttpQueryParameterMatch++;
  if (buildCounterHttpQueryParameterMatch < 3) {
    o.exactMatch = 'foo';
    o.name = 'foo';
    o.presentMatch = true;
    o.regexMatch = 'foo';
  }
  buildCounterHttpQueryParameterMatch--;
  return o;
}

void checkHttpQueryParameterMatch(api.HttpQueryParameterMatch o) {
  buildCounterHttpQueryParameterMatch++;
  if (buildCounterHttpQueryParameterMatch < 3) {
    unittest.expect(
      o.exactMatch!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.presentMatch!, unittest.isTrue);
    unittest.expect(
      o.regexMatch!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpQueryParameterMatch--;
}

core.int buildCounterHttpRedirectAction = 0;
api.HttpRedirectAction buildHttpRedirectAction() {
  final o = api.HttpRedirectAction();
  buildCounterHttpRedirectAction++;
  if (buildCounterHttpRedirectAction < 3) {
    o.hostRedirect = 'foo';
    o.httpsRedirect = true;
    o.pathRedirect = 'foo';
    o.prefixRedirect = 'foo';
    o.redirectResponseCode = 'foo';
    o.stripQuery = true;
  }
  buildCounterHttpRedirectAction--;
  return o;
}

void checkHttpRedirectAction(api.HttpRedirectAction o) {
  buildCounterHttpRedirectAction++;
  if (buildCounterHttpRedirectAction < 3) {
    unittest.expect(
      o.hostRedirect!,
      unittest.equals('foo'),
    );
    unittest.expect(o.httpsRedirect!, unittest.isTrue);
    unittest.expect(
      o.pathRedirect!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.prefixRedirect!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.redirectResponseCode!,
      unittest.equals('foo'),
    );
    unittest.expect(o.stripQuery!, unittest.isTrue);
  }
  buildCounterHttpRedirectAction--;
}

core.List<core.String> buildUnnamed967() => [
      'foo',
      'foo',
    ];

void checkUnnamed967(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterHttpRetryPolicy = 0;
api.HttpRetryPolicy buildHttpRetryPolicy() {
  final o = api.HttpRetryPolicy();
  buildCounterHttpRetryPolicy++;
  if (buildCounterHttpRetryPolicy < 3) {
    o.numRetries = 42;
    o.perTryTimeout = buildDuration();
    o.retryConditions = buildUnnamed967();
  }
  buildCounterHttpRetryPolicy--;
  return o;
}

void checkHttpRetryPolicy(api.HttpRetryPolicy o) {
  buildCounterHttpRetryPolicy++;
  if (buildCounterHttpRetryPolicy < 3) {
    unittest.expect(
      o.numRetries!,
      unittest.equals(42),
    );
    checkDuration(o.perTryTimeout!);
    checkUnnamed967(o.retryConditions!);
  }
  buildCounterHttpRetryPolicy--;
}

core.List<api.WeightedBackendService> buildUnnamed968() => [
      buildWeightedBackendService(),
      buildWeightedBackendService(),
    ];

void checkUnnamed968(core.List<api.WeightedBackendService> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkWeightedBackendService(o[0]);
  checkWeightedBackendService(o[1]);
}

core.int buildCounterHttpRouteAction = 0;
api.HttpRouteAction buildHttpRouteAction() {
  final o = api.HttpRouteAction();
  buildCounterHttpRouteAction++;
  if (buildCounterHttpRouteAction < 3) {
    o.corsPolicy = buildCorsPolicy();
    o.faultInjectionPolicy = buildHttpFaultInjection();
    o.maxStreamDuration = buildDuration();
    o.requestMirrorPolicy = buildRequestMirrorPolicy();
    o.retryPolicy = buildHttpRetryPolicy();
    o.timeout = buildDuration();
    o.urlRewrite = buildUrlRewrite();
    o.weightedBackendServices = buildUnnamed968();
  }
  buildCounterHttpRouteAction--;
  return o;
}

void checkHttpRouteAction(api.HttpRouteAction o) {
  buildCounterHttpRouteAction++;
  if (buildCounterHttpRouteAction < 3) {
    checkCorsPolicy(o.corsPolicy!);
    checkHttpFaultInjection(o.faultInjectionPolicy!);
    checkDuration(o.maxStreamDuration!);
    checkRequestMirrorPolicy(o.requestMirrorPolicy!);
    checkHttpRetryPolicy(o.retryPolicy!);
    checkDuration(o.timeout!);
    checkUrlRewrite(o.urlRewrite!);
    checkUnnamed968(o.weightedBackendServices!);
  }
  buildCounterHttpRouteAction--;
}

core.List<api.HttpRouteRuleMatch> buildUnnamed969() => [
      buildHttpRouteRuleMatch(),
      buildHttpRouteRuleMatch(),
    ];

void checkUnnamed969(core.List<api.HttpRouteRuleMatch> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpRouteRuleMatch(o[0]);
  checkHttpRouteRuleMatch(o[1]);
}

core.int buildCounterHttpRouteRule = 0;
api.HttpRouteRule buildHttpRouteRule() {
  final o = api.HttpRouteRule();
  buildCounterHttpRouteRule++;
  if (buildCounterHttpRouteRule < 3) {
    o.description = 'foo';
    o.headerAction = buildHttpHeaderAction();
    o.matchRules = buildUnnamed969();
    o.priority = 42;
    o.routeAction = buildHttpRouteAction();
    o.service = 'foo';
    o.urlRedirect = buildHttpRedirectAction();
  }
  buildCounterHttpRouteRule--;
  return o;
}

void checkHttpRouteRule(api.HttpRouteRule o) {
  buildCounterHttpRouteRule++;
  if (buildCounterHttpRouteRule < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkHttpHeaderAction(o.headerAction!);
    checkUnnamed969(o.matchRules!);
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    checkHttpRouteAction(o.routeAction!);
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    checkHttpRedirectAction(o.urlRedirect!);
  }
  buildCounterHttpRouteRule--;
}

core.List<api.HttpHeaderMatch> buildUnnamed970() => [
      buildHttpHeaderMatch(),
      buildHttpHeaderMatch(),
    ];

void checkUnnamed970(core.List<api.HttpHeaderMatch> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpHeaderMatch(o[0]);
  checkHttpHeaderMatch(o[1]);
}

core.List<api.MetadataFilter> buildUnnamed971() => [
      buildMetadataFilter(),
      buildMetadataFilter(),
    ];

void checkUnnamed971(core.List<api.MetadataFilter> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMetadataFilter(o[0]);
  checkMetadataFilter(o[1]);
}

core.List<api.HttpQueryParameterMatch> buildUnnamed972() => [
      buildHttpQueryParameterMatch(),
      buildHttpQueryParameterMatch(),
    ];

void checkUnnamed972(core.List<api.HttpQueryParameterMatch> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpQueryParameterMatch(o[0]);
  checkHttpQueryParameterMatch(o[1]);
}

core.int buildCounterHttpRouteRuleMatch = 0;
api.HttpRouteRuleMatch buildHttpRouteRuleMatch() {
  final o = api.HttpRouteRuleMatch();
  buildCounterHttpRouteRuleMatch++;
  if (buildCounterHttpRouteRuleMatch < 3) {
    o.fullPathMatch = 'foo';
    o.headerMatches = buildUnnamed970();
    o.ignoreCase = true;
    o.metadataFilters = buildUnnamed971();
    o.prefixMatch = 'foo';
    o.queryParameterMatches = buildUnnamed972();
    o.regexMatch = 'foo';
  }
  buildCounterHttpRouteRuleMatch--;
  return o;
}

void checkHttpRouteRuleMatch(api.HttpRouteRuleMatch o) {
  buildCounterHttpRouteRuleMatch++;
  if (buildCounterHttpRouteRuleMatch < 3) {
    unittest.expect(
      o.fullPathMatch!,
      unittest.equals('foo'),
    );
    checkUnnamed970(o.headerMatches!);
    unittest.expect(o.ignoreCase!, unittest.isTrue);
    checkUnnamed971(o.metadataFilters!);
    unittest.expect(
      o.prefixMatch!,
      unittest.equals('foo'),
    );
    checkUnnamed972(o.queryParameterMatches!);
    unittest.expect(
      o.regexMatch!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpRouteRuleMatch--;
}

core.int buildCounterHttpsHealthCheck = 0;
api.HttpsHealthCheck buildHttpsHealthCheck() {
  final o = api.HttpsHealthCheck();
  buildCounterHttpsHealthCheck++;
  if (buildCounterHttpsHealthCheck < 3) {
    o.checkIntervalSec = 42;
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.healthyThreshold = 42;
    o.host = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.port = 42;
    o.requestPath = 'foo';
    o.selfLink = 'foo';
    o.timeoutSec = 42;
    o.unhealthyThreshold = 42;
  }
  buildCounterHttpsHealthCheck--;
  return o;
}

void checkHttpsHealthCheck(api.HttpsHealthCheck o) {
  buildCounterHttpsHealthCheck++;
  if (buildCounterHttpsHealthCheck < 3) {
    unittest.expect(
      o.checkIntervalSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.healthyThreshold!,
      unittest.equals(42),
    );
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.requestPath!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.timeoutSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.unhealthyThreshold!,
      unittest.equals(42),
    );
  }
  buildCounterHttpsHealthCheck--;
}

core.List<api.HttpsHealthCheck> buildUnnamed973() => [
      buildHttpsHealthCheck(),
      buildHttpsHealthCheck(),
    ];

void checkUnnamed973(core.List<api.HttpsHealthCheck> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpsHealthCheck(o[0]);
  checkHttpsHealthCheck(o[1]);
}

core.int buildCounterHttpsHealthCheckListWarningData = 0;
api.HttpsHealthCheckListWarningData buildHttpsHealthCheckListWarningData() {
  final o = api.HttpsHealthCheckListWarningData();
  buildCounterHttpsHealthCheckListWarningData++;
  if (buildCounterHttpsHealthCheckListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterHttpsHealthCheckListWarningData--;
  return o;
}

void checkHttpsHealthCheckListWarningData(
    api.HttpsHealthCheckListWarningData o) {
  buildCounterHttpsHealthCheckListWarningData++;
  if (buildCounterHttpsHealthCheckListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpsHealthCheckListWarningData--;
}

core.List<api.HttpsHealthCheckListWarningData> buildUnnamed974() => [
      buildHttpsHealthCheckListWarningData(),
      buildHttpsHealthCheckListWarningData(),
    ];

void checkUnnamed974(core.List<api.HttpsHealthCheckListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpsHealthCheckListWarningData(o[0]);
  checkHttpsHealthCheckListWarningData(o[1]);
}

core.int buildCounterHttpsHealthCheckListWarning = 0;
api.HttpsHealthCheckListWarning buildHttpsHealthCheckListWarning() {
  final o = api.HttpsHealthCheckListWarning();
  buildCounterHttpsHealthCheckListWarning++;
  if (buildCounterHttpsHealthCheckListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed974();
    o.message = 'foo';
  }
  buildCounterHttpsHealthCheckListWarning--;
  return o;
}

void checkHttpsHealthCheckListWarning(api.HttpsHealthCheckListWarning o) {
  buildCounterHttpsHealthCheckListWarning++;
  if (buildCounterHttpsHealthCheckListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed974(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterHttpsHealthCheckListWarning--;
}

core.int buildCounterHttpsHealthCheckList = 0;
api.HttpsHealthCheckList buildHttpsHealthCheckList() {
  final o = api.HttpsHealthCheckList();
  buildCounterHttpsHealthCheckList++;
  if (buildCounterHttpsHealthCheckList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed973();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildHttpsHealthCheckListWarning();
  }
  buildCounterHttpsHealthCheckList--;
  return o;
}

void checkHttpsHealthCheckList(api.HttpsHealthCheckList o) {
  buildCounterHttpsHealthCheckList++;
  if (buildCounterHttpsHealthCheckList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed973(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkHttpsHealthCheckListWarning(o.warning!);
  }
  buildCounterHttpsHealthCheckList--;
}

core.List<api.GuestOsFeature> buildUnnamed975() => [
      buildGuestOsFeature(),
      buildGuestOsFeature(),
    ];

void checkUnnamed975(core.List<api.GuestOsFeature> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkGuestOsFeature(o[0]);
  checkGuestOsFeature(o[1]);
}

core.Map<core.String, core.String> buildUnnamed976() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed976(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed977() => [
      'foo',
      'foo',
    ];

void checkUnnamed977(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed978() => [
      'foo',
      'foo',
    ];

void checkUnnamed978(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterImageRawDisk = 0;
api.ImageRawDisk buildImageRawDisk() {
  final o = api.ImageRawDisk();
  buildCounterImageRawDisk++;
  if (buildCounterImageRawDisk < 3) {
    o.containerType = 'foo';
    o.sha1Checksum = 'foo';
    o.source = 'foo';
  }
  buildCounterImageRawDisk--;
  return o;
}

void checkImageRawDisk(api.ImageRawDisk o) {
  buildCounterImageRawDisk++;
  if (buildCounterImageRawDisk < 3) {
    unittest.expect(
      o.containerType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sha1Checksum!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.source!,
      unittest.equals('foo'),
    );
  }
  buildCounterImageRawDisk--;
}

core.List<core.String> buildUnnamed979() => [
      'foo',
      'foo',
    ];

void checkUnnamed979(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterImage = 0;
api.Image buildImage() {
  final o = api.Image();
  buildCounterImage++;
  if (buildCounterImage < 3) {
    o.archiveSizeBytes = 'foo';
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.diskSizeGb = 'foo';
    o.family = 'foo';
    o.guestOsFeatures = buildUnnamed975();
    o.id = 'foo';
    o.imageEncryptionKey = buildCustomerEncryptionKey();
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed976();
    o.licenseCodes = buildUnnamed977();
    o.licenses = buildUnnamed978();
    o.name = 'foo';
    o.rawDisk = buildImageRawDisk();
    o.satisfiesPzs = true;
    o.selfLink = 'foo';
    o.shieldedInstanceInitialState = buildInitialStateConfig();
    o.sourceDisk = 'foo';
    o.sourceDiskEncryptionKey = buildCustomerEncryptionKey();
    o.sourceDiskId = 'foo';
    o.sourceImage = 'foo';
    o.sourceImageEncryptionKey = buildCustomerEncryptionKey();
    o.sourceImageId = 'foo';
    o.sourceSnapshot = 'foo';
    o.sourceSnapshotEncryptionKey = buildCustomerEncryptionKey();
    o.sourceSnapshotId = 'foo';
    o.sourceType = 'foo';
    o.status = 'foo';
    o.storageLocations = buildUnnamed979();
  }
  buildCounterImage--;
  return o;
}

void checkImage(api.Image o) {
  buildCounterImage++;
  if (buildCounterImage < 3) {
    unittest.expect(
      o.archiveSizeBytes!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.family!,
      unittest.equals('foo'),
    );
    checkUnnamed975(o.guestOsFeatures!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.imageEncryptionKey!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed976(o.labels!);
    checkUnnamed977(o.licenseCodes!);
    checkUnnamed978(o.licenses!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkImageRawDisk(o.rawDisk!);
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInitialStateConfig(o.shieldedInstanceInitialState!);
    unittest.expect(
      o.sourceDisk!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceDiskEncryptionKey!);
    unittest.expect(
      o.sourceDiskId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceImage!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceImageEncryptionKey!);
    unittest.expect(
      o.sourceImageId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceSnapshot!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceSnapshotEncryptionKey!);
    unittest.expect(
      o.sourceSnapshotId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    checkUnnamed979(o.storageLocations!);
  }
  buildCounterImage--;
}

core.int buildCounterImageFamilyView = 0;
api.ImageFamilyView buildImageFamilyView() {
  final o = api.ImageFamilyView();
  buildCounterImageFamilyView++;
  if (buildCounterImageFamilyView < 3) {
    o.image = buildImage();
  }
  buildCounterImageFamilyView--;
  return o;
}

void checkImageFamilyView(api.ImageFamilyView o) {
  buildCounterImageFamilyView++;
  if (buildCounterImageFamilyView < 3) {
    checkImage(o.image!);
  }
  buildCounterImageFamilyView--;
}

core.List<api.Image> buildUnnamed980() => [
      buildImage(),
      buildImage(),
    ];

void checkUnnamed980(core.List<api.Image> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkImage(o[0]);
  checkImage(o[1]);
}

core.int buildCounterImageListWarningData = 0;
api.ImageListWarningData buildImageListWarningData() {
  final o = api.ImageListWarningData();
  buildCounterImageListWarningData++;
  if (buildCounterImageListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterImageListWarningData--;
  return o;
}

void checkImageListWarningData(api.ImageListWarningData o) {
  buildCounterImageListWarningData++;
  if (buildCounterImageListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterImageListWarningData--;
}

core.List<api.ImageListWarningData> buildUnnamed981() => [
      buildImageListWarningData(),
      buildImageListWarningData(),
    ];

void checkUnnamed981(core.List<api.ImageListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkImageListWarningData(o[0]);
  checkImageListWarningData(o[1]);
}

core.int buildCounterImageListWarning = 0;
api.ImageListWarning buildImageListWarning() {
  final o = api.ImageListWarning();
  buildCounterImageListWarning++;
  if (buildCounterImageListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed981();
    o.message = 'foo';
  }
  buildCounterImageListWarning--;
  return o;
}

void checkImageListWarning(api.ImageListWarning o) {
  buildCounterImageListWarning++;
  if (buildCounterImageListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed981(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterImageListWarning--;
}

core.int buildCounterImageList = 0;
api.ImageList buildImageList() {
  final o = api.ImageList();
  buildCounterImageList++;
  if (buildCounterImageList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed980();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildImageListWarning();
  }
  buildCounterImageList--;
  return o;
}

void checkImageList(api.ImageList o) {
  buildCounterImageList++;
  if (buildCounterImageList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed980(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkImageListWarning(o.warning!);
  }
  buildCounterImageList--;
}

core.List<api.FileContentBuffer> buildUnnamed982() => [
      buildFileContentBuffer(),
      buildFileContentBuffer(),
    ];

void checkUnnamed982(core.List<api.FileContentBuffer> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFileContentBuffer(o[0]);
  checkFileContentBuffer(o[1]);
}

core.List<api.FileContentBuffer> buildUnnamed983() => [
      buildFileContentBuffer(),
      buildFileContentBuffer(),
    ];

void checkUnnamed983(core.List<api.FileContentBuffer> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFileContentBuffer(o[0]);
  checkFileContentBuffer(o[1]);
}

core.List<api.FileContentBuffer> buildUnnamed984() => [
      buildFileContentBuffer(),
      buildFileContentBuffer(),
    ];

void checkUnnamed984(core.List<api.FileContentBuffer> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFileContentBuffer(o[0]);
  checkFileContentBuffer(o[1]);
}

core.int buildCounterInitialStateConfig = 0;
api.InitialStateConfig buildInitialStateConfig() {
  final o = api.InitialStateConfig();
  buildCounterInitialStateConfig++;
  if (buildCounterInitialStateConfig < 3) {
    o.dbs = buildUnnamed982();
    o.dbxs = buildUnnamed983();
    o.keks = buildUnnamed984();
    o.pk = buildFileContentBuffer();
  }
  buildCounterInitialStateConfig--;
  return o;
}

void checkInitialStateConfig(api.InitialStateConfig o) {
  buildCounterInitialStateConfig++;
  if (buildCounterInitialStateConfig < 3) {
    checkUnnamed982(o.dbs!);
    checkUnnamed983(o.dbxs!);
    checkUnnamed984(o.keks!);
    checkFileContentBuffer(o.pk!);
  }
  buildCounterInitialStateConfig--;
}

core.List<api.AttachedDisk> buildUnnamed985() => [
      buildAttachedDisk(),
      buildAttachedDisk(),
    ];

void checkUnnamed985(core.List<api.AttachedDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAttachedDisk(o[0]);
  checkAttachedDisk(o[1]);
}

core.List<api.AcceleratorConfig> buildUnnamed986() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed986(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.Map<core.String, core.String> buildUnnamed987() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed987(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<api.NetworkInterface> buildUnnamed988() => [
      buildNetworkInterface(),
      buildNetworkInterface(),
    ];

void checkUnnamed988(core.List<api.NetworkInterface> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkInterface(o[0]);
  checkNetworkInterface(o[1]);
}

core.List<core.String> buildUnnamed989() => [
      'foo',
      'foo',
    ];

void checkUnnamed989(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.ServiceAccount> buildUnnamed990() => [
      buildServiceAccount(),
      buildServiceAccount(),
    ];

void checkUnnamed990(core.List<api.ServiceAccount> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAccount(o[0]);
  checkServiceAccount(o[1]);
}

core.int buildCounterInstance = 0;
api.Instance buildInstance() {
  final o = api.Instance();
  buildCounterInstance++;
  if (buildCounterInstance < 3) {
    o.advancedMachineFeatures = buildAdvancedMachineFeatures();
    o.canIpForward = true;
    o.confidentialInstanceConfig = buildConfidentialInstanceConfig();
    o.cpuPlatform = 'foo';
    o.creationTimestamp = 'foo';
    o.deletionProtection = true;
    o.description = 'foo';
    o.disks = buildUnnamed985();
    o.displayDevice = buildDisplayDevice();
    o.fingerprint = 'foo';
    o.guestAccelerators = buildUnnamed986();
    o.hostname = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed987();
    o.lastStartTimestamp = 'foo';
    o.lastStopTimestamp = 'foo';
    o.lastSuspendedTimestamp = 'foo';
    o.machineType = 'foo';
    o.metadata = buildMetadata();
    o.minCpuPlatform = 'foo';
    o.name = 'foo';
    o.networkInterfaces = buildUnnamed988();
    o.privateIpv6GoogleAccess = 'foo';
    o.reservationAffinity = buildReservationAffinity();
    o.resourcePolicies = buildUnnamed989();
    o.satisfiesPzs = true;
    o.scheduling = buildScheduling();
    o.selfLink = 'foo';
    o.serviceAccounts = buildUnnamed990();
    o.shieldedInstanceConfig = buildShieldedInstanceConfig();
    o.shieldedInstanceIntegrityPolicy = buildShieldedInstanceIntegrityPolicy();
    o.startRestricted = true;
    o.status = 'foo';
    o.statusMessage = 'foo';
    o.tags = buildTags();
    o.zone = 'foo';
  }
  buildCounterInstance--;
  return o;
}

void checkInstance(api.Instance o) {
  buildCounterInstance++;
  if (buildCounterInstance < 3) {
    checkAdvancedMachineFeatures(o.advancedMachineFeatures!);
    unittest.expect(o.canIpForward!, unittest.isTrue);
    checkConfidentialInstanceConfig(o.confidentialInstanceConfig!);
    unittest.expect(
      o.cpuPlatform!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(o.deletionProtection!, unittest.isTrue);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed985(o.disks!);
    checkDisplayDevice(o.displayDevice!);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed986(o.guestAccelerators!);
    unittest.expect(
      o.hostname!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed987(o.labels!);
    unittest.expect(
      o.lastStartTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.lastStopTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.lastSuspendedTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.machineType!,
      unittest.equals('foo'),
    );
    checkMetadata(o.metadata!);
    unittest.expect(
      o.minCpuPlatform!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed988(o.networkInterfaces!);
    unittest.expect(
      o.privateIpv6GoogleAccess!,
      unittest.equals('foo'),
    );
    checkReservationAffinity(o.reservationAffinity!);
    checkUnnamed989(o.resourcePolicies!);
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    checkScheduling(o.scheduling!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed990(o.serviceAccounts!);
    checkShieldedInstanceConfig(o.shieldedInstanceConfig!);
    checkShieldedInstanceIntegrityPolicy(o.shieldedInstanceIntegrityPolicy!);
    unittest.expect(o.startRestricted!, unittest.isTrue);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.statusMessage!,
      unittest.equals('foo'),
    );
    checkTags(o.tags!);
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstance--;
}

core.Map<core.String, api.InstancesScopedList> buildUnnamed991() => {
      'x': buildInstancesScopedList(),
      'y': buildInstancesScopedList(),
    };

void checkUnnamed991(core.Map<core.String, api.InstancesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstancesScopedList(o['x']!);
  checkInstancesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed992() => [
      'foo',
      'foo',
    ];

void checkUnnamed992(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceAggregatedListWarningData = 0;
api.InstanceAggregatedListWarningData buildInstanceAggregatedListWarningData() {
  final o = api.InstanceAggregatedListWarningData();
  buildCounterInstanceAggregatedListWarningData++;
  if (buildCounterInstanceAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceAggregatedListWarningData--;
  return o;
}

void checkInstanceAggregatedListWarningData(
    api.InstanceAggregatedListWarningData o) {
  buildCounterInstanceAggregatedListWarningData++;
  if (buildCounterInstanceAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceAggregatedListWarningData--;
}

core.List<api.InstanceAggregatedListWarningData> buildUnnamed993() => [
      buildInstanceAggregatedListWarningData(),
      buildInstanceAggregatedListWarningData(),
    ];

void checkUnnamed993(core.List<api.InstanceAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceAggregatedListWarningData(o[0]);
  checkInstanceAggregatedListWarningData(o[1]);
}

core.int buildCounterInstanceAggregatedListWarning = 0;
api.InstanceAggregatedListWarning buildInstanceAggregatedListWarning() {
  final o = api.InstanceAggregatedListWarning();
  buildCounterInstanceAggregatedListWarning++;
  if (buildCounterInstanceAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed993();
    o.message = 'foo';
  }
  buildCounterInstanceAggregatedListWarning--;
  return o;
}

void checkInstanceAggregatedListWarning(api.InstanceAggregatedListWarning o) {
  buildCounterInstanceAggregatedListWarning++;
  if (buildCounterInstanceAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed993(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceAggregatedListWarning--;
}

core.int buildCounterInstanceAggregatedList = 0;
api.InstanceAggregatedList buildInstanceAggregatedList() {
  final o = api.InstanceAggregatedList();
  buildCounterInstanceAggregatedList++;
  if (buildCounterInstanceAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed991();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed992();
    o.warning = buildInstanceAggregatedListWarning();
  }
  buildCounterInstanceAggregatedList--;
  return o;
}

void checkInstanceAggregatedList(api.InstanceAggregatedList o) {
  buildCounterInstanceAggregatedList++;
  if (buildCounterInstanceAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed991(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed992(o.unreachables!);
    checkInstanceAggregatedListWarning(o.warning!);
  }
  buildCounterInstanceAggregatedList--;
}

core.List<api.NamedPort> buildUnnamed994() => [
      buildNamedPort(),
      buildNamedPort(),
    ];

void checkUnnamed994(core.List<api.NamedPort> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNamedPort(o[0]);
  checkNamedPort(o[1]);
}

core.int buildCounterInstanceGroup = 0;
api.InstanceGroup buildInstanceGroup() {
  final o = api.InstanceGroup();
  buildCounterInstanceGroup++;
  if (buildCounterInstanceGroup < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.namedPorts = buildUnnamed994();
    o.network = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.size = 42;
    o.subnetwork = 'foo';
    o.zone = 'foo';
  }
  buildCounterInstanceGroup--;
  return o;
}

void checkInstanceGroup(api.InstanceGroup o) {
  buildCounterInstanceGroup++;
  if (buildCounterInstanceGroup < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed994(o.namedPorts!);
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.size!,
      unittest.equals(42),
    );
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroup--;
}

core.Map<core.String, api.InstanceGroupsScopedList> buildUnnamed995() => {
      'x': buildInstanceGroupsScopedList(),
      'y': buildInstanceGroupsScopedList(),
    };

void checkUnnamed995(core.Map<core.String, api.InstanceGroupsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupsScopedList(o['x']!);
  checkInstanceGroupsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed996() => [
      'foo',
      'foo',
    ];

void checkUnnamed996(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupAggregatedListWarningData = 0;
api.InstanceGroupAggregatedListWarningData
    buildInstanceGroupAggregatedListWarningData() {
  final o = api.InstanceGroupAggregatedListWarningData();
  buildCounterInstanceGroupAggregatedListWarningData++;
  if (buildCounterInstanceGroupAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupAggregatedListWarningData--;
  return o;
}

void checkInstanceGroupAggregatedListWarningData(
    api.InstanceGroupAggregatedListWarningData o) {
  buildCounterInstanceGroupAggregatedListWarningData++;
  if (buildCounterInstanceGroupAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupAggregatedListWarningData--;
}

core.List<api.InstanceGroupAggregatedListWarningData> buildUnnamed997() => [
      buildInstanceGroupAggregatedListWarningData(),
      buildInstanceGroupAggregatedListWarningData(),
    ];

void checkUnnamed997(core.List<api.InstanceGroupAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupAggregatedListWarningData(o[0]);
  checkInstanceGroupAggregatedListWarningData(o[1]);
}

core.int buildCounterInstanceGroupAggregatedListWarning = 0;
api.InstanceGroupAggregatedListWarning
    buildInstanceGroupAggregatedListWarning() {
  final o = api.InstanceGroupAggregatedListWarning();
  buildCounterInstanceGroupAggregatedListWarning++;
  if (buildCounterInstanceGroupAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed997();
    o.message = 'foo';
  }
  buildCounterInstanceGroupAggregatedListWarning--;
  return o;
}

void checkInstanceGroupAggregatedListWarning(
    api.InstanceGroupAggregatedListWarning o) {
  buildCounterInstanceGroupAggregatedListWarning++;
  if (buildCounterInstanceGroupAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed997(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupAggregatedListWarning--;
}

core.int buildCounterInstanceGroupAggregatedList = 0;
api.InstanceGroupAggregatedList buildInstanceGroupAggregatedList() {
  final o = api.InstanceGroupAggregatedList();
  buildCounterInstanceGroupAggregatedList++;
  if (buildCounterInstanceGroupAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed995();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed996();
    o.warning = buildInstanceGroupAggregatedListWarning();
  }
  buildCounterInstanceGroupAggregatedList--;
  return o;
}

void checkInstanceGroupAggregatedList(api.InstanceGroupAggregatedList o) {
  buildCounterInstanceGroupAggregatedList++;
  if (buildCounterInstanceGroupAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed995(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed996(o.unreachables!);
    checkInstanceGroupAggregatedListWarning(o.warning!);
  }
  buildCounterInstanceGroupAggregatedList--;
}

core.List<api.InstanceGroup> buildUnnamed998() => [
      buildInstanceGroup(),
      buildInstanceGroup(),
    ];

void checkUnnamed998(core.List<api.InstanceGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroup(o[0]);
  checkInstanceGroup(o[1]);
}

core.int buildCounterInstanceGroupListWarningData = 0;
api.InstanceGroupListWarningData buildInstanceGroupListWarningData() {
  final o = api.InstanceGroupListWarningData();
  buildCounterInstanceGroupListWarningData++;
  if (buildCounterInstanceGroupListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupListWarningData--;
  return o;
}

void checkInstanceGroupListWarningData(api.InstanceGroupListWarningData o) {
  buildCounterInstanceGroupListWarningData++;
  if (buildCounterInstanceGroupListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupListWarningData--;
}

core.List<api.InstanceGroupListWarningData> buildUnnamed999() => [
      buildInstanceGroupListWarningData(),
      buildInstanceGroupListWarningData(),
    ];

void checkUnnamed999(core.List<api.InstanceGroupListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupListWarningData(o[0]);
  checkInstanceGroupListWarningData(o[1]);
}

core.int buildCounterInstanceGroupListWarning = 0;
api.InstanceGroupListWarning buildInstanceGroupListWarning() {
  final o = api.InstanceGroupListWarning();
  buildCounterInstanceGroupListWarning++;
  if (buildCounterInstanceGroupListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed999();
    o.message = 'foo';
  }
  buildCounterInstanceGroupListWarning--;
  return o;
}

void checkInstanceGroupListWarning(api.InstanceGroupListWarning o) {
  buildCounterInstanceGroupListWarning++;
  if (buildCounterInstanceGroupListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed999(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupListWarning--;
}

core.int buildCounterInstanceGroupList = 0;
api.InstanceGroupList buildInstanceGroupList() {
  final o = api.InstanceGroupList();
  buildCounterInstanceGroupList++;
  if (buildCounterInstanceGroupList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed998();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceGroupListWarning();
  }
  buildCounterInstanceGroupList--;
  return o;
}

void checkInstanceGroupList(api.InstanceGroupList o) {
  buildCounterInstanceGroupList++;
  if (buildCounterInstanceGroupList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed998(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceGroupListWarning(o.warning!);
  }
  buildCounterInstanceGroupList--;
}

core.List<api.InstanceGroupManagerAutoHealingPolicy> buildUnnamed1000() => [
      buildInstanceGroupManagerAutoHealingPolicy(),
      buildInstanceGroupManagerAutoHealingPolicy(),
    ];

void checkUnnamed1000(core.List<api.InstanceGroupManagerAutoHealingPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagerAutoHealingPolicy(o[0]);
  checkInstanceGroupManagerAutoHealingPolicy(o[1]);
}

core.List<api.NamedPort> buildUnnamed1001() => [
      buildNamedPort(),
      buildNamedPort(),
    ];

void checkUnnamed1001(core.List<api.NamedPort> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNamedPort(o[0]);
  checkNamedPort(o[1]);
}

core.List<core.String> buildUnnamed1002() => [
      'foo',
      'foo',
    ];

void checkUnnamed1002(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.InstanceGroupManagerVersion> buildUnnamed1003() => [
      buildInstanceGroupManagerVersion(),
      buildInstanceGroupManagerVersion(),
    ];

void checkUnnamed1003(core.List<api.InstanceGroupManagerVersion> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagerVersion(o[0]);
  checkInstanceGroupManagerVersion(o[1]);
}

core.int buildCounterInstanceGroupManager = 0;
api.InstanceGroupManager buildInstanceGroupManager() {
  final o = api.InstanceGroupManager();
  buildCounterInstanceGroupManager++;
  if (buildCounterInstanceGroupManager < 3) {
    o.autoHealingPolicies = buildUnnamed1000();
    o.baseInstanceName = 'foo';
    o.creationTimestamp = 'foo';
    o.currentActions = buildInstanceGroupManagerActionsSummary();
    o.description = 'foo';
    o.distributionPolicy = buildDistributionPolicy();
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.instanceGroup = 'foo';
    o.instanceTemplate = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.namedPorts = buildUnnamed1001();
    o.region = 'foo';
    o.selfLink = 'foo';
    o.statefulPolicy = buildStatefulPolicy();
    o.status = buildInstanceGroupManagerStatus();
    o.targetPools = buildUnnamed1002();
    o.targetSize = 42;
    o.updatePolicy = buildInstanceGroupManagerUpdatePolicy();
    o.versions = buildUnnamed1003();
    o.zone = 'foo';
  }
  buildCounterInstanceGroupManager--;
  return o;
}

void checkInstanceGroupManager(api.InstanceGroupManager o) {
  buildCounterInstanceGroupManager++;
  if (buildCounterInstanceGroupManager < 3) {
    checkUnnamed1000(o.autoHealingPolicies!);
    unittest.expect(
      o.baseInstanceName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkInstanceGroupManagerActionsSummary(o.currentActions!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkDistributionPolicy(o.distributionPolicy!);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instanceGroup!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instanceTemplate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1001(o.namedPorts!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkStatefulPolicy(o.statefulPolicy!);
    checkInstanceGroupManagerStatus(o.status!);
    checkUnnamed1002(o.targetPools!);
    unittest.expect(
      o.targetSize!,
      unittest.equals(42),
    );
    checkInstanceGroupManagerUpdatePolicy(o.updatePolicy!);
    checkUnnamed1003(o.versions!);
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManager--;
}

core.int buildCounterInstanceGroupManagerActionsSummary = 0;
api.InstanceGroupManagerActionsSummary
    buildInstanceGroupManagerActionsSummary() {
  final o = api.InstanceGroupManagerActionsSummary();
  buildCounterInstanceGroupManagerActionsSummary++;
  if (buildCounterInstanceGroupManagerActionsSummary < 3) {
    o.abandoning = 42;
    o.creating = 42;
    o.creatingWithoutRetries = 42;
    o.deleting = 42;
    o.none = 42;
    o.recreating = 42;
    o.refreshing = 42;
    o.restarting = 42;
    o.verifying = 42;
  }
  buildCounterInstanceGroupManagerActionsSummary--;
  return o;
}

void checkInstanceGroupManagerActionsSummary(
    api.InstanceGroupManagerActionsSummary o) {
  buildCounterInstanceGroupManagerActionsSummary++;
  if (buildCounterInstanceGroupManagerActionsSummary < 3) {
    unittest.expect(
      o.abandoning!,
      unittest.equals(42),
    );
    unittest.expect(
      o.creating!,
      unittest.equals(42),
    );
    unittest.expect(
      o.creatingWithoutRetries!,
      unittest.equals(42),
    );
    unittest.expect(
      o.deleting!,
      unittest.equals(42),
    );
    unittest.expect(
      o.none!,
      unittest.equals(42),
    );
    unittest.expect(
      o.recreating!,
      unittest.equals(42),
    );
    unittest.expect(
      o.refreshing!,
      unittest.equals(42),
    );
    unittest.expect(
      o.restarting!,
      unittest.equals(42),
    );
    unittest.expect(
      o.verifying!,
      unittest.equals(42),
    );
  }
  buildCounterInstanceGroupManagerActionsSummary--;
}

core.Map<core.String, api.InstanceGroupManagersScopedList> buildUnnamed1004() =>
    {
      'x': buildInstanceGroupManagersScopedList(),
      'y': buildInstanceGroupManagersScopedList(),
    };

void checkUnnamed1004(
    core.Map<core.String, api.InstanceGroupManagersScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagersScopedList(o['x']!);
  checkInstanceGroupManagersScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1005() => [
      'foo',
      'foo',
    ];

void checkUnnamed1005(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagerAggregatedListWarningData = 0;
api.InstanceGroupManagerAggregatedListWarningData
    buildInstanceGroupManagerAggregatedListWarningData() {
  final o = api.InstanceGroupManagerAggregatedListWarningData();
  buildCounterInstanceGroupManagerAggregatedListWarningData++;
  if (buildCounterInstanceGroupManagerAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupManagerAggregatedListWarningData--;
  return o;
}

void checkInstanceGroupManagerAggregatedListWarningData(
    api.InstanceGroupManagerAggregatedListWarningData o) {
  buildCounterInstanceGroupManagerAggregatedListWarningData++;
  if (buildCounterInstanceGroupManagerAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagerAggregatedListWarningData--;
}

core.List<api.InstanceGroupManagerAggregatedListWarningData>
    buildUnnamed1006() => [
          buildInstanceGroupManagerAggregatedListWarningData(),
          buildInstanceGroupManagerAggregatedListWarningData(),
        ];

void checkUnnamed1006(
    core.List<api.InstanceGroupManagerAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagerAggregatedListWarningData(o[0]);
  checkInstanceGroupManagerAggregatedListWarningData(o[1]);
}

core.int buildCounterInstanceGroupManagerAggregatedListWarning = 0;
api.InstanceGroupManagerAggregatedListWarning
    buildInstanceGroupManagerAggregatedListWarning() {
  final o = api.InstanceGroupManagerAggregatedListWarning();
  buildCounterInstanceGroupManagerAggregatedListWarning++;
  if (buildCounterInstanceGroupManagerAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1006();
    o.message = 'foo';
  }
  buildCounterInstanceGroupManagerAggregatedListWarning--;
  return o;
}

void checkInstanceGroupManagerAggregatedListWarning(
    api.InstanceGroupManagerAggregatedListWarning o) {
  buildCounterInstanceGroupManagerAggregatedListWarning++;
  if (buildCounterInstanceGroupManagerAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1006(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagerAggregatedListWarning--;
}

core.int buildCounterInstanceGroupManagerAggregatedList = 0;
api.InstanceGroupManagerAggregatedList
    buildInstanceGroupManagerAggregatedList() {
  final o = api.InstanceGroupManagerAggregatedList();
  buildCounterInstanceGroupManagerAggregatedList++;
  if (buildCounterInstanceGroupManagerAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1004();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1005();
    o.warning = buildInstanceGroupManagerAggregatedListWarning();
  }
  buildCounterInstanceGroupManagerAggregatedList--;
  return o;
}

void checkInstanceGroupManagerAggregatedList(
    api.InstanceGroupManagerAggregatedList o) {
  buildCounterInstanceGroupManagerAggregatedList++;
  if (buildCounterInstanceGroupManagerAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1004(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1005(o.unreachables!);
    checkInstanceGroupManagerAggregatedListWarning(o.warning!);
  }
  buildCounterInstanceGroupManagerAggregatedList--;
}

core.int buildCounterInstanceGroupManagerAutoHealingPolicy = 0;
api.InstanceGroupManagerAutoHealingPolicy
    buildInstanceGroupManagerAutoHealingPolicy() {
  final o = api.InstanceGroupManagerAutoHealingPolicy();
  buildCounterInstanceGroupManagerAutoHealingPolicy++;
  if (buildCounterInstanceGroupManagerAutoHealingPolicy < 3) {
    o.healthCheck = 'foo';
    o.initialDelaySec = 42;
  }
  buildCounterInstanceGroupManagerAutoHealingPolicy--;
  return o;
}

void checkInstanceGroupManagerAutoHealingPolicy(
    api.InstanceGroupManagerAutoHealingPolicy o) {
  buildCounterInstanceGroupManagerAutoHealingPolicy++;
  if (buildCounterInstanceGroupManagerAutoHealingPolicy < 3) {
    unittest.expect(
      o.healthCheck!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.initialDelaySec!,
      unittest.equals(42),
    );
  }
  buildCounterInstanceGroupManagerAutoHealingPolicy--;
}

core.List<api.InstanceGroupManager> buildUnnamed1007() => [
      buildInstanceGroupManager(),
      buildInstanceGroupManager(),
    ];

void checkUnnamed1007(core.List<api.InstanceGroupManager> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManager(o[0]);
  checkInstanceGroupManager(o[1]);
}

core.int buildCounterInstanceGroupManagerListWarningData = 0;
api.InstanceGroupManagerListWarningData
    buildInstanceGroupManagerListWarningData() {
  final o = api.InstanceGroupManagerListWarningData();
  buildCounterInstanceGroupManagerListWarningData++;
  if (buildCounterInstanceGroupManagerListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupManagerListWarningData--;
  return o;
}

void checkInstanceGroupManagerListWarningData(
    api.InstanceGroupManagerListWarningData o) {
  buildCounterInstanceGroupManagerListWarningData++;
  if (buildCounterInstanceGroupManagerListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagerListWarningData--;
}

core.List<api.InstanceGroupManagerListWarningData> buildUnnamed1008() => [
      buildInstanceGroupManagerListWarningData(),
      buildInstanceGroupManagerListWarningData(),
    ];

void checkUnnamed1008(core.List<api.InstanceGroupManagerListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagerListWarningData(o[0]);
  checkInstanceGroupManagerListWarningData(o[1]);
}

core.int buildCounterInstanceGroupManagerListWarning = 0;
api.InstanceGroupManagerListWarning buildInstanceGroupManagerListWarning() {
  final o = api.InstanceGroupManagerListWarning();
  buildCounterInstanceGroupManagerListWarning++;
  if (buildCounterInstanceGroupManagerListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1008();
    o.message = 'foo';
  }
  buildCounterInstanceGroupManagerListWarning--;
  return o;
}

void checkInstanceGroupManagerListWarning(
    api.InstanceGroupManagerListWarning o) {
  buildCounterInstanceGroupManagerListWarning++;
  if (buildCounterInstanceGroupManagerListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1008(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagerListWarning--;
}

core.int buildCounterInstanceGroupManagerList = 0;
api.InstanceGroupManagerList buildInstanceGroupManagerList() {
  final o = api.InstanceGroupManagerList();
  buildCounterInstanceGroupManagerList++;
  if (buildCounterInstanceGroupManagerList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1007();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceGroupManagerListWarning();
  }
  buildCounterInstanceGroupManagerList--;
  return o;
}

void checkInstanceGroupManagerList(api.InstanceGroupManagerList o) {
  buildCounterInstanceGroupManagerList++;
  if (buildCounterInstanceGroupManagerList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1007(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceGroupManagerListWarning(o.warning!);
  }
  buildCounterInstanceGroupManagerList--;
}

core.int buildCounterInstanceGroupManagerStatus = 0;
api.InstanceGroupManagerStatus buildInstanceGroupManagerStatus() {
  final o = api.InstanceGroupManagerStatus();
  buildCounterInstanceGroupManagerStatus++;
  if (buildCounterInstanceGroupManagerStatus < 3) {
    o.autoscaler = 'foo';
    o.isStable = true;
    o.stateful = buildInstanceGroupManagerStatusStateful();
    o.versionTarget = buildInstanceGroupManagerStatusVersionTarget();
  }
  buildCounterInstanceGroupManagerStatus--;
  return o;
}

void checkInstanceGroupManagerStatus(api.InstanceGroupManagerStatus o) {
  buildCounterInstanceGroupManagerStatus++;
  if (buildCounterInstanceGroupManagerStatus < 3) {
    unittest.expect(
      o.autoscaler!,
      unittest.equals('foo'),
    );
    unittest.expect(o.isStable!, unittest.isTrue);
    checkInstanceGroupManagerStatusStateful(o.stateful!);
    checkInstanceGroupManagerStatusVersionTarget(o.versionTarget!);
  }
  buildCounterInstanceGroupManagerStatus--;
}

core.int buildCounterInstanceGroupManagerStatusStateful = 0;
api.InstanceGroupManagerStatusStateful
    buildInstanceGroupManagerStatusStateful() {
  final o = api.InstanceGroupManagerStatusStateful();
  buildCounterInstanceGroupManagerStatusStateful++;
  if (buildCounterInstanceGroupManagerStatusStateful < 3) {
    o.hasStatefulConfig = true;
    o.perInstanceConfigs =
        buildInstanceGroupManagerStatusStatefulPerInstanceConfigs();
  }
  buildCounterInstanceGroupManagerStatusStateful--;
  return o;
}

void checkInstanceGroupManagerStatusStateful(
    api.InstanceGroupManagerStatusStateful o) {
  buildCounterInstanceGroupManagerStatusStateful++;
  if (buildCounterInstanceGroupManagerStatusStateful < 3) {
    unittest.expect(o.hasStatefulConfig!, unittest.isTrue);
    checkInstanceGroupManagerStatusStatefulPerInstanceConfigs(
        o.perInstanceConfigs!);
  }
  buildCounterInstanceGroupManagerStatusStateful--;
}

core.int buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs = 0;
api.InstanceGroupManagerStatusStatefulPerInstanceConfigs
    buildInstanceGroupManagerStatusStatefulPerInstanceConfigs() {
  final o = api.InstanceGroupManagerStatusStatefulPerInstanceConfigs();
  buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs++;
  if (buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs < 3) {
    o.allEffective = true;
  }
  buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs--;
  return o;
}

void checkInstanceGroupManagerStatusStatefulPerInstanceConfigs(
    api.InstanceGroupManagerStatusStatefulPerInstanceConfigs o) {
  buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs++;
  if (buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs < 3) {
    unittest.expect(o.allEffective!, unittest.isTrue);
  }
  buildCounterInstanceGroupManagerStatusStatefulPerInstanceConfigs--;
}

core.int buildCounterInstanceGroupManagerStatusVersionTarget = 0;
api.InstanceGroupManagerStatusVersionTarget
    buildInstanceGroupManagerStatusVersionTarget() {
  final o = api.InstanceGroupManagerStatusVersionTarget();
  buildCounterInstanceGroupManagerStatusVersionTarget++;
  if (buildCounterInstanceGroupManagerStatusVersionTarget < 3) {
    o.isReached = true;
  }
  buildCounterInstanceGroupManagerStatusVersionTarget--;
  return o;
}

void checkInstanceGroupManagerStatusVersionTarget(
    api.InstanceGroupManagerStatusVersionTarget o) {
  buildCounterInstanceGroupManagerStatusVersionTarget++;
  if (buildCounterInstanceGroupManagerStatusVersionTarget < 3) {
    unittest.expect(o.isReached!, unittest.isTrue);
  }
  buildCounterInstanceGroupManagerStatusVersionTarget--;
}

core.int buildCounterInstanceGroupManagerUpdatePolicy = 0;
api.InstanceGroupManagerUpdatePolicy buildInstanceGroupManagerUpdatePolicy() {
  final o = api.InstanceGroupManagerUpdatePolicy();
  buildCounterInstanceGroupManagerUpdatePolicy++;
  if (buildCounterInstanceGroupManagerUpdatePolicy < 3) {
    o.instanceRedistributionType = 'foo';
    o.maxSurge = buildFixedOrPercent();
    o.maxUnavailable = buildFixedOrPercent();
    o.minimalAction = 'foo';
    o.replacementMethod = 'foo';
    o.type = 'foo';
  }
  buildCounterInstanceGroupManagerUpdatePolicy--;
  return o;
}

void checkInstanceGroupManagerUpdatePolicy(
    api.InstanceGroupManagerUpdatePolicy o) {
  buildCounterInstanceGroupManagerUpdatePolicy++;
  if (buildCounterInstanceGroupManagerUpdatePolicy < 3) {
    unittest.expect(
      o.instanceRedistributionType!,
      unittest.equals('foo'),
    );
    checkFixedOrPercent(o.maxSurge!);
    checkFixedOrPercent(o.maxUnavailable!);
    unittest.expect(
      o.minimalAction!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.replacementMethod!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagerUpdatePolicy--;
}

core.int buildCounterInstanceGroupManagerVersion = 0;
api.InstanceGroupManagerVersion buildInstanceGroupManagerVersion() {
  final o = api.InstanceGroupManagerVersion();
  buildCounterInstanceGroupManagerVersion++;
  if (buildCounterInstanceGroupManagerVersion < 3) {
    o.instanceTemplate = 'foo';
    o.name = 'foo';
    o.targetSize = buildFixedOrPercent();
  }
  buildCounterInstanceGroupManagerVersion--;
  return o;
}

void checkInstanceGroupManagerVersion(api.InstanceGroupManagerVersion o) {
  buildCounterInstanceGroupManagerVersion++;
  if (buildCounterInstanceGroupManagerVersion < 3) {
    unittest.expect(
      o.instanceTemplate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkFixedOrPercent(o.targetSize!);
  }
  buildCounterInstanceGroupManagerVersion--;
}

core.List<core.String> buildUnnamed1009() => [
      'foo',
      'foo',
    ];

void checkUnnamed1009(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersAbandonInstancesRequest = 0;
api.InstanceGroupManagersAbandonInstancesRequest
    buildInstanceGroupManagersAbandonInstancesRequest() {
  final o = api.InstanceGroupManagersAbandonInstancesRequest();
  buildCounterInstanceGroupManagersAbandonInstancesRequest++;
  if (buildCounterInstanceGroupManagersAbandonInstancesRequest < 3) {
    o.instances = buildUnnamed1009();
  }
  buildCounterInstanceGroupManagersAbandonInstancesRequest--;
  return o;
}

void checkInstanceGroupManagersAbandonInstancesRequest(
    api.InstanceGroupManagersAbandonInstancesRequest o) {
  buildCounterInstanceGroupManagersAbandonInstancesRequest++;
  if (buildCounterInstanceGroupManagersAbandonInstancesRequest < 3) {
    checkUnnamed1009(o.instances!);
  }
  buildCounterInstanceGroupManagersAbandonInstancesRequest--;
}

core.List<core.String> buildUnnamed1010() => [
      'foo',
      'foo',
    ];

void checkUnnamed1010(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersApplyUpdatesRequest = 0;
api.InstanceGroupManagersApplyUpdatesRequest
    buildInstanceGroupManagersApplyUpdatesRequest() {
  final o = api.InstanceGroupManagersApplyUpdatesRequest();
  buildCounterInstanceGroupManagersApplyUpdatesRequest++;
  if (buildCounterInstanceGroupManagersApplyUpdatesRequest < 3) {
    o.allInstances = true;
    o.instances = buildUnnamed1010();
    o.minimalAction = 'foo';
    o.mostDisruptiveAllowedAction = 'foo';
  }
  buildCounterInstanceGroupManagersApplyUpdatesRequest--;
  return o;
}

void checkInstanceGroupManagersApplyUpdatesRequest(
    api.InstanceGroupManagersApplyUpdatesRequest o) {
  buildCounterInstanceGroupManagersApplyUpdatesRequest++;
  if (buildCounterInstanceGroupManagersApplyUpdatesRequest < 3) {
    unittest.expect(o.allInstances!, unittest.isTrue);
    checkUnnamed1010(o.instances!);
    unittest.expect(
      o.minimalAction!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.mostDisruptiveAllowedAction!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersApplyUpdatesRequest--;
}

core.List<api.PerInstanceConfig> buildUnnamed1011() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1011(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterInstanceGroupManagersCreateInstancesRequest = 0;
api.InstanceGroupManagersCreateInstancesRequest
    buildInstanceGroupManagersCreateInstancesRequest() {
  final o = api.InstanceGroupManagersCreateInstancesRequest();
  buildCounterInstanceGroupManagersCreateInstancesRequest++;
  if (buildCounterInstanceGroupManagersCreateInstancesRequest < 3) {
    o.instances = buildUnnamed1011();
  }
  buildCounterInstanceGroupManagersCreateInstancesRequest--;
  return o;
}

void checkInstanceGroupManagersCreateInstancesRequest(
    api.InstanceGroupManagersCreateInstancesRequest o) {
  buildCounterInstanceGroupManagersCreateInstancesRequest++;
  if (buildCounterInstanceGroupManagersCreateInstancesRequest < 3) {
    checkUnnamed1011(o.instances!);
  }
  buildCounterInstanceGroupManagersCreateInstancesRequest--;
}

core.List<core.String> buildUnnamed1012() => [
      'foo',
      'foo',
    ];

void checkUnnamed1012(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersDeleteInstancesRequest = 0;
api.InstanceGroupManagersDeleteInstancesRequest
    buildInstanceGroupManagersDeleteInstancesRequest() {
  final o = api.InstanceGroupManagersDeleteInstancesRequest();
  buildCounterInstanceGroupManagersDeleteInstancesRequest++;
  if (buildCounterInstanceGroupManagersDeleteInstancesRequest < 3) {
    o.instances = buildUnnamed1012();
    o.skipInstancesOnValidationError = true;
  }
  buildCounterInstanceGroupManagersDeleteInstancesRequest--;
  return o;
}

void checkInstanceGroupManagersDeleteInstancesRequest(
    api.InstanceGroupManagersDeleteInstancesRequest o) {
  buildCounterInstanceGroupManagersDeleteInstancesRequest++;
  if (buildCounterInstanceGroupManagersDeleteInstancesRequest < 3) {
    checkUnnamed1012(o.instances!);
    unittest.expect(o.skipInstancesOnValidationError!, unittest.isTrue);
  }
  buildCounterInstanceGroupManagersDeleteInstancesRequest--;
}

core.List<core.String> buildUnnamed1013() => [
      'foo',
      'foo',
    ];

void checkUnnamed1013(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq = 0;
api.InstanceGroupManagersDeletePerInstanceConfigsReq
    buildInstanceGroupManagersDeletePerInstanceConfigsReq() {
  final o = api.InstanceGroupManagersDeletePerInstanceConfigsReq();
  buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq < 3) {
    o.names = buildUnnamed1013();
  }
  buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq--;
  return o;
}

void checkInstanceGroupManagersDeletePerInstanceConfigsReq(
    api.InstanceGroupManagersDeletePerInstanceConfigsReq o) {
  buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq < 3) {
    checkUnnamed1013(o.names!);
  }
  buildCounterInstanceGroupManagersDeletePerInstanceConfigsReq--;
}

core.List<api.InstanceManagedByIgmError> buildUnnamed1014() => [
      buildInstanceManagedByIgmError(),
      buildInstanceManagedByIgmError(),
    ];

void checkUnnamed1014(core.List<api.InstanceManagedByIgmError> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceManagedByIgmError(o[0]);
  checkInstanceManagedByIgmError(o[1]);
}

core.int buildCounterInstanceGroupManagersListErrorsResponse = 0;
api.InstanceGroupManagersListErrorsResponse
    buildInstanceGroupManagersListErrorsResponse() {
  final o = api.InstanceGroupManagersListErrorsResponse();
  buildCounterInstanceGroupManagersListErrorsResponse++;
  if (buildCounterInstanceGroupManagersListErrorsResponse < 3) {
    o.items = buildUnnamed1014();
    o.nextPageToken = 'foo';
  }
  buildCounterInstanceGroupManagersListErrorsResponse--;
  return o;
}

void checkInstanceGroupManagersListErrorsResponse(
    api.InstanceGroupManagersListErrorsResponse o) {
  buildCounterInstanceGroupManagersListErrorsResponse++;
  if (buildCounterInstanceGroupManagersListErrorsResponse < 3) {
    checkUnnamed1014(o.items!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersListErrorsResponse--;
}

core.List<api.ManagedInstance> buildUnnamed1015() => [
      buildManagedInstance(),
      buildManagedInstance(),
    ];

void checkUnnamed1015(core.List<api.ManagedInstance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkManagedInstance(o[0]);
  checkManagedInstance(o[1]);
}

core.int buildCounterInstanceGroupManagersListManagedInstancesResponse = 0;
api.InstanceGroupManagersListManagedInstancesResponse
    buildInstanceGroupManagersListManagedInstancesResponse() {
  final o = api.InstanceGroupManagersListManagedInstancesResponse();
  buildCounterInstanceGroupManagersListManagedInstancesResponse++;
  if (buildCounterInstanceGroupManagersListManagedInstancesResponse < 3) {
    o.managedInstances = buildUnnamed1015();
    o.nextPageToken = 'foo';
  }
  buildCounterInstanceGroupManagersListManagedInstancesResponse--;
  return o;
}

void checkInstanceGroupManagersListManagedInstancesResponse(
    api.InstanceGroupManagersListManagedInstancesResponse o) {
  buildCounterInstanceGroupManagersListManagedInstancesResponse++;
  if (buildCounterInstanceGroupManagersListManagedInstancesResponse < 3) {
    checkUnnamed1015(o.managedInstances!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersListManagedInstancesResponse--;
}

core.List<api.PerInstanceConfig> buildUnnamed1016() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1016(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int
    buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData = 0;
api.InstanceGroupManagersListPerInstanceConfigsRespWarningData
    buildInstanceGroupManagersListPerInstanceConfigsRespWarningData() {
  final o = api.InstanceGroupManagersListPerInstanceConfigsRespWarningData();
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData <
      3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData--;
  return o;
}

void checkInstanceGroupManagersListPerInstanceConfigsRespWarningData(
    api.InstanceGroupManagersListPerInstanceConfigsRespWarningData o) {
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData <
      3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarningData--;
}

core.List<api.InstanceGroupManagersListPerInstanceConfigsRespWarningData>
    buildUnnamed1017() => [
          buildInstanceGroupManagersListPerInstanceConfigsRespWarningData(),
          buildInstanceGroupManagersListPerInstanceConfigsRespWarningData(),
        ];

void checkUnnamed1017(
    core.List<api.InstanceGroupManagersListPerInstanceConfigsRespWarningData>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagersListPerInstanceConfigsRespWarningData(o[0]);
  checkInstanceGroupManagersListPerInstanceConfigsRespWarningData(o[1]);
}

core.int buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning = 0;
api.InstanceGroupManagersListPerInstanceConfigsRespWarning
    buildInstanceGroupManagersListPerInstanceConfigsRespWarning() {
  final o = api.InstanceGroupManagersListPerInstanceConfigsRespWarning();
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1017();
    o.message = 'foo';
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning--;
  return o;
}

void checkInstanceGroupManagersListPerInstanceConfigsRespWarning(
    api.InstanceGroupManagersListPerInstanceConfigsRespWarning o) {
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1017(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsRespWarning--;
}

core.int buildCounterInstanceGroupManagersListPerInstanceConfigsResp = 0;
api.InstanceGroupManagersListPerInstanceConfigsResp
    buildInstanceGroupManagersListPerInstanceConfigsResp() {
  final o = api.InstanceGroupManagersListPerInstanceConfigsResp();
  buildCounterInstanceGroupManagersListPerInstanceConfigsResp++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsResp < 3) {
    o.items = buildUnnamed1016();
    o.nextPageToken = 'foo';
    o.warning = buildInstanceGroupManagersListPerInstanceConfigsRespWarning();
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsResp--;
  return o;
}

void checkInstanceGroupManagersListPerInstanceConfigsResp(
    api.InstanceGroupManagersListPerInstanceConfigsResp o) {
  buildCounterInstanceGroupManagersListPerInstanceConfigsResp++;
  if (buildCounterInstanceGroupManagersListPerInstanceConfigsResp < 3) {
    checkUnnamed1016(o.items!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkInstanceGroupManagersListPerInstanceConfigsRespWarning(o.warning!);
  }
  buildCounterInstanceGroupManagersListPerInstanceConfigsResp--;
}

core.List<api.PerInstanceConfig> buildUnnamed1018() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1018(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq = 0;
api.InstanceGroupManagersPatchPerInstanceConfigsReq
    buildInstanceGroupManagersPatchPerInstanceConfigsReq() {
  final o = api.InstanceGroupManagersPatchPerInstanceConfigsReq();
  buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq < 3) {
    o.perInstanceConfigs = buildUnnamed1018();
  }
  buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq--;
  return o;
}

void checkInstanceGroupManagersPatchPerInstanceConfigsReq(
    api.InstanceGroupManagersPatchPerInstanceConfigsReq o) {
  buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq < 3) {
    checkUnnamed1018(o.perInstanceConfigs!);
  }
  buildCounterInstanceGroupManagersPatchPerInstanceConfigsReq--;
}

core.List<core.String> buildUnnamed1019() => [
      'foo',
      'foo',
    ];

void checkUnnamed1019(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersRecreateInstancesRequest = 0;
api.InstanceGroupManagersRecreateInstancesRequest
    buildInstanceGroupManagersRecreateInstancesRequest() {
  final o = api.InstanceGroupManagersRecreateInstancesRequest();
  buildCounterInstanceGroupManagersRecreateInstancesRequest++;
  if (buildCounterInstanceGroupManagersRecreateInstancesRequest < 3) {
    o.instances = buildUnnamed1019();
  }
  buildCounterInstanceGroupManagersRecreateInstancesRequest--;
  return o;
}

void checkInstanceGroupManagersRecreateInstancesRequest(
    api.InstanceGroupManagersRecreateInstancesRequest o) {
  buildCounterInstanceGroupManagersRecreateInstancesRequest++;
  if (buildCounterInstanceGroupManagersRecreateInstancesRequest < 3) {
    checkUnnamed1019(o.instances!);
  }
  buildCounterInstanceGroupManagersRecreateInstancesRequest--;
}

core.List<api.InstanceGroupManager> buildUnnamed1020() => [
      buildInstanceGroupManager(),
      buildInstanceGroupManager(),
    ];

void checkUnnamed1020(core.List<api.InstanceGroupManager> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManager(o[0]);
  checkInstanceGroupManager(o[1]);
}

core.int buildCounterInstanceGroupManagersScopedListWarningData = 0;
api.InstanceGroupManagersScopedListWarningData
    buildInstanceGroupManagersScopedListWarningData() {
  final o = api.InstanceGroupManagersScopedListWarningData();
  buildCounterInstanceGroupManagersScopedListWarningData++;
  if (buildCounterInstanceGroupManagersScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupManagersScopedListWarningData--;
  return o;
}

void checkInstanceGroupManagersScopedListWarningData(
    api.InstanceGroupManagersScopedListWarningData o) {
  buildCounterInstanceGroupManagersScopedListWarningData++;
  if (buildCounterInstanceGroupManagersScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersScopedListWarningData--;
}

core.List<api.InstanceGroupManagersScopedListWarningData> buildUnnamed1021() =>
    [
      buildInstanceGroupManagersScopedListWarningData(),
      buildInstanceGroupManagersScopedListWarningData(),
    ];

void checkUnnamed1021(
    core.List<api.InstanceGroupManagersScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManagersScopedListWarningData(o[0]);
  checkInstanceGroupManagersScopedListWarningData(o[1]);
}

core.int buildCounterInstanceGroupManagersScopedListWarning = 0;
api.InstanceGroupManagersScopedListWarning
    buildInstanceGroupManagersScopedListWarning() {
  final o = api.InstanceGroupManagersScopedListWarning();
  buildCounterInstanceGroupManagersScopedListWarning++;
  if (buildCounterInstanceGroupManagersScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1021();
    o.message = 'foo';
  }
  buildCounterInstanceGroupManagersScopedListWarning--;
  return o;
}

void checkInstanceGroupManagersScopedListWarning(
    api.InstanceGroupManagersScopedListWarning o) {
  buildCounterInstanceGroupManagersScopedListWarning++;
  if (buildCounterInstanceGroupManagersScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1021(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersScopedListWarning--;
}

core.int buildCounterInstanceGroupManagersScopedList = 0;
api.InstanceGroupManagersScopedList buildInstanceGroupManagersScopedList() {
  final o = api.InstanceGroupManagersScopedList();
  buildCounterInstanceGroupManagersScopedList++;
  if (buildCounterInstanceGroupManagersScopedList < 3) {
    o.instanceGroupManagers = buildUnnamed1020();
    o.warning = buildInstanceGroupManagersScopedListWarning();
  }
  buildCounterInstanceGroupManagersScopedList--;
  return o;
}

void checkInstanceGroupManagersScopedList(
    api.InstanceGroupManagersScopedList o) {
  buildCounterInstanceGroupManagersScopedList++;
  if (buildCounterInstanceGroupManagersScopedList < 3) {
    checkUnnamed1020(o.instanceGroupManagers!);
    checkInstanceGroupManagersScopedListWarning(o.warning!);
  }
  buildCounterInstanceGroupManagersScopedList--;
}

core.int buildCounterInstanceGroupManagersSetInstanceTemplateRequest = 0;
api.InstanceGroupManagersSetInstanceTemplateRequest
    buildInstanceGroupManagersSetInstanceTemplateRequest() {
  final o = api.InstanceGroupManagersSetInstanceTemplateRequest();
  buildCounterInstanceGroupManagersSetInstanceTemplateRequest++;
  if (buildCounterInstanceGroupManagersSetInstanceTemplateRequest < 3) {
    o.instanceTemplate = 'foo';
  }
  buildCounterInstanceGroupManagersSetInstanceTemplateRequest--;
  return o;
}

void checkInstanceGroupManagersSetInstanceTemplateRequest(
    api.InstanceGroupManagersSetInstanceTemplateRequest o) {
  buildCounterInstanceGroupManagersSetInstanceTemplateRequest++;
  if (buildCounterInstanceGroupManagersSetInstanceTemplateRequest < 3) {
    unittest.expect(
      o.instanceTemplate!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupManagersSetInstanceTemplateRequest--;
}

core.List<core.String> buildUnnamed1022() => [
      'foo',
      'foo',
    ];

void checkUnnamed1022(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstanceGroupManagersSetTargetPoolsRequest = 0;
api.InstanceGroupManagersSetTargetPoolsRequest
    buildInstanceGroupManagersSetTargetPoolsRequest() {
  final o = api.InstanceGroupManagersSetTargetPoolsRequest();
  buildCounterInstanceGroupManagersSetTargetPoolsRequest++;
  if (buildCounterInstanceGroupManagersSetTargetPoolsRequest < 3) {
    o.fingerprint = 'foo';
    o.targetPools = buildUnnamed1022();
  }
  buildCounterInstanceGroupManagersSetTargetPoolsRequest--;
  return o;
}

void checkInstanceGroupManagersSetTargetPoolsRequest(
    api.InstanceGroupManagersSetTargetPoolsRequest o) {
  buildCounterInstanceGroupManagersSetTargetPoolsRequest++;
  if (buildCounterInstanceGroupManagersSetTargetPoolsRequest < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1022(o.targetPools!);
  }
  buildCounterInstanceGroupManagersSetTargetPoolsRequest--;
}

core.List<api.PerInstanceConfig> buildUnnamed1023() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1023(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq = 0;
api.InstanceGroupManagersUpdatePerInstanceConfigsReq
    buildInstanceGroupManagersUpdatePerInstanceConfigsReq() {
  final o = api.InstanceGroupManagersUpdatePerInstanceConfigsReq();
  buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq < 3) {
    o.perInstanceConfigs = buildUnnamed1023();
  }
  buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq--;
  return o;
}

void checkInstanceGroupManagersUpdatePerInstanceConfigsReq(
    api.InstanceGroupManagersUpdatePerInstanceConfigsReq o) {
  buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq++;
  if (buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq < 3) {
    checkUnnamed1023(o.perInstanceConfigs!);
  }
  buildCounterInstanceGroupManagersUpdatePerInstanceConfigsReq--;
}

core.List<api.InstanceReference> buildUnnamed1024() => [
      buildInstanceReference(),
      buildInstanceReference(),
    ];

void checkUnnamed1024(core.List<api.InstanceReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceReference(o[0]);
  checkInstanceReference(o[1]);
}

core.int buildCounterInstanceGroupsAddInstancesRequest = 0;
api.InstanceGroupsAddInstancesRequest buildInstanceGroupsAddInstancesRequest() {
  final o = api.InstanceGroupsAddInstancesRequest();
  buildCounterInstanceGroupsAddInstancesRequest++;
  if (buildCounterInstanceGroupsAddInstancesRequest < 3) {
    o.instances = buildUnnamed1024();
  }
  buildCounterInstanceGroupsAddInstancesRequest--;
  return o;
}

void checkInstanceGroupsAddInstancesRequest(
    api.InstanceGroupsAddInstancesRequest o) {
  buildCounterInstanceGroupsAddInstancesRequest++;
  if (buildCounterInstanceGroupsAddInstancesRequest < 3) {
    checkUnnamed1024(o.instances!);
  }
  buildCounterInstanceGroupsAddInstancesRequest--;
}

core.List<api.InstanceWithNamedPorts> buildUnnamed1025() => [
      buildInstanceWithNamedPorts(),
      buildInstanceWithNamedPorts(),
    ];

void checkUnnamed1025(core.List<api.InstanceWithNamedPorts> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceWithNamedPorts(o[0]);
  checkInstanceWithNamedPorts(o[1]);
}

core.int buildCounterInstanceGroupsListInstancesWarningData = 0;
api.InstanceGroupsListInstancesWarningData
    buildInstanceGroupsListInstancesWarningData() {
  final o = api.InstanceGroupsListInstancesWarningData();
  buildCounterInstanceGroupsListInstancesWarningData++;
  if (buildCounterInstanceGroupsListInstancesWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupsListInstancesWarningData--;
  return o;
}

void checkInstanceGroupsListInstancesWarningData(
    api.InstanceGroupsListInstancesWarningData o) {
  buildCounterInstanceGroupsListInstancesWarningData++;
  if (buildCounterInstanceGroupsListInstancesWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupsListInstancesWarningData--;
}

core.List<api.InstanceGroupsListInstancesWarningData> buildUnnamed1026() => [
      buildInstanceGroupsListInstancesWarningData(),
      buildInstanceGroupsListInstancesWarningData(),
    ];

void checkUnnamed1026(core.List<api.InstanceGroupsListInstancesWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupsListInstancesWarningData(o[0]);
  checkInstanceGroupsListInstancesWarningData(o[1]);
}

core.int buildCounterInstanceGroupsListInstancesWarning = 0;
api.InstanceGroupsListInstancesWarning
    buildInstanceGroupsListInstancesWarning() {
  final o = api.InstanceGroupsListInstancesWarning();
  buildCounterInstanceGroupsListInstancesWarning++;
  if (buildCounterInstanceGroupsListInstancesWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1026();
    o.message = 'foo';
  }
  buildCounterInstanceGroupsListInstancesWarning--;
  return o;
}

void checkInstanceGroupsListInstancesWarning(
    api.InstanceGroupsListInstancesWarning o) {
  buildCounterInstanceGroupsListInstancesWarning++;
  if (buildCounterInstanceGroupsListInstancesWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1026(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupsListInstancesWarning--;
}

core.int buildCounterInstanceGroupsListInstances = 0;
api.InstanceGroupsListInstances buildInstanceGroupsListInstances() {
  final o = api.InstanceGroupsListInstances();
  buildCounterInstanceGroupsListInstances++;
  if (buildCounterInstanceGroupsListInstances < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1025();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceGroupsListInstancesWarning();
  }
  buildCounterInstanceGroupsListInstances--;
  return o;
}

void checkInstanceGroupsListInstances(api.InstanceGroupsListInstances o) {
  buildCounterInstanceGroupsListInstances++;
  if (buildCounterInstanceGroupsListInstances < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1025(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceGroupsListInstancesWarning(o.warning!);
  }
  buildCounterInstanceGroupsListInstances--;
}

core.int buildCounterInstanceGroupsListInstancesRequest = 0;
api.InstanceGroupsListInstancesRequest
    buildInstanceGroupsListInstancesRequest() {
  final o = api.InstanceGroupsListInstancesRequest();
  buildCounterInstanceGroupsListInstancesRequest++;
  if (buildCounterInstanceGroupsListInstancesRequest < 3) {
    o.instanceState = 'foo';
  }
  buildCounterInstanceGroupsListInstancesRequest--;
  return o;
}

void checkInstanceGroupsListInstancesRequest(
    api.InstanceGroupsListInstancesRequest o) {
  buildCounterInstanceGroupsListInstancesRequest++;
  if (buildCounterInstanceGroupsListInstancesRequest < 3) {
    unittest.expect(
      o.instanceState!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupsListInstancesRequest--;
}

core.List<api.InstanceReference> buildUnnamed1027() => [
      buildInstanceReference(),
      buildInstanceReference(),
    ];

void checkUnnamed1027(core.List<api.InstanceReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceReference(o[0]);
  checkInstanceReference(o[1]);
}

core.int buildCounterInstanceGroupsRemoveInstancesRequest = 0;
api.InstanceGroupsRemoveInstancesRequest
    buildInstanceGroupsRemoveInstancesRequest() {
  final o = api.InstanceGroupsRemoveInstancesRequest();
  buildCounterInstanceGroupsRemoveInstancesRequest++;
  if (buildCounterInstanceGroupsRemoveInstancesRequest < 3) {
    o.instances = buildUnnamed1027();
  }
  buildCounterInstanceGroupsRemoveInstancesRequest--;
  return o;
}

void checkInstanceGroupsRemoveInstancesRequest(
    api.InstanceGroupsRemoveInstancesRequest o) {
  buildCounterInstanceGroupsRemoveInstancesRequest++;
  if (buildCounterInstanceGroupsRemoveInstancesRequest < 3) {
    checkUnnamed1027(o.instances!);
  }
  buildCounterInstanceGroupsRemoveInstancesRequest--;
}

core.List<api.InstanceGroup> buildUnnamed1028() => [
      buildInstanceGroup(),
      buildInstanceGroup(),
    ];

void checkUnnamed1028(core.List<api.InstanceGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroup(o[0]);
  checkInstanceGroup(o[1]);
}

core.int buildCounterInstanceGroupsScopedListWarningData = 0;
api.InstanceGroupsScopedListWarningData
    buildInstanceGroupsScopedListWarningData() {
  final o = api.InstanceGroupsScopedListWarningData();
  buildCounterInstanceGroupsScopedListWarningData++;
  if (buildCounterInstanceGroupsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceGroupsScopedListWarningData--;
  return o;
}

void checkInstanceGroupsScopedListWarningData(
    api.InstanceGroupsScopedListWarningData o) {
  buildCounterInstanceGroupsScopedListWarningData++;
  if (buildCounterInstanceGroupsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupsScopedListWarningData--;
}

core.List<api.InstanceGroupsScopedListWarningData> buildUnnamed1029() => [
      buildInstanceGroupsScopedListWarningData(),
      buildInstanceGroupsScopedListWarningData(),
    ];

void checkUnnamed1029(core.List<api.InstanceGroupsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupsScopedListWarningData(o[0]);
  checkInstanceGroupsScopedListWarningData(o[1]);
}

core.int buildCounterInstanceGroupsScopedListWarning = 0;
api.InstanceGroupsScopedListWarning buildInstanceGroupsScopedListWarning() {
  final o = api.InstanceGroupsScopedListWarning();
  buildCounterInstanceGroupsScopedListWarning++;
  if (buildCounterInstanceGroupsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1029();
    o.message = 'foo';
  }
  buildCounterInstanceGroupsScopedListWarning--;
  return o;
}

void checkInstanceGroupsScopedListWarning(
    api.InstanceGroupsScopedListWarning o) {
  buildCounterInstanceGroupsScopedListWarning++;
  if (buildCounterInstanceGroupsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1029(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceGroupsScopedListWarning--;
}

core.int buildCounterInstanceGroupsScopedList = 0;
api.InstanceGroupsScopedList buildInstanceGroupsScopedList() {
  final o = api.InstanceGroupsScopedList();
  buildCounterInstanceGroupsScopedList++;
  if (buildCounterInstanceGroupsScopedList < 3) {
    o.instanceGroups = buildUnnamed1028();
    o.warning = buildInstanceGroupsScopedListWarning();
  }
  buildCounterInstanceGroupsScopedList--;
  return o;
}

void checkInstanceGroupsScopedList(api.InstanceGroupsScopedList o) {
  buildCounterInstanceGroupsScopedList++;
  if (buildCounterInstanceGroupsScopedList < 3) {
    checkUnnamed1028(o.instanceGroups!);
    checkInstanceGroupsScopedListWarning(o.warning!);
  }
  buildCounterInstanceGroupsScopedList--;
}

core.List<api.NamedPort> buildUnnamed1030() => [
      buildNamedPort(),
      buildNamedPort(),
    ];

void checkUnnamed1030(core.List<api.NamedPort> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNamedPort(o[0]);
  checkNamedPort(o[1]);
}

core.int buildCounterInstanceGroupsSetNamedPortsRequest = 0;
api.InstanceGroupsSetNamedPortsRequest
    buildInstanceGroupsSetNamedPortsRequest() {
  final o = api.InstanceGroupsSetNamedPortsRequest();
  buildCounterInstanceGroupsSetNamedPortsRequest++;
  if (buildCounterInstanceGroupsSetNamedPortsRequest < 3) {
    o.fingerprint = 'foo';
    o.namedPorts = buildUnnamed1030();
  }
  buildCounterInstanceGroupsSetNamedPortsRequest--;
  return o;
}

void checkInstanceGroupsSetNamedPortsRequest(
    api.InstanceGroupsSetNamedPortsRequest o) {
  buildCounterInstanceGroupsSetNamedPortsRequest++;
  if (buildCounterInstanceGroupsSetNamedPortsRequest < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1030(o.namedPorts!);
  }
  buildCounterInstanceGroupsSetNamedPortsRequest--;
}

core.List<api.Instance> buildUnnamed1031() => [
      buildInstance(),
      buildInstance(),
    ];

void checkUnnamed1031(core.List<api.Instance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstance(o[0]);
  checkInstance(o[1]);
}

core.int buildCounterInstanceListWarningData = 0;
api.InstanceListWarningData buildInstanceListWarningData() {
  final o = api.InstanceListWarningData();
  buildCounterInstanceListWarningData++;
  if (buildCounterInstanceListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceListWarningData--;
  return o;
}

void checkInstanceListWarningData(api.InstanceListWarningData o) {
  buildCounterInstanceListWarningData++;
  if (buildCounterInstanceListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceListWarningData--;
}

core.List<api.InstanceListWarningData> buildUnnamed1032() => [
      buildInstanceListWarningData(),
      buildInstanceListWarningData(),
    ];

void checkUnnamed1032(core.List<api.InstanceListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceListWarningData(o[0]);
  checkInstanceListWarningData(o[1]);
}

core.int buildCounterInstanceListWarning = 0;
api.InstanceListWarning buildInstanceListWarning() {
  final o = api.InstanceListWarning();
  buildCounterInstanceListWarning++;
  if (buildCounterInstanceListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1032();
    o.message = 'foo';
  }
  buildCounterInstanceListWarning--;
  return o;
}

void checkInstanceListWarning(api.InstanceListWarning o) {
  buildCounterInstanceListWarning++;
  if (buildCounterInstanceListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1032(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceListWarning--;
}

core.int buildCounterInstanceList = 0;
api.InstanceList buildInstanceList() {
  final o = api.InstanceList();
  buildCounterInstanceList++;
  if (buildCounterInstanceList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1031();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceListWarning();
  }
  buildCounterInstanceList--;
  return o;
}

void checkInstanceList(api.InstanceList o) {
  buildCounterInstanceList++;
  if (buildCounterInstanceList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1031(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceListWarning(o.warning!);
  }
  buildCounterInstanceList--;
}

core.List<api.Reference> buildUnnamed1033() => [
      buildReference(),
      buildReference(),
    ];

void checkUnnamed1033(core.List<api.Reference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReference(o[0]);
  checkReference(o[1]);
}

core.int buildCounterInstanceListReferrersWarningData = 0;
api.InstanceListReferrersWarningData buildInstanceListReferrersWarningData() {
  final o = api.InstanceListReferrersWarningData();
  buildCounterInstanceListReferrersWarningData++;
  if (buildCounterInstanceListReferrersWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceListReferrersWarningData--;
  return o;
}

void checkInstanceListReferrersWarningData(
    api.InstanceListReferrersWarningData o) {
  buildCounterInstanceListReferrersWarningData++;
  if (buildCounterInstanceListReferrersWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceListReferrersWarningData--;
}

core.List<api.InstanceListReferrersWarningData> buildUnnamed1034() => [
      buildInstanceListReferrersWarningData(),
      buildInstanceListReferrersWarningData(),
    ];

void checkUnnamed1034(core.List<api.InstanceListReferrersWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceListReferrersWarningData(o[0]);
  checkInstanceListReferrersWarningData(o[1]);
}

core.int buildCounterInstanceListReferrersWarning = 0;
api.InstanceListReferrersWarning buildInstanceListReferrersWarning() {
  final o = api.InstanceListReferrersWarning();
  buildCounterInstanceListReferrersWarning++;
  if (buildCounterInstanceListReferrersWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1034();
    o.message = 'foo';
  }
  buildCounterInstanceListReferrersWarning--;
  return o;
}

void checkInstanceListReferrersWarning(api.InstanceListReferrersWarning o) {
  buildCounterInstanceListReferrersWarning++;
  if (buildCounterInstanceListReferrersWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1034(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceListReferrersWarning--;
}

core.int buildCounterInstanceListReferrers = 0;
api.InstanceListReferrers buildInstanceListReferrers() {
  final o = api.InstanceListReferrers();
  buildCounterInstanceListReferrers++;
  if (buildCounterInstanceListReferrers < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1033();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceListReferrersWarning();
  }
  buildCounterInstanceListReferrers--;
  return o;
}

void checkInstanceListReferrers(api.InstanceListReferrers o) {
  buildCounterInstanceListReferrers++;
  if (buildCounterInstanceListReferrers < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1033(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceListReferrersWarning(o.warning!);
  }
  buildCounterInstanceListReferrers--;
}

core.int buildCounterInstanceManagedByIgmError = 0;
api.InstanceManagedByIgmError buildInstanceManagedByIgmError() {
  final o = api.InstanceManagedByIgmError();
  buildCounterInstanceManagedByIgmError++;
  if (buildCounterInstanceManagedByIgmError < 3) {
    o.error = buildInstanceManagedByIgmErrorManagedInstanceError();
    o.instanceActionDetails =
        buildInstanceManagedByIgmErrorInstanceActionDetails();
    o.timestamp = 'foo';
  }
  buildCounterInstanceManagedByIgmError--;
  return o;
}

void checkInstanceManagedByIgmError(api.InstanceManagedByIgmError o) {
  buildCounterInstanceManagedByIgmError++;
  if (buildCounterInstanceManagedByIgmError < 3) {
    checkInstanceManagedByIgmErrorManagedInstanceError(o.error!);
    checkInstanceManagedByIgmErrorInstanceActionDetails(
        o.instanceActionDetails!);
    unittest.expect(
      o.timestamp!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceManagedByIgmError--;
}

core.int buildCounterInstanceManagedByIgmErrorInstanceActionDetails = 0;
api.InstanceManagedByIgmErrorInstanceActionDetails
    buildInstanceManagedByIgmErrorInstanceActionDetails() {
  final o = api.InstanceManagedByIgmErrorInstanceActionDetails();
  buildCounterInstanceManagedByIgmErrorInstanceActionDetails++;
  if (buildCounterInstanceManagedByIgmErrorInstanceActionDetails < 3) {
    o.action = 'foo';
    o.instance = 'foo';
    o.version = buildManagedInstanceVersion();
  }
  buildCounterInstanceManagedByIgmErrorInstanceActionDetails--;
  return o;
}

void checkInstanceManagedByIgmErrorInstanceActionDetails(
    api.InstanceManagedByIgmErrorInstanceActionDetails o) {
  buildCounterInstanceManagedByIgmErrorInstanceActionDetails++;
  if (buildCounterInstanceManagedByIgmErrorInstanceActionDetails < 3) {
    unittest.expect(
      o.action!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    checkManagedInstanceVersion(o.version!);
  }
  buildCounterInstanceManagedByIgmErrorInstanceActionDetails--;
}

core.int buildCounterInstanceManagedByIgmErrorManagedInstanceError = 0;
api.InstanceManagedByIgmErrorManagedInstanceError
    buildInstanceManagedByIgmErrorManagedInstanceError() {
  final o = api.InstanceManagedByIgmErrorManagedInstanceError();
  buildCounterInstanceManagedByIgmErrorManagedInstanceError++;
  if (buildCounterInstanceManagedByIgmErrorManagedInstanceError < 3) {
    o.code = 'foo';
    o.message = 'foo';
  }
  buildCounterInstanceManagedByIgmErrorManagedInstanceError--;
  return o;
}

void checkInstanceManagedByIgmErrorManagedInstanceError(
    api.InstanceManagedByIgmErrorManagedInstanceError o) {
  buildCounterInstanceManagedByIgmErrorManagedInstanceError++;
  if (buildCounterInstanceManagedByIgmErrorManagedInstanceError < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceManagedByIgmErrorManagedInstanceError--;
}

core.int buildCounterInstanceMoveRequest = 0;
api.InstanceMoveRequest buildInstanceMoveRequest() {
  final o = api.InstanceMoveRequest();
  buildCounterInstanceMoveRequest++;
  if (buildCounterInstanceMoveRequest < 3) {
    o.destinationZone = 'foo';
    o.targetInstance = 'foo';
  }
  buildCounterInstanceMoveRequest--;
  return o;
}

void checkInstanceMoveRequest(api.InstanceMoveRequest o) {
  buildCounterInstanceMoveRequest++;
  if (buildCounterInstanceMoveRequest < 3) {
    unittest.expect(
      o.destinationZone!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetInstance!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceMoveRequest--;
}

core.List<api.AttachedDisk> buildUnnamed1035() => [
      buildAttachedDisk(),
      buildAttachedDisk(),
    ];

void checkUnnamed1035(core.List<api.AttachedDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAttachedDisk(o[0]);
  checkAttachedDisk(o[1]);
}

core.List<api.AcceleratorConfig> buildUnnamed1036() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed1036(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.Map<core.String, core.String> buildUnnamed1037() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1037(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<api.NetworkInterface> buildUnnamed1038() => [
      buildNetworkInterface(),
      buildNetworkInterface(),
    ];

void checkUnnamed1038(core.List<api.NetworkInterface> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkInterface(o[0]);
  checkNetworkInterface(o[1]);
}

core.List<core.String> buildUnnamed1039() => [
      'foo',
      'foo',
    ];

void checkUnnamed1039(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.ServiceAccount> buildUnnamed1040() => [
      buildServiceAccount(),
      buildServiceAccount(),
    ];

void checkUnnamed1040(core.List<api.ServiceAccount> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAccount(o[0]);
  checkServiceAccount(o[1]);
}

core.int buildCounterInstanceProperties = 0;
api.InstanceProperties buildInstanceProperties() {
  final o = api.InstanceProperties();
  buildCounterInstanceProperties++;
  if (buildCounterInstanceProperties < 3) {
    o.advancedMachineFeatures = buildAdvancedMachineFeatures();
    o.canIpForward = true;
    o.confidentialInstanceConfig = buildConfidentialInstanceConfig();
    o.description = 'foo';
    o.disks = buildUnnamed1035();
    o.guestAccelerators = buildUnnamed1036();
    o.labels = buildUnnamed1037();
    o.machineType = 'foo';
    o.metadata = buildMetadata();
    o.minCpuPlatform = 'foo';
    o.networkInterfaces = buildUnnamed1038();
    o.privateIpv6GoogleAccess = 'foo';
    o.reservationAffinity = buildReservationAffinity();
    o.resourcePolicies = buildUnnamed1039();
    o.scheduling = buildScheduling();
    o.serviceAccounts = buildUnnamed1040();
    o.shieldedInstanceConfig = buildShieldedInstanceConfig();
    o.tags = buildTags();
  }
  buildCounterInstanceProperties--;
  return o;
}

void checkInstanceProperties(api.InstanceProperties o) {
  buildCounterInstanceProperties++;
  if (buildCounterInstanceProperties < 3) {
    checkAdvancedMachineFeatures(o.advancedMachineFeatures!);
    unittest.expect(o.canIpForward!, unittest.isTrue);
    checkConfidentialInstanceConfig(o.confidentialInstanceConfig!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1035(o.disks!);
    checkUnnamed1036(o.guestAccelerators!);
    checkUnnamed1037(o.labels!);
    unittest.expect(
      o.machineType!,
      unittest.equals('foo'),
    );
    checkMetadata(o.metadata!);
    unittest.expect(
      o.minCpuPlatform!,
      unittest.equals('foo'),
    );
    checkUnnamed1038(o.networkInterfaces!);
    unittest.expect(
      o.privateIpv6GoogleAccess!,
      unittest.equals('foo'),
    );
    checkReservationAffinity(o.reservationAffinity!);
    checkUnnamed1039(o.resourcePolicies!);
    checkScheduling(o.scheduling!);
    checkUnnamed1040(o.serviceAccounts!);
    checkShieldedInstanceConfig(o.shieldedInstanceConfig!);
    checkTags(o.tags!);
  }
  buildCounterInstanceProperties--;
}

core.int buildCounterInstanceReference = 0;
api.InstanceReference buildInstanceReference() {
  final o = api.InstanceReference();
  buildCounterInstanceReference++;
  if (buildCounterInstanceReference < 3) {
    o.instance = 'foo';
  }
  buildCounterInstanceReference--;
  return o;
}

void checkInstanceReference(api.InstanceReference o) {
  buildCounterInstanceReference++;
  if (buildCounterInstanceReference < 3) {
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceReference--;
}

core.int buildCounterInstanceTemplate = 0;
api.InstanceTemplate buildInstanceTemplate() {
  final o = api.InstanceTemplate();
  buildCounterInstanceTemplate++;
  if (buildCounterInstanceTemplate < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.properties = buildInstanceProperties();
    o.selfLink = 'foo';
    o.sourceInstance = 'foo';
    o.sourceInstanceParams = buildSourceInstanceParams();
  }
  buildCounterInstanceTemplate--;
  return o;
}

void checkInstanceTemplate(api.InstanceTemplate o) {
  buildCounterInstanceTemplate++;
  if (buildCounterInstanceTemplate < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkInstanceProperties(o.properties!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceInstance!,
      unittest.equals('foo'),
    );
    checkSourceInstanceParams(o.sourceInstanceParams!);
  }
  buildCounterInstanceTemplate--;
}

core.List<api.InstanceTemplate> buildUnnamed1041() => [
      buildInstanceTemplate(),
      buildInstanceTemplate(),
    ];

void checkUnnamed1041(core.List<api.InstanceTemplate> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceTemplate(o[0]);
  checkInstanceTemplate(o[1]);
}

core.int buildCounterInstanceTemplateListWarningData = 0;
api.InstanceTemplateListWarningData buildInstanceTemplateListWarningData() {
  final o = api.InstanceTemplateListWarningData();
  buildCounterInstanceTemplateListWarningData++;
  if (buildCounterInstanceTemplateListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstanceTemplateListWarningData--;
  return o;
}

void checkInstanceTemplateListWarningData(
    api.InstanceTemplateListWarningData o) {
  buildCounterInstanceTemplateListWarningData++;
  if (buildCounterInstanceTemplateListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceTemplateListWarningData--;
}

core.List<api.InstanceTemplateListWarningData> buildUnnamed1042() => [
      buildInstanceTemplateListWarningData(),
      buildInstanceTemplateListWarningData(),
    ];

void checkUnnamed1042(core.List<api.InstanceTemplateListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceTemplateListWarningData(o[0]);
  checkInstanceTemplateListWarningData(o[1]);
}

core.int buildCounterInstanceTemplateListWarning = 0;
api.InstanceTemplateListWarning buildInstanceTemplateListWarning() {
  final o = api.InstanceTemplateListWarning();
  buildCounterInstanceTemplateListWarning++;
  if (buildCounterInstanceTemplateListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1042();
    o.message = 'foo';
  }
  buildCounterInstanceTemplateListWarning--;
  return o;
}

void checkInstanceTemplateListWarning(api.InstanceTemplateListWarning o) {
  buildCounterInstanceTemplateListWarning++;
  if (buildCounterInstanceTemplateListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1042(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceTemplateListWarning--;
}

core.int buildCounterInstanceTemplateList = 0;
api.InstanceTemplateList buildInstanceTemplateList() {
  final o = api.InstanceTemplateList();
  buildCounterInstanceTemplateList++;
  if (buildCounterInstanceTemplateList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1041();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInstanceTemplateListWarning();
  }
  buildCounterInstanceTemplateList--;
  return o;
}

void checkInstanceTemplateList(api.InstanceTemplateList o) {
  buildCounterInstanceTemplateList++;
  if (buildCounterInstanceTemplateList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1041(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInstanceTemplateListWarning(o.warning!);
  }
  buildCounterInstanceTemplateList--;
}

core.List<api.NamedPort> buildUnnamed1043() => [
      buildNamedPort(),
      buildNamedPort(),
    ];

void checkUnnamed1043(core.List<api.NamedPort> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNamedPort(o[0]);
  checkNamedPort(o[1]);
}

core.int buildCounterInstanceWithNamedPorts = 0;
api.InstanceWithNamedPorts buildInstanceWithNamedPorts() {
  final o = api.InstanceWithNamedPorts();
  buildCounterInstanceWithNamedPorts++;
  if (buildCounterInstanceWithNamedPorts < 3) {
    o.instance = 'foo';
    o.namedPorts = buildUnnamed1043();
    o.status = 'foo';
  }
  buildCounterInstanceWithNamedPorts--;
  return o;
}

void checkInstanceWithNamedPorts(api.InstanceWithNamedPorts o) {
  buildCounterInstanceWithNamedPorts++;
  if (buildCounterInstanceWithNamedPorts < 3) {
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    checkUnnamed1043(o.namedPorts!);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstanceWithNamedPorts--;
}

core.List<core.String> buildUnnamed1044() => [
      'foo',
      'foo',
    ];

void checkUnnamed1044(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstancesAddResourcePoliciesRequest = 0;
api.InstancesAddResourcePoliciesRequest
    buildInstancesAddResourcePoliciesRequest() {
  final o = api.InstancesAddResourcePoliciesRequest();
  buildCounterInstancesAddResourcePoliciesRequest++;
  if (buildCounterInstancesAddResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed1044();
  }
  buildCounterInstancesAddResourcePoliciesRequest--;
  return o;
}

void checkInstancesAddResourcePoliciesRequest(
    api.InstancesAddResourcePoliciesRequest o) {
  buildCounterInstancesAddResourcePoliciesRequest++;
  if (buildCounterInstancesAddResourcePoliciesRequest < 3) {
    checkUnnamed1044(o.resourcePolicies!);
  }
  buildCounterInstancesAddResourcePoliciesRequest--;
}

core.List<api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>
    buildUnnamed1045() => [
          buildInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(),
          buildInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(),
        ];

void checkUnnamed1045(
    core.List<api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(o[0]);
  checkInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(o[1]);
}

core.List<api.Firewall> buildUnnamed1046() => [
      buildFirewall(),
      buildFirewall(),
    ];

void checkUnnamed1046(core.List<api.Firewall> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewall(o[0]);
  checkFirewall(o[1]);
}

core.int buildCounterInstancesGetEffectiveFirewallsResponse = 0;
api.InstancesGetEffectiveFirewallsResponse
    buildInstancesGetEffectiveFirewallsResponse() {
  final o = api.InstancesGetEffectiveFirewallsResponse();
  buildCounterInstancesGetEffectiveFirewallsResponse++;
  if (buildCounterInstancesGetEffectiveFirewallsResponse < 3) {
    o.firewallPolicys = buildUnnamed1045();
    o.firewalls = buildUnnamed1046();
  }
  buildCounterInstancesGetEffectiveFirewallsResponse--;
  return o;
}

void checkInstancesGetEffectiveFirewallsResponse(
    api.InstancesGetEffectiveFirewallsResponse o) {
  buildCounterInstancesGetEffectiveFirewallsResponse++;
  if (buildCounterInstancesGetEffectiveFirewallsResponse < 3) {
    checkUnnamed1045(o.firewallPolicys!);
    checkUnnamed1046(o.firewalls!);
  }
  buildCounterInstancesGetEffectiveFirewallsResponse--;
}

core.List<api.FirewallPolicyRule> buildUnnamed1047() => [
      buildFirewallPolicyRule(),
      buildFirewallPolicyRule(),
    ];

void checkUnnamed1047(core.List<api.FirewallPolicyRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyRule(o[0]);
  checkFirewallPolicyRule(o[1]);
}

core.int
    buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy =
    0;
api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    buildInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy() {
  final o = api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy();
  buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy++;
  if (buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy <
      3) {
    o.displayName = 'foo';
    o.name = 'foo';
    o.rules = buildUnnamed1047();
    o.shortName = 'foo';
    o.type = 'foo';
  }
  buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy--;
  return o;
}

void checkInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(
    api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy o) {
  buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy++;
  if (buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy <
      3) {
    unittest.expect(
      o.displayName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1047(o.rules!);
    unittest.expect(
      o.shortName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy--;
}

core.List<core.String> buildUnnamed1048() => [
      'foo',
      'foo',
    ];

void checkUnnamed1048(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstancesRemoveResourcePoliciesRequest = 0;
api.InstancesRemoveResourcePoliciesRequest
    buildInstancesRemoveResourcePoliciesRequest() {
  final o = api.InstancesRemoveResourcePoliciesRequest();
  buildCounterInstancesRemoveResourcePoliciesRequest++;
  if (buildCounterInstancesRemoveResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed1048();
  }
  buildCounterInstancesRemoveResourcePoliciesRequest--;
  return o;
}

void checkInstancesRemoveResourcePoliciesRequest(
    api.InstancesRemoveResourcePoliciesRequest o) {
  buildCounterInstancesRemoveResourcePoliciesRequest++;
  if (buildCounterInstancesRemoveResourcePoliciesRequest < 3) {
    checkUnnamed1048(o.resourcePolicies!);
  }
  buildCounterInstancesRemoveResourcePoliciesRequest--;
}

core.List<api.Instance> buildUnnamed1049() => [
      buildInstance(),
      buildInstance(),
    ];

void checkUnnamed1049(core.List<api.Instance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstance(o[0]);
  checkInstance(o[1]);
}

core.int buildCounterInstancesScopedListWarningData = 0;
api.InstancesScopedListWarningData buildInstancesScopedListWarningData() {
  final o = api.InstancesScopedListWarningData();
  buildCounterInstancesScopedListWarningData++;
  if (buildCounterInstancesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInstancesScopedListWarningData--;
  return o;
}

void checkInstancesScopedListWarningData(api.InstancesScopedListWarningData o) {
  buildCounterInstancesScopedListWarningData++;
  if (buildCounterInstancesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstancesScopedListWarningData--;
}

core.List<api.InstancesScopedListWarningData> buildUnnamed1050() => [
      buildInstancesScopedListWarningData(),
      buildInstancesScopedListWarningData(),
    ];

void checkUnnamed1050(core.List<api.InstancesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstancesScopedListWarningData(o[0]);
  checkInstancesScopedListWarningData(o[1]);
}

core.int buildCounterInstancesScopedListWarning = 0;
api.InstancesScopedListWarning buildInstancesScopedListWarning() {
  final o = api.InstancesScopedListWarning();
  buildCounterInstancesScopedListWarning++;
  if (buildCounterInstancesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1050();
    o.message = 'foo';
  }
  buildCounterInstancesScopedListWarning--;
  return o;
}

void checkInstancesScopedListWarning(api.InstancesScopedListWarning o) {
  buildCounterInstancesScopedListWarning++;
  if (buildCounterInstancesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1050(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstancesScopedListWarning--;
}

core.int buildCounterInstancesScopedList = 0;
api.InstancesScopedList buildInstancesScopedList() {
  final o = api.InstancesScopedList();
  buildCounterInstancesScopedList++;
  if (buildCounterInstancesScopedList < 3) {
    o.instances = buildUnnamed1049();
    o.warning = buildInstancesScopedListWarning();
  }
  buildCounterInstancesScopedList--;
  return o;
}

void checkInstancesScopedList(api.InstancesScopedList o) {
  buildCounterInstancesScopedList++;
  if (buildCounterInstancesScopedList < 3) {
    checkUnnamed1049(o.instances!);
    checkInstancesScopedListWarning(o.warning!);
  }
  buildCounterInstancesScopedList--;
}

core.Map<core.String, core.String> buildUnnamed1051() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1051(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterInstancesSetLabelsRequest = 0;
api.InstancesSetLabelsRequest buildInstancesSetLabelsRequest() {
  final o = api.InstancesSetLabelsRequest();
  buildCounterInstancesSetLabelsRequest++;
  if (buildCounterInstancesSetLabelsRequest < 3) {
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed1051();
  }
  buildCounterInstancesSetLabelsRequest--;
  return o;
}

void checkInstancesSetLabelsRequest(api.InstancesSetLabelsRequest o) {
  buildCounterInstancesSetLabelsRequest++;
  if (buildCounterInstancesSetLabelsRequest < 3) {
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1051(o.labels!);
  }
  buildCounterInstancesSetLabelsRequest--;
}

core.List<api.AcceleratorConfig> buildUnnamed1052() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed1052(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.int buildCounterInstancesSetMachineResourcesRequest = 0;
api.InstancesSetMachineResourcesRequest
    buildInstancesSetMachineResourcesRequest() {
  final o = api.InstancesSetMachineResourcesRequest();
  buildCounterInstancesSetMachineResourcesRequest++;
  if (buildCounterInstancesSetMachineResourcesRequest < 3) {
    o.guestAccelerators = buildUnnamed1052();
  }
  buildCounterInstancesSetMachineResourcesRequest--;
  return o;
}

void checkInstancesSetMachineResourcesRequest(
    api.InstancesSetMachineResourcesRequest o) {
  buildCounterInstancesSetMachineResourcesRequest++;
  if (buildCounterInstancesSetMachineResourcesRequest < 3) {
    checkUnnamed1052(o.guestAccelerators!);
  }
  buildCounterInstancesSetMachineResourcesRequest--;
}

core.int buildCounterInstancesSetMachineTypeRequest = 0;
api.InstancesSetMachineTypeRequest buildInstancesSetMachineTypeRequest() {
  final o = api.InstancesSetMachineTypeRequest();
  buildCounterInstancesSetMachineTypeRequest++;
  if (buildCounterInstancesSetMachineTypeRequest < 3) {
    o.machineType = 'foo';
  }
  buildCounterInstancesSetMachineTypeRequest--;
  return o;
}

void checkInstancesSetMachineTypeRequest(api.InstancesSetMachineTypeRequest o) {
  buildCounterInstancesSetMachineTypeRequest++;
  if (buildCounterInstancesSetMachineTypeRequest < 3) {
    unittest.expect(
      o.machineType!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstancesSetMachineTypeRequest--;
}

core.int buildCounterInstancesSetMinCpuPlatformRequest = 0;
api.InstancesSetMinCpuPlatformRequest buildInstancesSetMinCpuPlatformRequest() {
  final o = api.InstancesSetMinCpuPlatformRequest();
  buildCounterInstancesSetMinCpuPlatformRequest++;
  if (buildCounterInstancesSetMinCpuPlatformRequest < 3) {
    o.minCpuPlatform = 'foo';
  }
  buildCounterInstancesSetMinCpuPlatformRequest--;
  return o;
}

void checkInstancesSetMinCpuPlatformRequest(
    api.InstancesSetMinCpuPlatformRequest o) {
  buildCounterInstancesSetMinCpuPlatformRequest++;
  if (buildCounterInstancesSetMinCpuPlatformRequest < 3) {
    unittest.expect(
      o.minCpuPlatform!,
      unittest.equals('foo'),
    );
  }
  buildCounterInstancesSetMinCpuPlatformRequest--;
}

core.List<core.String> buildUnnamed1053() => [
      'foo',
      'foo',
    ];

void checkUnnamed1053(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInstancesSetServiceAccountRequest = 0;
api.InstancesSetServiceAccountRequest buildInstancesSetServiceAccountRequest() {
  final o = api.InstancesSetServiceAccountRequest();
  buildCounterInstancesSetServiceAccountRequest++;
  if (buildCounterInstancesSetServiceAccountRequest < 3) {
    o.email = 'foo';
    o.scopes = buildUnnamed1053();
  }
  buildCounterInstancesSetServiceAccountRequest--;
  return o;
}

void checkInstancesSetServiceAccountRequest(
    api.InstancesSetServiceAccountRequest o) {
  buildCounterInstancesSetServiceAccountRequest++;
  if (buildCounterInstancesSetServiceAccountRequest < 3) {
    unittest.expect(
      o.email!,
      unittest.equals('foo'),
    );
    checkUnnamed1053(o.scopes!);
  }
  buildCounterInstancesSetServiceAccountRequest--;
}

core.List<api.CustomerEncryptionKeyProtectedDisk> buildUnnamed1054() => [
      buildCustomerEncryptionKeyProtectedDisk(),
      buildCustomerEncryptionKeyProtectedDisk(),
    ];

void checkUnnamed1054(core.List<api.CustomerEncryptionKeyProtectedDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCustomerEncryptionKeyProtectedDisk(o[0]);
  checkCustomerEncryptionKeyProtectedDisk(o[1]);
}

core.int buildCounterInstancesStartWithEncryptionKeyRequest = 0;
api.InstancesStartWithEncryptionKeyRequest
    buildInstancesStartWithEncryptionKeyRequest() {
  final o = api.InstancesStartWithEncryptionKeyRequest();
  buildCounterInstancesStartWithEncryptionKeyRequest++;
  if (buildCounterInstancesStartWithEncryptionKeyRequest < 3) {
    o.disks = buildUnnamed1054();
  }
  buildCounterInstancesStartWithEncryptionKeyRequest--;
  return o;
}

void checkInstancesStartWithEncryptionKeyRequest(
    api.InstancesStartWithEncryptionKeyRequest o) {
  buildCounterInstancesStartWithEncryptionKeyRequest++;
  if (buildCounterInstancesStartWithEncryptionKeyRequest < 3) {
    checkUnnamed1054(o.disks!);
  }
  buildCounterInstancesStartWithEncryptionKeyRequest--;
}

core.int buildCounterInt64RangeMatch = 0;
api.Int64RangeMatch buildInt64RangeMatch() {
  final o = api.Int64RangeMatch();
  buildCounterInt64RangeMatch++;
  if (buildCounterInt64RangeMatch < 3) {
    o.rangeEnd = 'foo';
    o.rangeStart = 'foo';
  }
  buildCounterInt64RangeMatch--;
  return o;
}

void checkInt64RangeMatch(api.Int64RangeMatch o) {
  buildCounterInt64RangeMatch++;
  if (buildCounterInt64RangeMatch < 3) {
    unittest.expect(
      o.rangeEnd!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.rangeStart!,
      unittest.equals('foo'),
    );
  }
  buildCounterInt64RangeMatch--;
}

core.List<api.InterconnectCircuitInfo> buildUnnamed1055() => [
      buildInterconnectCircuitInfo(),
      buildInterconnectCircuitInfo(),
    ];

void checkUnnamed1055(core.List<api.InterconnectCircuitInfo> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectCircuitInfo(o[0]);
  checkInterconnectCircuitInfo(o[1]);
}

core.List<api.InterconnectOutageNotification> buildUnnamed1056() => [
      buildInterconnectOutageNotification(),
      buildInterconnectOutageNotification(),
    ];

void checkUnnamed1056(core.List<api.InterconnectOutageNotification> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectOutageNotification(o[0]);
  checkInterconnectOutageNotification(o[1]);
}

core.List<core.String> buildUnnamed1057() => [
      'foo',
      'foo',
    ];

void checkUnnamed1057(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInterconnect = 0;
api.Interconnect buildInterconnect() {
  final o = api.Interconnect();
  buildCounterInterconnect++;
  if (buildCounterInterconnect < 3) {
    o.adminEnabled = true;
    o.circuitInfos = buildUnnamed1055();
    o.creationTimestamp = 'foo';
    o.customerName = 'foo';
    o.description = 'foo';
    o.expectedOutages = buildUnnamed1056();
    o.googleIpAddress = 'foo';
    o.googleReferenceId = 'foo';
    o.id = 'foo';
    o.interconnectAttachments = buildUnnamed1057();
    o.interconnectType = 'foo';
    o.kind = 'foo';
    o.linkType = 'foo';
    o.location = 'foo';
    o.name = 'foo';
    o.nocContactEmail = 'foo';
    o.operationalStatus = 'foo';
    o.peerIpAddress = 'foo';
    o.provisionedLinkCount = 42;
    o.requestedLinkCount = 42;
    o.selfLink = 'foo';
    o.state = 'foo';
  }
  buildCounterInterconnect--;
  return o;
}

void checkInterconnect(api.Interconnect o) {
  buildCounterInterconnect++;
  if (buildCounterInterconnect < 3) {
    unittest.expect(o.adminEnabled!, unittest.isTrue);
    checkUnnamed1055(o.circuitInfos!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.customerName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1056(o.expectedOutages!);
    unittest.expect(
      o.googleIpAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.googleReferenceId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1057(o.interconnectAttachments!);
    unittest.expect(
      o.interconnectType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.linkType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.location!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nocContactEmail!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.operationalStatus!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerIpAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.provisionedLinkCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.requestedLinkCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnect--;
}

core.List<core.String> buildUnnamed1058() => [
      'foo',
      'foo',
    ];

void checkUnnamed1058(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1059() => [
      'foo',
      'foo',
    ];

void checkUnnamed1059(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInterconnectAttachment = 0;
api.InterconnectAttachment buildInterconnectAttachment() {
  final o = api.InterconnectAttachment();
  buildCounterInterconnectAttachment++;
  if (buildCounterInterconnectAttachment < 3) {
    o.adminEnabled = true;
    o.bandwidth = 'foo';
    o.candidateSubnets = buildUnnamed1058();
    o.cloudRouterIpAddress = 'foo';
    o.creationTimestamp = 'foo';
    o.customerRouterIpAddress = 'foo';
    o.dataplaneVersion = 42;
    o.description = 'foo';
    o.edgeAvailabilityDomain = 'foo';
    o.encryption = 'foo';
    o.googleReferenceId = 'foo';
    o.id = 'foo';
    o.interconnect = 'foo';
    o.ipsecInternalAddresses = buildUnnamed1059();
    o.kind = 'foo';
    o.mtu = 42;
    o.name = 'foo';
    o.operationalStatus = 'foo';
    o.pairingKey = 'foo';
    o.partnerAsn = 'foo';
    o.partnerMetadata = buildInterconnectAttachmentPartnerMetadata();
    o.privateInterconnectInfo = buildInterconnectAttachmentPrivateInfo();
    o.region = 'foo';
    o.router = 'foo';
    o.selfLink = 'foo';
    o.state = 'foo';
    o.type = 'foo';
    o.vlanTag8021q = 42;
  }
  buildCounterInterconnectAttachment--;
  return o;
}

void checkInterconnectAttachment(api.InterconnectAttachment o) {
  buildCounterInterconnectAttachment++;
  if (buildCounterInterconnectAttachment < 3) {
    unittest.expect(o.adminEnabled!, unittest.isTrue);
    unittest.expect(
      o.bandwidth!,
      unittest.equals('foo'),
    );
    checkUnnamed1058(o.candidateSubnets!);
    unittest.expect(
      o.cloudRouterIpAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.customerRouterIpAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.dataplaneVersion!,
      unittest.equals(42),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.edgeAvailabilityDomain!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.encryption!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.googleReferenceId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.interconnect!,
      unittest.equals('foo'),
    );
    checkUnnamed1059(o.ipsecInternalAddresses!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.mtu!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.operationalStatus!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.pairingKey!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.partnerAsn!,
      unittest.equals('foo'),
    );
    checkInterconnectAttachmentPartnerMetadata(o.partnerMetadata!);
    checkInterconnectAttachmentPrivateInfo(o.privateInterconnectInfo!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.router!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.vlanTag8021q!,
      unittest.equals(42),
    );
  }
  buildCounterInterconnectAttachment--;
}

core.Map<core.String, api.InterconnectAttachmentsScopedList>
    buildUnnamed1060() => {
          'x': buildInterconnectAttachmentsScopedList(),
          'y': buildInterconnectAttachmentsScopedList(),
        };

void checkUnnamed1060(
    core.Map<core.String, api.InterconnectAttachmentsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachmentsScopedList(o['x']!);
  checkInterconnectAttachmentsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1061() => [
      'foo',
      'foo',
    ];

void checkUnnamed1061(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInterconnectAttachmentAggregatedListWarningData = 0;
api.InterconnectAttachmentAggregatedListWarningData
    buildInterconnectAttachmentAggregatedListWarningData() {
  final o = api.InterconnectAttachmentAggregatedListWarningData();
  buildCounterInterconnectAttachmentAggregatedListWarningData++;
  if (buildCounterInterconnectAttachmentAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInterconnectAttachmentAggregatedListWarningData--;
  return o;
}

void checkInterconnectAttachmentAggregatedListWarningData(
    api.InterconnectAttachmentAggregatedListWarningData o) {
  buildCounterInterconnectAttachmentAggregatedListWarningData++;
  if (buildCounterInterconnectAttachmentAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentAggregatedListWarningData--;
}

core.List<api.InterconnectAttachmentAggregatedListWarningData>
    buildUnnamed1062() => [
          buildInterconnectAttachmentAggregatedListWarningData(),
          buildInterconnectAttachmentAggregatedListWarningData(),
        ];

void checkUnnamed1062(
    core.List<api.InterconnectAttachmentAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachmentAggregatedListWarningData(o[0]);
  checkInterconnectAttachmentAggregatedListWarningData(o[1]);
}

core.int buildCounterInterconnectAttachmentAggregatedListWarning = 0;
api.InterconnectAttachmentAggregatedListWarning
    buildInterconnectAttachmentAggregatedListWarning() {
  final o = api.InterconnectAttachmentAggregatedListWarning();
  buildCounterInterconnectAttachmentAggregatedListWarning++;
  if (buildCounterInterconnectAttachmentAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1062();
    o.message = 'foo';
  }
  buildCounterInterconnectAttachmentAggregatedListWarning--;
  return o;
}

void checkInterconnectAttachmentAggregatedListWarning(
    api.InterconnectAttachmentAggregatedListWarning o) {
  buildCounterInterconnectAttachmentAggregatedListWarning++;
  if (buildCounterInterconnectAttachmentAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1062(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentAggregatedListWarning--;
}

core.int buildCounterInterconnectAttachmentAggregatedList = 0;
api.InterconnectAttachmentAggregatedList
    buildInterconnectAttachmentAggregatedList() {
  final o = api.InterconnectAttachmentAggregatedList();
  buildCounterInterconnectAttachmentAggregatedList++;
  if (buildCounterInterconnectAttachmentAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1060();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1061();
    o.warning = buildInterconnectAttachmentAggregatedListWarning();
  }
  buildCounterInterconnectAttachmentAggregatedList--;
  return o;
}

void checkInterconnectAttachmentAggregatedList(
    api.InterconnectAttachmentAggregatedList o) {
  buildCounterInterconnectAttachmentAggregatedList++;
  if (buildCounterInterconnectAttachmentAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1060(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1061(o.unreachables!);
    checkInterconnectAttachmentAggregatedListWarning(o.warning!);
  }
  buildCounterInterconnectAttachmentAggregatedList--;
}

core.List<api.InterconnectAttachment> buildUnnamed1063() => [
      buildInterconnectAttachment(),
      buildInterconnectAttachment(),
    ];

void checkUnnamed1063(core.List<api.InterconnectAttachment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachment(o[0]);
  checkInterconnectAttachment(o[1]);
}

core.int buildCounterInterconnectAttachmentListWarningData = 0;
api.InterconnectAttachmentListWarningData
    buildInterconnectAttachmentListWarningData() {
  final o = api.InterconnectAttachmentListWarningData();
  buildCounterInterconnectAttachmentListWarningData++;
  if (buildCounterInterconnectAttachmentListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInterconnectAttachmentListWarningData--;
  return o;
}

void checkInterconnectAttachmentListWarningData(
    api.InterconnectAttachmentListWarningData o) {
  buildCounterInterconnectAttachmentListWarningData++;
  if (buildCounterInterconnectAttachmentListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentListWarningData--;
}

core.List<api.InterconnectAttachmentListWarningData> buildUnnamed1064() => [
      buildInterconnectAttachmentListWarningData(),
      buildInterconnectAttachmentListWarningData(),
    ];

void checkUnnamed1064(core.List<api.InterconnectAttachmentListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachmentListWarningData(o[0]);
  checkInterconnectAttachmentListWarningData(o[1]);
}

core.int buildCounterInterconnectAttachmentListWarning = 0;
api.InterconnectAttachmentListWarning buildInterconnectAttachmentListWarning() {
  final o = api.InterconnectAttachmentListWarning();
  buildCounterInterconnectAttachmentListWarning++;
  if (buildCounterInterconnectAttachmentListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1064();
    o.message = 'foo';
  }
  buildCounterInterconnectAttachmentListWarning--;
  return o;
}

void checkInterconnectAttachmentListWarning(
    api.InterconnectAttachmentListWarning o) {
  buildCounterInterconnectAttachmentListWarning++;
  if (buildCounterInterconnectAttachmentListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1064(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentListWarning--;
}

core.int buildCounterInterconnectAttachmentList = 0;
api.InterconnectAttachmentList buildInterconnectAttachmentList() {
  final o = api.InterconnectAttachmentList();
  buildCounterInterconnectAttachmentList++;
  if (buildCounterInterconnectAttachmentList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1063();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInterconnectAttachmentListWarning();
  }
  buildCounterInterconnectAttachmentList--;
  return o;
}

void checkInterconnectAttachmentList(api.InterconnectAttachmentList o) {
  buildCounterInterconnectAttachmentList++;
  if (buildCounterInterconnectAttachmentList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1063(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInterconnectAttachmentListWarning(o.warning!);
  }
  buildCounterInterconnectAttachmentList--;
}

core.int buildCounterInterconnectAttachmentPartnerMetadata = 0;
api.InterconnectAttachmentPartnerMetadata
    buildInterconnectAttachmentPartnerMetadata() {
  final o = api.InterconnectAttachmentPartnerMetadata();
  buildCounterInterconnectAttachmentPartnerMetadata++;
  if (buildCounterInterconnectAttachmentPartnerMetadata < 3) {
    o.interconnectName = 'foo';
    o.partnerName = 'foo';
    o.portalUrl = 'foo';
  }
  buildCounterInterconnectAttachmentPartnerMetadata--;
  return o;
}

void checkInterconnectAttachmentPartnerMetadata(
    api.InterconnectAttachmentPartnerMetadata o) {
  buildCounterInterconnectAttachmentPartnerMetadata++;
  if (buildCounterInterconnectAttachmentPartnerMetadata < 3) {
    unittest.expect(
      o.interconnectName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.partnerName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portalUrl!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentPartnerMetadata--;
}

core.int buildCounterInterconnectAttachmentPrivateInfo = 0;
api.InterconnectAttachmentPrivateInfo buildInterconnectAttachmentPrivateInfo() {
  final o = api.InterconnectAttachmentPrivateInfo();
  buildCounterInterconnectAttachmentPrivateInfo++;
  if (buildCounterInterconnectAttachmentPrivateInfo < 3) {
    o.tag8021q = 42;
  }
  buildCounterInterconnectAttachmentPrivateInfo--;
  return o;
}

void checkInterconnectAttachmentPrivateInfo(
    api.InterconnectAttachmentPrivateInfo o) {
  buildCounterInterconnectAttachmentPrivateInfo++;
  if (buildCounterInterconnectAttachmentPrivateInfo < 3) {
    unittest.expect(
      o.tag8021q!,
      unittest.equals(42),
    );
  }
  buildCounterInterconnectAttachmentPrivateInfo--;
}

core.List<api.InterconnectAttachment> buildUnnamed1065() => [
      buildInterconnectAttachment(),
      buildInterconnectAttachment(),
    ];

void checkUnnamed1065(core.List<api.InterconnectAttachment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachment(o[0]);
  checkInterconnectAttachment(o[1]);
}

core.int buildCounterInterconnectAttachmentsScopedListWarningData = 0;
api.InterconnectAttachmentsScopedListWarningData
    buildInterconnectAttachmentsScopedListWarningData() {
  final o = api.InterconnectAttachmentsScopedListWarningData();
  buildCounterInterconnectAttachmentsScopedListWarningData++;
  if (buildCounterInterconnectAttachmentsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInterconnectAttachmentsScopedListWarningData--;
  return o;
}

void checkInterconnectAttachmentsScopedListWarningData(
    api.InterconnectAttachmentsScopedListWarningData o) {
  buildCounterInterconnectAttachmentsScopedListWarningData++;
  if (buildCounterInterconnectAttachmentsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentsScopedListWarningData--;
}

core.List<api.InterconnectAttachmentsScopedListWarningData>
    buildUnnamed1066() => [
          buildInterconnectAttachmentsScopedListWarningData(),
          buildInterconnectAttachmentsScopedListWarningData(),
        ];

void checkUnnamed1066(
    core.List<api.InterconnectAttachmentsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectAttachmentsScopedListWarningData(o[0]);
  checkInterconnectAttachmentsScopedListWarningData(o[1]);
}

core.int buildCounterInterconnectAttachmentsScopedListWarning = 0;
api.InterconnectAttachmentsScopedListWarning
    buildInterconnectAttachmentsScopedListWarning() {
  final o = api.InterconnectAttachmentsScopedListWarning();
  buildCounterInterconnectAttachmentsScopedListWarning++;
  if (buildCounterInterconnectAttachmentsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1066();
    o.message = 'foo';
  }
  buildCounterInterconnectAttachmentsScopedListWarning--;
  return o;
}

void checkInterconnectAttachmentsScopedListWarning(
    api.InterconnectAttachmentsScopedListWarning o) {
  buildCounterInterconnectAttachmentsScopedListWarning++;
  if (buildCounterInterconnectAttachmentsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1066(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectAttachmentsScopedListWarning--;
}

core.int buildCounterInterconnectAttachmentsScopedList = 0;
api.InterconnectAttachmentsScopedList buildInterconnectAttachmentsScopedList() {
  final o = api.InterconnectAttachmentsScopedList();
  buildCounterInterconnectAttachmentsScopedList++;
  if (buildCounterInterconnectAttachmentsScopedList < 3) {
    o.interconnectAttachments = buildUnnamed1065();
    o.warning = buildInterconnectAttachmentsScopedListWarning();
  }
  buildCounterInterconnectAttachmentsScopedList--;
  return o;
}

void checkInterconnectAttachmentsScopedList(
    api.InterconnectAttachmentsScopedList o) {
  buildCounterInterconnectAttachmentsScopedList++;
  if (buildCounterInterconnectAttachmentsScopedList < 3) {
    checkUnnamed1065(o.interconnectAttachments!);
    checkInterconnectAttachmentsScopedListWarning(o.warning!);
  }
  buildCounterInterconnectAttachmentsScopedList--;
}

core.int buildCounterInterconnectCircuitInfo = 0;
api.InterconnectCircuitInfo buildInterconnectCircuitInfo() {
  final o = api.InterconnectCircuitInfo();
  buildCounterInterconnectCircuitInfo++;
  if (buildCounterInterconnectCircuitInfo < 3) {
    o.customerDemarcId = 'foo';
    o.googleCircuitId = 'foo';
    o.googleDemarcId = 'foo';
  }
  buildCounterInterconnectCircuitInfo--;
  return o;
}

void checkInterconnectCircuitInfo(api.InterconnectCircuitInfo o) {
  buildCounterInterconnectCircuitInfo++;
  if (buildCounterInterconnectCircuitInfo < 3) {
    unittest.expect(
      o.customerDemarcId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.googleCircuitId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.googleDemarcId!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectCircuitInfo--;
}

core.List<api.InterconnectDiagnosticsARPEntry> buildUnnamed1067() => [
      buildInterconnectDiagnosticsARPEntry(),
      buildInterconnectDiagnosticsARPEntry(),
    ];

void checkUnnamed1067(core.List<api.InterconnectDiagnosticsARPEntry> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectDiagnosticsARPEntry(o[0]);
  checkInterconnectDiagnosticsARPEntry(o[1]);
}

core.List<api.InterconnectDiagnosticsLinkStatus> buildUnnamed1068() => [
      buildInterconnectDiagnosticsLinkStatus(),
      buildInterconnectDiagnosticsLinkStatus(),
    ];

void checkUnnamed1068(core.List<api.InterconnectDiagnosticsLinkStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectDiagnosticsLinkStatus(o[0]);
  checkInterconnectDiagnosticsLinkStatus(o[1]);
}

core.int buildCounterInterconnectDiagnostics = 0;
api.InterconnectDiagnostics buildInterconnectDiagnostics() {
  final o = api.InterconnectDiagnostics();
  buildCounterInterconnectDiagnostics++;
  if (buildCounterInterconnectDiagnostics < 3) {
    o.arpCaches = buildUnnamed1067();
    o.links = buildUnnamed1068();
    o.macAddress = 'foo';
  }
  buildCounterInterconnectDiagnostics--;
  return o;
}

void checkInterconnectDiagnostics(api.InterconnectDiagnostics o) {
  buildCounterInterconnectDiagnostics++;
  if (buildCounterInterconnectDiagnostics < 3) {
    checkUnnamed1067(o.arpCaches!);
    checkUnnamed1068(o.links!);
    unittest.expect(
      o.macAddress!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectDiagnostics--;
}

core.int buildCounterInterconnectDiagnosticsARPEntry = 0;
api.InterconnectDiagnosticsARPEntry buildInterconnectDiagnosticsARPEntry() {
  final o = api.InterconnectDiagnosticsARPEntry();
  buildCounterInterconnectDiagnosticsARPEntry++;
  if (buildCounterInterconnectDiagnosticsARPEntry < 3) {
    o.ipAddress = 'foo';
    o.macAddress = 'foo';
  }
  buildCounterInterconnectDiagnosticsARPEntry--;
  return o;
}

void checkInterconnectDiagnosticsARPEntry(
    api.InterconnectDiagnosticsARPEntry o) {
  buildCounterInterconnectDiagnosticsARPEntry++;
  if (buildCounterInterconnectDiagnosticsARPEntry < 3) {
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.macAddress!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectDiagnosticsARPEntry--;
}

core.int buildCounterInterconnectDiagnosticsLinkLACPStatus = 0;
api.InterconnectDiagnosticsLinkLACPStatus
    buildInterconnectDiagnosticsLinkLACPStatus() {
  final o = api.InterconnectDiagnosticsLinkLACPStatus();
  buildCounterInterconnectDiagnosticsLinkLACPStatus++;
  if (buildCounterInterconnectDiagnosticsLinkLACPStatus < 3) {
    o.googleSystemId = 'foo';
    o.neighborSystemId = 'foo';
    o.state = 'foo';
  }
  buildCounterInterconnectDiagnosticsLinkLACPStatus--;
  return o;
}

void checkInterconnectDiagnosticsLinkLACPStatus(
    api.InterconnectDiagnosticsLinkLACPStatus o) {
  buildCounterInterconnectDiagnosticsLinkLACPStatus++;
  if (buildCounterInterconnectDiagnosticsLinkLACPStatus < 3) {
    unittest.expect(
      o.googleSystemId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.neighborSystemId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectDiagnosticsLinkLACPStatus--;
}

core.int buildCounterInterconnectDiagnosticsLinkOpticalPower = 0;
api.InterconnectDiagnosticsLinkOpticalPower
    buildInterconnectDiagnosticsLinkOpticalPower() {
  final o = api.InterconnectDiagnosticsLinkOpticalPower();
  buildCounterInterconnectDiagnosticsLinkOpticalPower++;
  if (buildCounterInterconnectDiagnosticsLinkOpticalPower < 3) {
    o.state = 'foo';
    o.value = 42.0;
  }
  buildCounterInterconnectDiagnosticsLinkOpticalPower--;
  return o;
}

void checkInterconnectDiagnosticsLinkOpticalPower(
    api.InterconnectDiagnosticsLinkOpticalPower o) {
  buildCounterInterconnectDiagnosticsLinkOpticalPower++;
  if (buildCounterInterconnectDiagnosticsLinkOpticalPower < 3) {
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals(42.0),
    );
  }
  buildCounterInterconnectDiagnosticsLinkOpticalPower--;
}

core.List<api.InterconnectDiagnosticsARPEntry> buildUnnamed1069() => [
      buildInterconnectDiagnosticsARPEntry(),
      buildInterconnectDiagnosticsARPEntry(),
    ];

void checkUnnamed1069(core.List<api.InterconnectDiagnosticsARPEntry> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectDiagnosticsARPEntry(o[0]);
  checkInterconnectDiagnosticsARPEntry(o[1]);
}

core.int buildCounterInterconnectDiagnosticsLinkStatus = 0;
api.InterconnectDiagnosticsLinkStatus buildInterconnectDiagnosticsLinkStatus() {
  final o = api.InterconnectDiagnosticsLinkStatus();
  buildCounterInterconnectDiagnosticsLinkStatus++;
  if (buildCounterInterconnectDiagnosticsLinkStatus < 3) {
    o.arpCaches = buildUnnamed1069();
    o.circuitId = 'foo';
    o.googleDemarc = 'foo';
    o.lacpStatus = buildInterconnectDiagnosticsLinkLACPStatus();
    o.receivingOpticalPower = buildInterconnectDiagnosticsLinkOpticalPower();
    o.transmittingOpticalPower = buildInterconnectDiagnosticsLinkOpticalPower();
  }
  buildCounterInterconnectDiagnosticsLinkStatus--;
  return o;
}

void checkInterconnectDiagnosticsLinkStatus(
    api.InterconnectDiagnosticsLinkStatus o) {
  buildCounterInterconnectDiagnosticsLinkStatus++;
  if (buildCounterInterconnectDiagnosticsLinkStatus < 3) {
    checkUnnamed1069(o.arpCaches!);
    unittest.expect(
      o.circuitId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.googleDemarc!,
      unittest.equals('foo'),
    );
    checkInterconnectDiagnosticsLinkLACPStatus(o.lacpStatus!);
    checkInterconnectDiagnosticsLinkOpticalPower(o.receivingOpticalPower!);
    checkInterconnectDiagnosticsLinkOpticalPower(o.transmittingOpticalPower!);
  }
  buildCounterInterconnectDiagnosticsLinkStatus--;
}

core.List<api.Interconnect> buildUnnamed1070() => [
      buildInterconnect(),
      buildInterconnect(),
    ];

void checkUnnamed1070(core.List<api.Interconnect> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnect(o[0]);
  checkInterconnect(o[1]);
}

core.int buildCounterInterconnectListWarningData = 0;
api.InterconnectListWarningData buildInterconnectListWarningData() {
  final o = api.InterconnectListWarningData();
  buildCounterInterconnectListWarningData++;
  if (buildCounterInterconnectListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInterconnectListWarningData--;
  return o;
}

void checkInterconnectListWarningData(api.InterconnectListWarningData o) {
  buildCounterInterconnectListWarningData++;
  if (buildCounterInterconnectListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectListWarningData--;
}

core.List<api.InterconnectListWarningData> buildUnnamed1071() => [
      buildInterconnectListWarningData(),
      buildInterconnectListWarningData(),
    ];

void checkUnnamed1071(core.List<api.InterconnectListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectListWarningData(o[0]);
  checkInterconnectListWarningData(o[1]);
}

core.int buildCounterInterconnectListWarning = 0;
api.InterconnectListWarning buildInterconnectListWarning() {
  final o = api.InterconnectListWarning();
  buildCounterInterconnectListWarning++;
  if (buildCounterInterconnectListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1071();
    o.message = 'foo';
  }
  buildCounterInterconnectListWarning--;
  return o;
}

void checkInterconnectListWarning(api.InterconnectListWarning o) {
  buildCounterInterconnectListWarning++;
  if (buildCounterInterconnectListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1071(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectListWarning--;
}

core.int buildCounterInterconnectList = 0;
api.InterconnectList buildInterconnectList() {
  final o = api.InterconnectList();
  buildCounterInterconnectList++;
  if (buildCounterInterconnectList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1070();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInterconnectListWarning();
  }
  buildCounterInterconnectList--;
  return o;
}

void checkInterconnectList(api.InterconnectList o) {
  buildCounterInterconnectList++;
  if (buildCounterInterconnectList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1070(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInterconnectListWarning(o.warning!);
  }
  buildCounterInterconnectList--;
}

core.List<api.InterconnectLocationRegionInfo> buildUnnamed1072() => [
      buildInterconnectLocationRegionInfo(),
      buildInterconnectLocationRegionInfo(),
    ];

void checkUnnamed1072(core.List<api.InterconnectLocationRegionInfo> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectLocationRegionInfo(o[0]);
  checkInterconnectLocationRegionInfo(o[1]);
}

core.int buildCounterInterconnectLocation = 0;
api.InterconnectLocation buildInterconnectLocation() {
  final o = api.InterconnectLocation();
  buildCounterInterconnectLocation++;
  if (buildCounterInterconnectLocation < 3) {
    o.address = 'foo';
    o.availabilityZone = 'foo';
    o.city = 'foo';
    o.continent = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.facilityProvider = 'foo';
    o.facilityProviderFacilityId = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.peeringdbFacilityId = 'foo';
    o.regionInfos = buildUnnamed1072();
    o.selfLink = 'foo';
    o.status = 'foo';
  }
  buildCounterInterconnectLocation--;
  return o;
}

void checkInterconnectLocation(api.InterconnectLocation o) {
  buildCounterInterconnectLocation++;
  if (buildCounterInterconnectLocation < 3) {
    unittest.expect(
      o.address!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.availabilityZone!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.city!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.continent!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.facilityProvider!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.facilityProviderFacilityId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peeringdbFacilityId!,
      unittest.equals('foo'),
    );
    checkUnnamed1072(o.regionInfos!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectLocation--;
}

core.List<api.InterconnectLocation> buildUnnamed1073() => [
      buildInterconnectLocation(),
      buildInterconnectLocation(),
    ];

void checkUnnamed1073(core.List<api.InterconnectLocation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectLocation(o[0]);
  checkInterconnectLocation(o[1]);
}

core.int buildCounterInterconnectLocationListWarningData = 0;
api.InterconnectLocationListWarningData
    buildInterconnectLocationListWarningData() {
  final o = api.InterconnectLocationListWarningData();
  buildCounterInterconnectLocationListWarningData++;
  if (buildCounterInterconnectLocationListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterInterconnectLocationListWarningData--;
  return o;
}

void checkInterconnectLocationListWarningData(
    api.InterconnectLocationListWarningData o) {
  buildCounterInterconnectLocationListWarningData++;
  if (buildCounterInterconnectLocationListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectLocationListWarningData--;
}

core.List<api.InterconnectLocationListWarningData> buildUnnamed1074() => [
      buildInterconnectLocationListWarningData(),
      buildInterconnectLocationListWarningData(),
    ];

void checkUnnamed1074(core.List<api.InterconnectLocationListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInterconnectLocationListWarningData(o[0]);
  checkInterconnectLocationListWarningData(o[1]);
}

core.int buildCounterInterconnectLocationListWarning = 0;
api.InterconnectLocationListWarning buildInterconnectLocationListWarning() {
  final o = api.InterconnectLocationListWarning();
  buildCounterInterconnectLocationListWarning++;
  if (buildCounterInterconnectLocationListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1074();
    o.message = 'foo';
  }
  buildCounterInterconnectLocationListWarning--;
  return o;
}

void checkInterconnectLocationListWarning(
    api.InterconnectLocationListWarning o) {
  buildCounterInterconnectLocationListWarning++;
  if (buildCounterInterconnectLocationListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1074(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectLocationListWarning--;
}

core.int buildCounterInterconnectLocationList = 0;
api.InterconnectLocationList buildInterconnectLocationList() {
  final o = api.InterconnectLocationList();
  buildCounterInterconnectLocationList++;
  if (buildCounterInterconnectLocationList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1073();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildInterconnectLocationListWarning();
  }
  buildCounterInterconnectLocationList--;
  return o;
}

void checkInterconnectLocationList(api.InterconnectLocationList o) {
  buildCounterInterconnectLocationList++;
  if (buildCounterInterconnectLocationList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1073(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkInterconnectLocationListWarning(o.warning!);
  }
  buildCounterInterconnectLocationList--;
}

core.int buildCounterInterconnectLocationRegionInfo = 0;
api.InterconnectLocationRegionInfo buildInterconnectLocationRegionInfo() {
  final o = api.InterconnectLocationRegionInfo();
  buildCounterInterconnectLocationRegionInfo++;
  if (buildCounterInterconnectLocationRegionInfo < 3) {
    o.expectedRttMs = 'foo';
    o.locationPresence = 'foo';
    o.region = 'foo';
  }
  buildCounterInterconnectLocationRegionInfo--;
  return o;
}

void checkInterconnectLocationRegionInfo(api.InterconnectLocationRegionInfo o) {
  buildCounterInterconnectLocationRegionInfo++;
  if (buildCounterInterconnectLocationRegionInfo < 3) {
    unittest.expect(
      o.expectedRttMs!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.locationPresence!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectLocationRegionInfo--;
}

core.List<core.String> buildUnnamed1075() => [
      'foo',
      'foo',
    ];

void checkUnnamed1075(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterInterconnectOutageNotification = 0;
api.InterconnectOutageNotification buildInterconnectOutageNotification() {
  final o = api.InterconnectOutageNotification();
  buildCounterInterconnectOutageNotification++;
  if (buildCounterInterconnectOutageNotification < 3) {
    o.affectedCircuits = buildUnnamed1075();
    o.description = 'foo';
    o.endTime = 'foo';
    o.issueType = 'foo';
    o.name = 'foo';
    o.source = 'foo';
    o.startTime = 'foo';
    o.state = 'foo';
  }
  buildCounterInterconnectOutageNotification--;
  return o;
}

void checkInterconnectOutageNotification(api.InterconnectOutageNotification o) {
  buildCounterInterconnectOutageNotification++;
  if (buildCounterInterconnectOutageNotification < 3) {
    checkUnnamed1075(o.affectedCircuits!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.endTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.issueType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.source!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterInterconnectOutageNotification--;
}

core.int buildCounterInterconnectsGetDiagnosticsResponse = 0;
api.InterconnectsGetDiagnosticsResponse
    buildInterconnectsGetDiagnosticsResponse() {
  final o = api.InterconnectsGetDiagnosticsResponse();
  buildCounterInterconnectsGetDiagnosticsResponse++;
  if (buildCounterInterconnectsGetDiagnosticsResponse < 3) {
    o.result = buildInterconnectDiagnostics();
  }
  buildCounterInterconnectsGetDiagnosticsResponse--;
  return o;
}

void checkInterconnectsGetDiagnosticsResponse(
    api.InterconnectsGetDiagnosticsResponse o) {
  buildCounterInterconnectsGetDiagnosticsResponse++;
  if (buildCounterInterconnectsGetDiagnosticsResponse < 3) {
    checkInterconnectDiagnostics(o.result!);
  }
  buildCounterInterconnectsGetDiagnosticsResponse--;
}

core.int buildCounterLicense = 0;
api.License buildLicense() {
  final o = api.License();
  buildCounterLicense++;
  if (buildCounterLicense < 3) {
    o.chargesUseFee = true;
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.licenseCode = 'foo';
    o.name = 'foo';
    o.resourceRequirements = buildLicenseResourceRequirements();
    o.selfLink = 'foo';
    o.transferable = true;
  }
  buildCounterLicense--;
  return o;
}

void checkLicense(api.License o) {
  buildCounterLicense++;
  if (buildCounterLicense < 3) {
    unittest.expect(o.chargesUseFee!, unittest.isTrue);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.licenseCode!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkLicenseResourceRequirements(o.resourceRequirements!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(o.transferable!, unittest.isTrue);
  }
  buildCounterLicense--;
}

core.List<api.LicenseCodeLicenseAlias> buildUnnamed1076() => [
      buildLicenseCodeLicenseAlias(),
      buildLicenseCodeLicenseAlias(),
    ];

void checkUnnamed1076(core.List<api.LicenseCodeLicenseAlias> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLicenseCodeLicenseAlias(o[0]);
  checkLicenseCodeLicenseAlias(o[1]);
}

core.int buildCounterLicenseCode = 0;
api.LicenseCode buildLicenseCode() {
  final o = api.LicenseCode();
  buildCounterLicenseCode++;
  if (buildCounterLicenseCode < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.licenseAlias = buildUnnamed1076();
    o.name = 'foo';
    o.selfLink = 'foo';
    o.state = 'foo';
    o.transferable = true;
  }
  buildCounterLicenseCode--;
  return o;
}

void checkLicenseCode(api.LicenseCode o) {
  buildCounterLicenseCode++;
  if (buildCounterLicenseCode < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkUnnamed1076(o.licenseAlias!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(o.transferable!, unittest.isTrue);
  }
  buildCounterLicenseCode--;
}

core.int buildCounterLicenseCodeLicenseAlias = 0;
api.LicenseCodeLicenseAlias buildLicenseCodeLicenseAlias() {
  final o = api.LicenseCodeLicenseAlias();
  buildCounterLicenseCodeLicenseAlias++;
  if (buildCounterLicenseCodeLicenseAlias < 3) {
    o.description = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterLicenseCodeLicenseAlias--;
  return o;
}

void checkLicenseCodeLicenseAlias(api.LicenseCodeLicenseAlias o) {
  buildCounterLicenseCodeLicenseAlias++;
  if (buildCounterLicenseCodeLicenseAlias < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterLicenseCodeLicenseAlias--;
}

core.int buildCounterLicenseResourceCommitment = 0;
api.LicenseResourceCommitment buildLicenseResourceCommitment() {
  final o = api.LicenseResourceCommitment();
  buildCounterLicenseResourceCommitment++;
  if (buildCounterLicenseResourceCommitment < 3) {
    o.amount = 'foo';
    o.coresPerLicense = 'foo';
    o.license = 'foo';
  }
  buildCounterLicenseResourceCommitment--;
  return o;
}

void checkLicenseResourceCommitment(api.LicenseResourceCommitment o) {
  buildCounterLicenseResourceCommitment++;
  if (buildCounterLicenseResourceCommitment < 3) {
    unittest.expect(
      o.amount!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.coresPerLicense!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.license!,
      unittest.equals('foo'),
    );
  }
  buildCounterLicenseResourceCommitment--;
}

core.int buildCounterLicenseResourceRequirements = 0;
api.LicenseResourceRequirements buildLicenseResourceRequirements() {
  final o = api.LicenseResourceRequirements();
  buildCounterLicenseResourceRequirements++;
  if (buildCounterLicenseResourceRequirements < 3) {
    o.minGuestCpuCount = 42;
    o.minMemoryMb = 42;
  }
  buildCounterLicenseResourceRequirements--;
  return o;
}

void checkLicenseResourceRequirements(api.LicenseResourceRequirements o) {
  buildCounterLicenseResourceRequirements++;
  if (buildCounterLicenseResourceRequirements < 3) {
    unittest.expect(
      o.minGuestCpuCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.minMemoryMb!,
      unittest.equals(42),
    );
  }
  buildCounterLicenseResourceRequirements--;
}

core.List<api.License> buildUnnamed1077() => [
      buildLicense(),
      buildLicense(),
    ];

void checkUnnamed1077(core.List<api.License> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLicense(o[0]);
  checkLicense(o[1]);
}

core.int buildCounterLicensesListResponseWarningData = 0;
api.LicensesListResponseWarningData buildLicensesListResponseWarningData() {
  final o = api.LicensesListResponseWarningData();
  buildCounterLicensesListResponseWarningData++;
  if (buildCounterLicensesListResponseWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterLicensesListResponseWarningData--;
  return o;
}

void checkLicensesListResponseWarningData(
    api.LicensesListResponseWarningData o) {
  buildCounterLicensesListResponseWarningData++;
  if (buildCounterLicensesListResponseWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterLicensesListResponseWarningData--;
}

core.List<api.LicensesListResponseWarningData> buildUnnamed1078() => [
      buildLicensesListResponseWarningData(),
      buildLicensesListResponseWarningData(),
    ];

void checkUnnamed1078(core.List<api.LicensesListResponseWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLicensesListResponseWarningData(o[0]);
  checkLicensesListResponseWarningData(o[1]);
}

core.int buildCounterLicensesListResponseWarning = 0;
api.LicensesListResponseWarning buildLicensesListResponseWarning() {
  final o = api.LicensesListResponseWarning();
  buildCounterLicensesListResponseWarning++;
  if (buildCounterLicensesListResponseWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1078();
    o.message = 'foo';
  }
  buildCounterLicensesListResponseWarning--;
  return o;
}

void checkLicensesListResponseWarning(api.LicensesListResponseWarning o) {
  buildCounterLicensesListResponseWarning++;
  if (buildCounterLicensesListResponseWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1078(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterLicensesListResponseWarning--;
}

core.int buildCounterLicensesListResponse = 0;
api.LicensesListResponse buildLicensesListResponse() {
  final o = api.LicensesListResponse();
  buildCounterLicensesListResponse++;
  if (buildCounterLicensesListResponse < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1077();
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildLicensesListResponseWarning();
  }
  buildCounterLicensesListResponse--;
  return o;
}

void checkLicensesListResponse(api.LicensesListResponse o) {
  buildCounterLicensesListResponse++;
  if (buildCounterLicensesListResponse < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1077(o.items!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkLicensesListResponseWarning(o.warning!);
  }
  buildCounterLicensesListResponse--;
}

core.int buildCounterLocalDisk = 0;
api.LocalDisk buildLocalDisk() {
  final o = api.LocalDisk();
  buildCounterLocalDisk++;
  if (buildCounterLocalDisk < 3) {
    o.diskCount = 42;
    o.diskSizeGb = 42;
    o.diskType = 'foo';
  }
  buildCounterLocalDisk--;
  return o;
}

void checkLocalDisk(api.LocalDisk o) {
  buildCounterLocalDisk++;
  if (buildCounterLocalDisk < 3) {
    unittest.expect(
      o.diskCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals(42),
    );
    unittest.expect(
      o.diskType!,
      unittest.equals('foo'),
    );
  }
  buildCounterLocalDisk--;
}

core.Map<core.String, api.LocationPolicyLocation> buildUnnamed1079() => {
      'x': buildLocationPolicyLocation(),
      'y': buildLocationPolicyLocation(),
    };

void checkUnnamed1079(core.Map<core.String, api.LocationPolicyLocation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLocationPolicyLocation(o['x']!);
  checkLocationPolicyLocation(o['y']!);
}

core.int buildCounterLocationPolicy = 0;
api.LocationPolicy buildLocationPolicy() {
  final o = api.LocationPolicy();
  buildCounterLocationPolicy++;
  if (buildCounterLocationPolicy < 3) {
    o.locations = buildUnnamed1079();
  }
  buildCounterLocationPolicy--;
  return o;
}

void checkLocationPolicy(api.LocationPolicy o) {
  buildCounterLocationPolicy++;
  if (buildCounterLocationPolicy < 3) {
    checkUnnamed1079(o.locations!);
  }
  buildCounterLocationPolicy--;
}

core.int buildCounterLocationPolicyLocation = 0;
api.LocationPolicyLocation buildLocationPolicyLocation() {
  final o = api.LocationPolicyLocation();
  buildCounterLocationPolicyLocation++;
  if (buildCounterLocationPolicyLocation < 3) {
    o.preference = 'foo';
  }
  buildCounterLocationPolicyLocation--;
  return o;
}

void checkLocationPolicyLocation(api.LocationPolicyLocation o) {
  buildCounterLocationPolicyLocation++;
  if (buildCounterLocationPolicyLocation < 3) {
    unittest.expect(
      o.preference!,
      unittest.equals('foo'),
    );
  }
  buildCounterLocationPolicyLocation--;
}

core.int buildCounterLogConfig = 0;
api.LogConfig buildLogConfig() {
  final o = api.LogConfig();
  buildCounterLogConfig++;
  if (buildCounterLogConfig < 3) {
    o.cloudAudit = buildLogConfigCloudAuditOptions();
    o.counter = buildLogConfigCounterOptions();
    o.dataAccess = buildLogConfigDataAccessOptions();
  }
  buildCounterLogConfig--;
  return o;
}

void checkLogConfig(api.LogConfig o) {
  buildCounterLogConfig++;
  if (buildCounterLogConfig < 3) {
    checkLogConfigCloudAuditOptions(o.cloudAudit!);
    checkLogConfigCounterOptions(o.counter!);
    checkLogConfigDataAccessOptions(o.dataAccess!);
  }
  buildCounterLogConfig--;
}

core.int buildCounterLogConfigCloudAuditOptions = 0;
api.LogConfigCloudAuditOptions buildLogConfigCloudAuditOptions() {
  final o = api.LogConfigCloudAuditOptions();
  buildCounterLogConfigCloudAuditOptions++;
  if (buildCounterLogConfigCloudAuditOptions < 3) {
    o.authorizationLoggingOptions = buildAuthorizationLoggingOptions();
    o.logName = 'foo';
  }
  buildCounterLogConfigCloudAuditOptions--;
  return o;
}

void checkLogConfigCloudAuditOptions(api.LogConfigCloudAuditOptions o) {
  buildCounterLogConfigCloudAuditOptions++;
  if (buildCounterLogConfigCloudAuditOptions < 3) {
    checkAuthorizationLoggingOptions(o.authorizationLoggingOptions!);
    unittest.expect(
      o.logName!,
      unittest.equals('foo'),
    );
  }
  buildCounterLogConfigCloudAuditOptions--;
}

core.List<api.LogConfigCounterOptionsCustomField> buildUnnamed1080() => [
      buildLogConfigCounterOptionsCustomField(),
      buildLogConfigCounterOptionsCustomField(),
    ];

void checkUnnamed1080(core.List<api.LogConfigCounterOptionsCustomField> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLogConfigCounterOptionsCustomField(o[0]);
  checkLogConfigCounterOptionsCustomField(o[1]);
}

core.int buildCounterLogConfigCounterOptions = 0;
api.LogConfigCounterOptions buildLogConfigCounterOptions() {
  final o = api.LogConfigCounterOptions();
  buildCounterLogConfigCounterOptions++;
  if (buildCounterLogConfigCounterOptions < 3) {
    o.customFields = buildUnnamed1080();
    o.field = 'foo';
    o.metric = 'foo';
  }
  buildCounterLogConfigCounterOptions--;
  return o;
}

void checkLogConfigCounterOptions(api.LogConfigCounterOptions o) {
  buildCounterLogConfigCounterOptions++;
  if (buildCounterLogConfigCounterOptions < 3) {
    checkUnnamed1080(o.customFields!);
    unittest.expect(
      o.field!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.metric!,
      unittest.equals('foo'),
    );
  }
  buildCounterLogConfigCounterOptions--;
}

core.int buildCounterLogConfigCounterOptionsCustomField = 0;
api.LogConfigCounterOptionsCustomField
    buildLogConfigCounterOptionsCustomField() {
  final o = api.LogConfigCounterOptionsCustomField();
  buildCounterLogConfigCounterOptionsCustomField++;
  if (buildCounterLogConfigCounterOptionsCustomField < 3) {
    o.name = 'foo';
    o.value = 'foo';
  }
  buildCounterLogConfigCounterOptionsCustomField--;
  return o;
}

void checkLogConfigCounterOptionsCustomField(
    api.LogConfigCounterOptionsCustomField o) {
  buildCounterLogConfigCounterOptionsCustomField++;
  if (buildCounterLogConfigCounterOptionsCustomField < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterLogConfigCounterOptionsCustomField--;
}

core.int buildCounterLogConfigDataAccessOptions = 0;
api.LogConfigDataAccessOptions buildLogConfigDataAccessOptions() {
  final o = api.LogConfigDataAccessOptions();
  buildCounterLogConfigDataAccessOptions++;
  if (buildCounterLogConfigDataAccessOptions < 3) {
    o.logMode = 'foo';
  }
  buildCounterLogConfigDataAccessOptions--;
  return o;
}

void checkLogConfigDataAccessOptions(api.LogConfigDataAccessOptions o) {
  buildCounterLogConfigDataAccessOptions++;
  if (buildCounterLogConfigDataAccessOptions < 3) {
    unittest.expect(
      o.logMode!,
      unittest.equals('foo'),
    );
  }
  buildCounterLogConfigDataAccessOptions--;
}

core.int buildCounterMachineTypeAccelerators = 0;
api.MachineTypeAccelerators buildMachineTypeAccelerators() {
  final o = api.MachineTypeAccelerators();
  buildCounterMachineTypeAccelerators++;
  if (buildCounterMachineTypeAccelerators < 3) {
    o.guestAcceleratorCount = 42;
    o.guestAcceleratorType = 'foo';
  }
  buildCounterMachineTypeAccelerators--;
  return o;
}

void checkMachineTypeAccelerators(api.MachineTypeAccelerators o) {
  buildCounterMachineTypeAccelerators++;
  if (buildCounterMachineTypeAccelerators < 3) {
    unittest.expect(
      o.guestAcceleratorCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.guestAcceleratorType!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypeAccelerators--;
}

core.List<api.MachineTypeAccelerators> buildUnnamed1081() => [
      buildMachineTypeAccelerators(),
      buildMachineTypeAccelerators(),
    ];

void checkUnnamed1081(core.List<api.MachineTypeAccelerators> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypeAccelerators(o[0]);
  checkMachineTypeAccelerators(o[1]);
}

core.int buildCounterMachineTypeScratchDisks = 0;
api.MachineTypeScratchDisks buildMachineTypeScratchDisks() {
  final o = api.MachineTypeScratchDisks();
  buildCounterMachineTypeScratchDisks++;
  if (buildCounterMachineTypeScratchDisks < 3) {
    o.diskGb = 42;
  }
  buildCounterMachineTypeScratchDisks--;
  return o;
}

void checkMachineTypeScratchDisks(api.MachineTypeScratchDisks o) {
  buildCounterMachineTypeScratchDisks++;
  if (buildCounterMachineTypeScratchDisks < 3) {
    unittest.expect(
      o.diskGb!,
      unittest.equals(42),
    );
  }
  buildCounterMachineTypeScratchDisks--;
}

core.List<api.MachineTypeScratchDisks> buildUnnamed1082() => [
      buildMachineTypeScratchDisks(),
      buildMachineTypeScratchDisks(),
    ];

void checkUnnamed1082(core.List<api.MachineTypeScratchDisks> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypeScratchDisks(o[0]);
  checkMachineTypeScratchDisks(o[1]);
}

core.int buildCounterMachineType = 0;
api.MachineType buildMachineType() {
  final o = api.MachineType();
  buildCounterMachineType++;
  if (buildCounterMachineType < 3) {
    o.accelerators = buildUnnamed1081();
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.guestCpus = 42;
    o.id = 'foo';
    o.imageSpaceGb = 42;
    o.isSharedCpu = true;
    o.kind = 'foo';
    o.maximumPersistentDisks = 42;
    o.maximumPersistentDisksSizeGb = 'foo';
    o.memoryMb = 42;
    o.name = 'foo';
    o.scratchDisks = buildUnnamed1082();
    o.selfLink = 'foo';
    o.zone = 'foo';
  }
  buildCounterMachineType--;
  return o;
}

void checkMachineType(api.MachineType o) {
  buildCounterMachineType++;
  if (buildCounterMachineType < 3) {
    checkUnnamed1081(o.accelerators!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.guestCpus!,
      unittest.equals(42),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.imageSpaceGb!,
      unittest.equals(42),
    );
    unittest.expect(o.isSharedCpu!, unittest.isTrue);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.maximumPersistentDisks!,
      unittest.equals(42),
    );
    unittest.expect(
      o.maximumPersistentDisksSizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.memoryMb!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1082(o.scratchDisks!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineType--;
}

core.Map<core.String, api.MachineTypesScopedList> buildUnnamed1083() => {
      'x': buildMachineTypesScopedList(),
      'y': buildMachineTypesScopedList(),
    };

void checkUnnamed1083(core.Map<core.String, api.MachineTypesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypesScopedList(o['x']!);
  checkMachineTypesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1084() => [
      'foo',
      'foo',
    ];

void checkUnnamed1084(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterMachineTypeAggregatedListWarningData = 0;
api.MachineTypeAggregatedListWarningData
    buildMachineTypeAggregatedListWarningData() {
  final o = api.MachineTypeAggregatedListWarningData();
  buildCounterMachineTypeAggregatedListWarningData++;
  if (buildCounterMachineTypeAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterMachineTypeAggregatedListWarningData--;
  return o;
}

void checkMachineTypeAggregatedListWarningData(
    api.MachineTypeAggregatedListWarningData o) {
  buildCounterMachineTypeAggregatedListWarningData++;
  if (buildCounterMachineTypeAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypeAggregatedListWarningData--;
}

core.List<api.MachineTypeAggregatedListWarningData> buildUnnamed1085() => [
      buildMachineTypeAggregatedListWarningData(),
      buildMachineTypeAggregatedListWarningData(),
    ];

void checkUnnamed1085(core.List<api.MachineTypeAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypeAggregatedListWarningData(o[0]);
  checkMachineTypeAggregatedListWarningData(o[1]);
}

core.int buildCounterMachineTypeAggregatedListWarning = 0;
api.MachineTypeAggregatedListWarning buildMachineTypeAggregatedListWarning() {
  final o = api.MachineTypeAggregatedListWarning();
  buildCounterMachineTypeAggregatedListWarning++;
  if (buildCounterMachineTypeAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1085();
    o.message = 'foo';
  }
  buildCounterMachineTypeAggregatedListWarning--;
  return o;
}

void checkMachineTypeAggregatedListWarning(
    api.MachineTypeAggregatedListWarning o) {
  buildCounterMachineTypeAggregatedListWarning++;
  if (buildCounterMachineTypeAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1085(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypeAggregatedListWarning--;
}

core.int buildCounterMachineTypeAggregatedList = 0;
api.MachineTypeAggregatedList buildMachineTypeAggregatedList() {
  final o = api.MachineTypeAggregatedList();
  buildCounterMachineTypeAggregatedList++;
  if (buildCounterMachineTypeAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1083();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1084();
    o.warning = buildMachineTypeAggregatedListWarning();
  }
  buildCounterMachineTypeAggregatedList--;
  return o;
}

void checkMachineTypeAggregatedList(api.MachineTypeAggregatedList o) {
  buildCounterMachineTypeAggregatedList++;
  if (buildCounterMachineTypeAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1083(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1084(o.unreachables!);
    checkMachineTypeAggregatedListWarning(o.warning!);
  }
  buildCounterMachineTypeAggregatedList--;
}

core.List<api.MachineType> buildUnnamed1086() => [
      buildMachineType(),
      buildMachineType(),
    ];

void checkUnnamed1086(core.List<api.MachineType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineType(o[0]);
  checkMachineType(o[1]);
}

core.int buildCounterMachineTypeListWarningData = 0;
api.MachineTypeListWarningData buildMachineTypeListWarningData() {
  final o = api.MachineTypeListWarningData();
  buildCounterMachineTypeListWarningData++;
  if (buildCounterMachineTypeListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterMachineTypeListWarningData--;
  return o;
}

void checkMachineTypeListWarningData(api.MachineTypeListWarningData o) {
  buildCounterMachineTypeListWarningData++;
  if (buildCounterMachineTypeListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypeListWarningData--;
}

core.List<api.MachineTypeListWarningData> buildUnnamed1087() => [
      buildMachineTypeListWarningData(),
      buildMachineTypeListWarningData(),
    ];

void checkUnnamed1087(core.List<api.MachineTypeListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypeListWarningData(o[0]);
  checkMachineTypeListWarningData(o[1]);
}

core.int buildCounterMachineTypeListWarning = 0;
api.MachineTypeListWarning buildMachineTypeListWarning() {
  final o = api.MachineTypeListWarning();
  buildCounterMachineTypeListWarning++;
  if (buildCounterMachineTypeListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1087();
    o.message = 'foo';
  }
  buildCounterMachineTypeListWarning--;
  return o;
}

void checkMachineTypeListWarning(api.MachineTypeListWarning o) {
  buildCounterMachineTypeListWarning++;
  if (buildCounterMachineTypeListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1087(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypeListWarning--;
}

core.int buildCounterMachineTypeList = 0;
api.MachineTypeList buildMachineTypeList() {
  final o = api.MachineTypeList();
  buildCounterMachineTypeList++;
  if (buildCounterMachineTypeList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1086();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildMachineTypeListWarning();
  }
  buildCounterMachineTypeList--;
  return o;
}

void checkMachineTypeList(api.MachineTypeList o) {
  buildCounterMachineTypeList++;
  if (buildCounterMachineTypeList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1086(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkMachineTypeListWarning(o.warning!);
  }
  buildCounterMachineTypeList--;
}

core.List<api.MachineType> buildUnnamed1088() => [
      buildMachineType(),
      buildMachineType(),
    ];

void checkUnnamed1088(core.List<api.MachineType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineType(o[0]);
  checkMachineType(o[1]);
}

core.int buildCounterMachineTypesScopedListWarningData = 0;
api.MachineTypesScopedListWarningData buildMachineTypesScopedListWarningData() {
  final o = api.MachineTypesScopedListWarningData();
  buildCounterMachineTypesScopedListWarningData++;
  if (buildCounterMachineTypesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterMachineTypesScopedListWarningData--;
  return o;
}

void checkMachineTypesScopedListWarningData(
    api.MachineTypesScopedListWarningData o) {
  buildCounterMachineTypesScopedListWarningData++;
  if (buildCounterMachineTypesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypesScopedListWarningData--;
}

core.List<api.MachineTypesScopedListWarningData> buildUnnamed1089() => [
      buildMachineTypesScopedListWarningData(),
      buildMachineTypesScopedListWarningData(),
    ];

void checkUnnamed1089(core.List<api.MachineTypesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMachineTypesScopedListWarningData(o[0]);
  checkMachineTypesScopedListWarningData(o[1]);
}

core.int buildCounterMachineTypesScopedListWarning = 0;
api.MachineTypesScopedListWarning buildMachineTypesScopedListWarning() {
  final o = api.MachineTypesScopedListWarning();
  buildCounterMachineTypesScopedListWarning++;
  if (buildCounterMachineTypesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1089();
    o.message = 'foo';
  }
  buildCounterMachineTypesScopedListWarning--;
  return o;
}

void checkMachineTypesScopedListWarning(api.MachineTypesScopedListWarning o) {
  buildCounterMachineTypesScopedListWarning++;
  if (buildCounterMachineTypesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1089(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterMachineTypesScopedListWarning--;
}

core.int buildCounterMachineTypesScopedList = 0;
api.MachineTypesScopedList buildMachineTypesScopedList() {
  final o = api.MachineTypesScopedList();
  buildCounterMachineTypesScopedList++;
  if (buildCounterMachineTypesScopedList < 3) {
    o.machineTypes = buildUnnamed1088();
    o.warning = buildMachineTypesScopedListWarning();
  }
  buildCounterMachineTypesScopedList--;
  return o;
}

void checkMachineTypesScopedList(api.MachineTypesScopedList o) {
  buildCounterMachineTypesScopedList++;
  if (buildCounterMachineTypesScopedList < 3) {
    checkUnnamed1088(o.machineTypes!);
    checkMachineTypesScopedListWarning(o.warning!);
  }
  buildCounterMachineTypesScopedList--;
}

core.List<api.ManagedInstanceInstanceHealth> buildUnnamed1090() => [
      buildManagedInstanceInstanceHealth(),
      buildManagedInstanceInstanceHealth(),
    ];

void checkUnnamed1090(core.List<api.ManagedInstanceInstanceHealth> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkManagedInstanceInstanceHealth(o[0]);
  checkManagedInstanceInstanceHealth(o[1]);
}

core.int buildCounterManagedInstance = 0;
api.ManagedInstance buildManagedInstance() {
  final o = api.ManagedInstance();
  buildCounterManagedInstance++;
  if (buildCounterManagedInstance < 3) {
    o.currentAction = 'foo';
    o.id = 'foo';
    o.instance = 'foo';
    o.instanceHealth = buildUnnamed1090();
    o.instanceStatus = 'foo';
    o.lastAttempt = buildManagedInstanceLastAttempt();
    o.preservedStateFromConfig = buildPreservedState();
    o.preservedStateFromPolicy = buildPreservedState();
    o.version = buildManagedInstanceVersion();
  }
  buildCounterManagedInstance--;
  return o;
}

void checkManagedInstance(api.ManagedInstance o) {
  buildCounterManagedInstance++;
  if (buildCounterManagedInstance < 3) {
    unittest.expect(
      o.currentAction!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    checkUnnamed1090(o.instanceHealth!);
    unittest.expect(
      o.instanceStatus!,
      unittest.equals('foo'),
    );
    checkManagedInstanceLastAttempt(o.lastAttempt!);
    checkPreservedState(o.preservedStateFromConfig!);
    checkPreservedState(o.preservedStateFromPolicy!);
    checkManagedInstanceVersion(o.version!);
  }
  buildCounterManagedInstance--;
}

core.int buildCounterManagedInstanceInstanceHealth = 0;
api.ManagedInstanceInstanceHealth buildManagedInstanceInstanceHealth() {
  final o = api.ManagedInstanceInstanceHealth();
  buildCounterManagedInstanceInstanceHealth++;
  if (buildCounterManagedInstanceInstanceHealth < 3) {
    o.detailedHealthState = 'foo';
    o.healthCheck = 'foo';
  }
  buildCounterManagedInstanceInstanceHealth--;
  return o;
}

void checkManagedInstanceInstanceHealth(api.ManagedInstanceInstanceHealth o) {
  buildCounterManagedInstanceInstanceHealth++;
  if (buildCounterManagedInstanceInstanceHealth < 3) {
    unittest.expect(
      o.detailedHealthState!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.healthCheck!,
      unittest.equals('foo'),
    );
  }
  buildCounterManagedInstanceInstanceHealth--;
}

core.int buildCounterManagedInstanceLastAttemptErrorsErrors = 0;
api.ManagedInstanceLastAttemptErrorsErrors
    buildManagedInstanceLastAttemptErrorsErrors() {
  final o = api.ManagedInstanceLastAttemptErrorsErrors();
  buildCounterManagedInstanceLastAttemptErrorsErrors++;
  if (buildCounterManagedInstanceLastAttemptErrorsErrors < 3) {
    o.code = 'foo';
    o.location = 'foo';
    o.message = 'foo';
  }
  buildCounterManagedInstanceLastAttemptErrorsErrors--;
  return o;
}

void checkManagedInstanceLastAttemptErrorsErrors(
    api.ManagedInstanceLastAttemptErrorsErrors o) {
  buildCounterManagedInstanceLastAttemptErrorsErrors++;
  if (buildCounterManagedInstanceLastAttemptErrorsErrors < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.location!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterManagedInstanceLastAttemptErrorsErrors--;
}

core.List<api.ManagedInstanceLastAttemptErrorsErrors> buildUnnamed1091() => [
      buildManagedInstanceLastAttemptErrorsErrors(),
      buildManagedInstanceLastAttemptErrorsErrors(),
    ];

void checkUnnamed1091(core.List<api.ManagedInstanceLastAttemptErrorsErrors> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkManagedInstanceLastAttemptErrorsErrors(o[0]);
  checkManagedInstanceLastAttemptErrorsErrors(o[1]);
}

core.int buildCounterManagedInstanceLastAttemptErrors = 0;
api.ManagedInstanceLastAttemptErrors buildManagedInstanceLastAttemptErrors() {
  final o = api.ManagedInstanceLastAttemptErrors();
  buildCounterManagedInstanceLastAttemptErrors++;
  if (buildCounterManagedInstanceLastAttemptErrors < 3) {
    o.errors = buildUnnamed1091();
  }
  buildCounterManagedInstanceLastAttemptErrors--;
  return o;
}

void checkManagedInstanceLastAttemptErrors(
    api.ManagedInstanceLastAttemptErrors o) {
  buildCounterManagedInstanceLastAttemptErrors++;
  if (buildCounterManagedInstanceLastAttemptErrors < 3) {
    checkUnnamed1091(o.errors!);
  }
  buildCounterManagedInstanceLastAttemptErrors--;
}

core.int buildCounterManagedInstanceLastAttempt = 0;
api.ManagedInstanceLastAttempt buildManagedInstanceLastAttempt() {
  final o = api.ManagedInstanceLastAttempt();
  buildCounterManagedInstanceLastAttempt++;
  if (buildCounterManagedInstanceLastAttempt < 3) {
    o.errors = buildManagedInstanceLastAttemptErrors();
  }
  buildCounterManagedInstanceLastAttempt--;
  return o;
}

void checkManagedInstanceLastAttempt(api.ManagedInstanceLastAttempt o) {
  buildCounterManagedInstanceLastAttempt++;
  if (buildCounterManagedInstanceLastAttempt < 3) {
    checkManagedInstanceLastAttemptErrors(o.errors!);
  }
  buildCounterManagedInstanceLastAttempt--;
}

core.int buildCounterManagedInstanceVersion = 0;
api.ManagedInstanceVersion buildManagedInstanceVersion() {
  final o = api.ManagedInstanceVersion();
  buildCounterManagedInstanceVersion++;
  if (buildCounterManagedInstanceVersion < 3) {
    o.instanceTemplate = 'foo';
    o.name = 'foo';
  }
  buildCounterManagedInstanceVersion--;
  return o;
}

void checkManagedInstanceVersion(api.ManagedInstanceVersion o) {
  buildCounterManagedInstanceVersion++;
  if (buildCounterManagedInstanceVersion < 3) {
    unittest.expect(
      o.instanceTemplate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
  }
  buildCounterManagedInstanceVersion--;
}

core.int buildCounterMetadataItems = 0;
api.MetadataItems buildMetadataItems() {
  final o = api.MetadataItems();
  buildCounterMetadataItems++;
  if (buildCounterMetadataItems < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterMetadataItems--;
  return o;
}

void checkMetadataItems(api.MetadataItems o) {
  buildCounterMetadataItems++;
  if (buildCounterMetadataItems < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterMetadataItems--;
}

core.List<api.MetadataItems> buildUnnamed1092() => [
      buildMetadataItems(),
      buildMetadataItems(),
    ];

void checkUnnamed1092(core.List<api.MetadataItems> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMetadataItems(o[0]);
  checkMetadataItems(o[1]);
}

core.int buildCounterMetadata = 0;
api.Metadata buildMetadata() {
  final o = api.Metadata();
  buildCounterMetadata++;
  if (buildCounterMetadata < 3) {
    o.fingerprint = 'foo';
    o.items = buildUnnamed1092();
    o.kind = 'foo';
  }
  buildCounterMetadata--;
  return o;
}

void checkMetadata(api.Metadata o) {
  buildCounterMetadata++;
  if (buildCounterMetadata < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1092(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
  }
  buildCounterMetadata--;
}

core.List<api.MetadataFilterLabelMatch> buildUnnamed1093() => [
      buildMetadataFilterLabelMatch(),
      buildMetadataFilterLabelMatch(),
    ];

void checkUnnamed1093(core.List<api.MetadataFilterLabelMatch> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkMetadataFilterLabelMatch(o[0]);
  checkMetadataFilterLabelMatch(o[1]);
}

core.int buildCounterMetadataFilter = 0;
api.MetadataFilter buildMetadataFilter() {
  final o = api.MetadataFilter();
  buildCounterMetadataFilter++;
  if (buildCounterMetadataFilter < 3) {
    o.filterLabels = buildUnnamed1093();
    o.filterMatchCriteria = 'foo';
  }
  buildCounterMetadataFilter--;
  return o;
}

void checkMetadataFilter(api.MetadataFilter o) {
  buildCounterMetadataFilter++;
  if (buildCounterMetadataFilter < 3) {
    checkUnnamed1093(o.filterLabels!);
    unittest.expect(
      o.filterMatchCriteria!,
      unittest.equals('foo'),
    );
  }
  buildCounterMetadataFilter--;
}

core.int buildCounterMetadataFilterLabelMatch = 0;
api.MetadataFilterLabelMatch buildMetadataFilterLabelMatch() {
  final o = api.MetadataFilterLabelMatch();
  buildCounterMetadataFilterLabelMatch++;
  if (buildCounterMetadataFilterLabelMatch < 3) {
    o.name = 'foo';
    o.value = 'foo';
  }
  buildCounterMetadataFilterLabelMatch--;
  return o;
}

void checkMetadataFilterLabelMatch(api.MetadataFilterLabelMatch o) {
  buildCounterMetadataFilterLabelMatch++;
  if (buildCounterMetadataFilterLabelMatch < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterMetadataFilterLabelMatch--;
}

core.int buildCounterNamedPort = 0;
api.NamedPort buildNamedPort() {
  final o = api.NamedPort();
  buildCounterNamedPort++;
  if (buildCounterNamedPort < 3) {
    o.name = 'foo';
    o.port = 42;
  }
  buildCounterNamedPort--;
  return o;
}

void checkNamedPort(api.NamedPort o) {
  buildCounterNamedPort++;
  if (buildCounterNamedPort < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
  }
  buildCounterNamedPort--;
}

core.List<api.NetworkPeering> buildUnnamed1094() => [
      buildNetworkPeering(),
      buildNetworkPeering(),
    ];

void checkUnnamed1094(core.List<api.NetworkPeering> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkPeering(o[0]);
  checkNetworkPeering(o[1]);
}

core.List<core.String> buildUnnamed1095() => [
      'foo',
      'foo',
    ];

void checkUnnamed1095(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNetwork = 0;
api.Network buildNetwork() {
  final o = api.Network();
  buildCounterNetwork++;
  if (buildCounterNetwork < 3) {
    o.IPv4Range = 'foo';
    o.autoCreateSubnetworks = true;
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.gatewayIPv4 = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.mtu = 42;
    o.name = 'foo';
    o.peerings = buildUnnamed1094();
    o.routingConfig = buildNetworkRoutingConfig();
    o.selfLink = 'foo';
    o.subnetworks = buildUnnamed1095();
  }
  buildCounterNetwork--;
  return o;
}

void checkNetwork(api.Network o) {
  buildCounterNetwork++;
  if (buildCounterNetwork < 3) {
    unittest.expect(
      o.IPv4Range!,
      unittest.equals('foo'),
    );
    unittest.expect(o.autoCreateSubnetworks!, unittest.isTrue);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.gatewayIPv4!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.mtu!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1094(o.peerings!);
    checkNetworkRoutingConfig(o.routingConfig!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1095(o.subnetworks!);
  }
  buildCounterNetwork--;
}

core.Map<core.String, core.String> buildUnnamed1096() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1096(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterNetworkEndpoint = 0;
api.NetworkEndpoint buildNetworkEndpoint() {
  final o = api.NetworkEndpoint();
  buildCounterNetworkEndpoint++;
  if (buildCounterNetworkEndpoint < 3) {
    o.annotations = buildUnnamed1096();
    o.fqdn = 'foo';
    o.instance = 'foo';
    o.ipAddress = 'foo';
    o.port = 42;
  }
  buildCounterNetworkEndpoint--;
  return o;
}

void checkNetworkEndpoint(api.NetworkEndpoint o) {
  buildCounterNetworkEndpoint++;
  if (buildCounterNetworkEndpoint < 3) {
    checkUnnamed1096(o.annotations!);
    unittest.expect(
      o.fqdn!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
  }
  buildCounterNetworkEndpoint--;
}

core.Map<core.String, core.String> buildUnnamed1097() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1097(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterNetworkEndpointGroup = 0;
api.NetworkEndpointGroup buildNetworkEndpointGroup() {
  final o = api.NetworkEndpointGroup();
  buildCounterNetworkEndpointGroup++;
  if (buildCounterNetworkEndpointGroup < 3) {
    o.annotations = buildUnnamed1097();
    o.appEngine = buildNetworkEndpointGroupAppEngine();
    o.cloudFunction = buildNetworkEndpointGroupCloudFunction();
    o.cloudRun = buildNetworkEndpointGroupCloudRun();
    o.creationTimestamp = 'foo';
    o.defaultPort = 42;
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.network = 'foo';
    o.networkEndpointType = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.size = 42;
    o.subnetwork = 'foo';
    o.zone = 'foo';
  }
  buildCounterNetworkEndpointGroup--;
  return o;
}

void checkNetworkEndpointGroup(api.NetworkEndpointGroup o) {
  buildCounterNetworkEndpointGroup++;
  if (buildCounterNetworkEndpointGroup < 3) {
    checkUnnamed1097(o.annotations!);
    checkNetworkEndpointGroupAppEngine(o.appEngine!);
    checkNetworkEndpointGroupCloudFunction(o.cloudFunction!);
    checkNetworkEndpointGroupCloudRun(o.cloudRun!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.defaultPort!,
      unittest.equals(42),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.networkEndpointType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.size!,
      unittest.equals(42),
    );
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroup--;
}

core.Map<core.String, api.NetworkEndpointGroupsScopedList> buildUnnamed1098() =>
    {
      'x': buildNetworkEndpointGroupsScopedList(),
      'y': buildNetworkEndpointGroupsScopedList(),
    };

void checkUnnamed1098(
    core.Map<core.String, api.NetworkEndpointGroupsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroupsScopedList(o['x']!);
  checkNetworkEndpointGroupsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1099() => [
      'foo',
      'foo',
    ];

void checkUnnamed1099(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNetworkEndpointGroupAggregatedListWarningData = 0;
api.NetworkEndpointGroupAggregatedListWarningData
    buildNetworkEndpointGroupAggregatedListWarningData() {
  final o = api.NetworkEndpointGroupAggregatedListWarningData();
  buildCounterNetworkEndpointGroupAggregatedListWarningData++;
  if (buildCounterNetworkEndpointGroupAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNetworkEndpointGroupAggregatedListWarningData--;
  return o;
}

void checkNetworkEndpointGroupAggregatedListWarningData(
    api.NetworkEndpointGroupAggregatedListWarningData o) {
  buildCounterNetworkEndpointGroupAggregatedListWarningData++;
  if (buildCounterNetworkEndpointGroupAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupAggregatedListWarningData--;
}

core.List<api.NetworkEndpointGroupAggregatedListWarningData>
    buildUnnamed1100() => [
          buildNetworkEndpointGroupAggregatedListWarningData(),
          buildNetworkEndpointGroupAggregatedListWarningData(),
        ];

void checkUnnamed1100(
    core.List<api.NetworkEndpointGroupAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroupAggregatedListWarningData(o[0]);
  checkNetworkEndpointGroupAggregatedListWarningData(o[1]);
}

core.int buildCounterNetworkEndpointGroupAggregatedListWarning = 0;
api.NetworkEndpointGroupAggregatedListWarning
    buildNetworkEndpointGroupAggregatedListWarning() {
  final o = api.NetworkEndpointGroupAggregatedListWarning();
  buildCounterNetworkEndpointGroupAggregatedListWarning++;
  if (buildCounterNetworkEndpointGroupAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1100();
    o.message = 'foo';
  }
  buildCounterNetworkEndpointGroupAggregatedListWarning--;
  return o;
}

void checkNetworkEndpointGroupAggregatedListWarning(
    api.NetworkEndpointGroupAggregatedListWarning o) {
  buildCounterNetworkEndpointGroupAggregatedListWarning++;
  if (buildCounterNetworkEndpointGroupAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1100(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupAggregatedListWarning--;
}

core.int buildCounterNetworkEndpointGroupAggregatedList = 0;
api.NetworkEndpointGroupAggregatedList
    buildNetworkEndpointGroupAggregatedList() {
  final o = api.NetworkEndpointGroupAggregatedList();
  buildCounterNetworkEndpointGroupAggregatedList++;
  if (buildCounterNetworkEndpointGroupAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1098();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1099();
    o.warning = buildNetworkEndpointGroupAggregatedListWarning();
  }
  buildCounterNetworkEndpointGroupAggregatedList--;
  return o;
}

void checkNetworkEndpointGroupAggregatedList(
    api.NetworkEndpointGroupAggregatedList o) {
  buildCounterNetworkEndpointGroupAggregatedList++;
  if (buildCounterNetworkEndpointGroupAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1098(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1099(o.unreachables!);
    checkNetworkEndpointGroupAggregatedListWarning(o.warning!);
  }
  buildCounterNetworkEndpointGroupAggregatedList--;
}

core.int buildCounterNetworkEndpointGroupAppEngine = 0;
api.NetworkEndpointGroupAppEngine buildNetworkEndpointGroupAppEngine() {
  final o = api.NetworkEndpointGroupAppEngine();
  buildCounterNetworkEndpointGroupAppEngine++;
  if (buildCounterNetworkEndpointGroupAppEngine < 3) {
    o.service = 'foo';
    o.urlMask = 'foo';
    o.version = 'foo';
  }
  buildCounterNetworkEndpointGroupAppEngine--;
  return o;
}

void checkNetworkEndpointGroupAppEngine(api.NetworkEndpointGroupAppEngine o) {
  buildCounterNetworkEndpointGroupAppEngine++;
  if (buildCounterNetworkEndpointGroupAppEngine < 3) {
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMask!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.version!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupAppEngine--;
}

core.int buildCounterNetworkEndpointGroupCloudFunction = 0;
api.NetworkEndpointGroupCloudFunction buildNetworkEndpointGroupCloudFunction() {
  final o = api.NetworkEndpointGroupCloudFunction();
  buildCounterNetworkEndpointGroupCloudFunction++;
  if (buildCounterNetworkEndpointGroupCloudFunction < 3) {
    o.function = 'foo';
    o.urlMask = 'foo';
  }
  buildCounterNetworkEndpointGroupCloudFunction--;
  return o;
}

void checkNetworkEndpointGroupCloudFunction(
    api.NetworkEndpointGroupCloudFunction o) {
  buildCounterNetworkEndpointGroupCloudFunction++;
  if (buildCounterNetworkEndpointGroupCloudFunction < 3) {
    unittest.expect(
      o.function!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMask!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupCloudFunction--;
}

core.int buildCounterNetworkEndpointGroupCloudRun = 0;
api.NetworkEndpointGroupCloudRun buildNetworkEndpointGroupCloudRun() {
  final o = api.NetworkEndpointGroupCloudRun();
  buildCounterNetworkEndpointGroupCloudRun++;
  if (buildCounterNetworkEndpointGroupCloudRun < 3) {
    o.service = 'foo';
    o.tag = 'foo';
    o.urlMask = 'foo';
  }
  buildCounterNetworkEndpointGroupCloudRun--;
  return o;
}

void checkNetworkEndpointGroupCloudRun(api.NetworkEndpointGroupCloudRun o) {
  buildCounterNetworkEndpointGroupCloudRun++;
  if (buildCounterNetworkEndpointGroupCloudRun < 3) {
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.tag!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMask!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupCloudRun--;
}

core.List<api.NetworkEndpointGroup> buildUnnamed1101() => [
      buildNetworkEndpointGroup(),
      buildNetworkEndpointGroup(),
    ];

void checkUnnamed1101(core.List<api.NetworkEndpointGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroup(o[0]);
  checkNetworkEndpointGroup(o[1]);
}

core.int buildCounterNetworkEndpointGroupListWarningData = 0;
api.NetworkEndpointGroupListWarningData
    buildNetworkEndpointGroupListWarningData() {
  final o = api.NetworkEndpointGroupListWarningData();
  buildCounterNetworkEndpointGroupListWarningData++;
  if (buildCounterNetworkEndpointGroupListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNetworkEndpointGroupListWarningData--;
  return o;
}

void checkNetworkEndpointGroupListWarningData(
    api.NetworkEndpointGroupListWarningData o) {
  buildCounterNetworkEndpointGroupListWarningData++;
  if (buildCounterNetworkEndpointGroupListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupListWarningData--;
}

core.List<api.NetworkEndpointGroupListWarningData> buildUnnamed1102() => [
      buildNetworkEndpointGroupListWarningData(),
      buildNetworkEndpointGroupListWarningData(),
    ];

void checkUnnamed1102(core.List<api.NetworkEndpointGroupListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroupListWarningData(o[0]);
  checkNetworkEndpointGroupListWarningData(o[1]);
}

core.int buildCounterNetworkEndpointGroupListWarning = 0;
api.NetworkEndpointGroupListWarning buildNetworkEndpointGroupListWarning() {
  final o = api.NetworkEndpointGroupListWarning();
  buildCounterNetworkEndpointGroupListWarning++;
  if (buildCounterNetworkEndpointGroupListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1102();
    o.message = 'foo';
  }
  buildCounterNetworkEndpointGroupListWarning--;
  return o;
}

void checkNetworkEndpointGroupListWarning(
    api.NetworkEndpointGroupListWarning o) {
  buildCounterNetworkEndpointGroupListWarning++;
  if (buildCounterNetworkEndpointGroupListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1102(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupListWarning--;
}

core.int buildCounterNetworkEndpointGroupList = 0;
api.NetworkEndpointGroupList buildNetworkEndpointGroupList() {
  final o = api.NetworkEndpointGroupList();
  buildCounterNetworkEndpointGroupList++;
  if (buildCounterNetworkEndpointGroupList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1101();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNetworkEndpointGroupListWarning();
  }
  buildCounterNetworkEndpointGroupList--;
  return o;
}

void checkNetworkEndpointGroupList(api.NetworkEndpointGroupList o) {
  buildCounterNetworkEndpointGroupList++;
  if (buildCounterNetworkEndpointGroupList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1101(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNetworkEndpointGroupListWarning(o.warning!);
  }
  buildCounterNetworkEndpointGroupList--;
}

core.List<api.NetworkEndpoint> buildUnnamed1103() => [
      buildNetworkEndpoint(),
      buildNetworkEndpoint(),
    ];

void checkUnnamed1103(core.List<api.NetworkEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpoint(o[0]);
  checkNetworkEndpoint(o[1]);
}

core.int buildCounterNetworkEndpointGroupsAttachEndpointsRequest = 0;
api.NetworkEndpointGroupsAttachEndpointsRequest
    buildNetworkEndpointGroupsAttachEndpointsRequest() {
  final o = api.NetworkEndpointGroupsAttachEndpointsRequest();
  buildCounterNetworkEndpointGroupsAttachEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsAttachEndpointsRequest < 3) {
    o.networkEndpoints = buildUnnamed1103();
  }
  buildCounterNetworkEndpointGroupsAttachEndpointsRequest--;
  return o;
}

void checkNetworkEndpointGroupsAttachEndpointsRequest(
    api.NetworkEndpointGroupsAttachEndpointsRequest o) {
  buildCounterNetworkEndpointGroupsAttachEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsAttachEndpointsRequest < 3) {
    checkUnnamed1103(o.networkEndpoints!);
  }
  buildCounterNetworkEndpointGroupsAttachEndpointsRequest--;
}

core.List<api.NetworkEndpoint> buildUnnamed1104() => [
      buildNetworkEndpoint(),
      buildNetworkEndpoint(),
    ];

void checkUnnamed1104(core.List<api.NetworkEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpoint(o[0]);
  checkNetworkEndpoint(o[1]);
}

core.int buildCounterNetworkEndpointGroupsDetachEndpointsRequest = 0;
api.NetworkEndpointGroupsDetachEndpointsRequest
    buildNetworkEndpointGroupsDetachEndpointsRequest() {
  final o = api.NetworkEndpointGroupsDetachEndpointsRequest();
  buildCounterNetworkEndpointGroupsDetachEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsDetachEndpointsRequest < 3) {
    o.networkEndpoints = buildUnnamed1104();
  }
  buildCounterNetworkEndpointGroupsDetachEndpointsRequest--;
  return o;
}

void checkNetworkEndpointGroupsDetachEndpointsRequest(
    api.NetworkEndpointGroupsDetachEndpointsRequest o) {
  buildCounterNetworkEndpointGroupsDetachEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsDetachEndpointsRequest < 3) {
    checkUnnamed1104(o.networkEndpoints!);
  }
  buildCounterNetworkEndpointGroupsDetachEndpointsRequest--;
}

core.int buildCounterNetworkEndpointGroupsListEndpointsRequest = 0;
api.NetworkEndpointGroupsListEndpointsRequest
    buildNetworkEndpointGroupsListEndpointsRequest() {
  final o = api.NetworkEndpointGroupsListEndpointsRequest();
  buildCounterNetworkEndpointGroupsListEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsListEndpointsRequest < 3) {
    o.healthStatus = 'foo';
  }
  buildCounterNetworkEndpointGroupsListEndpointsRequest--;
  return o;
}

void checkNetworkEndpointGroupsListEndpointsRequest(
    api.NetworkEndpointGroupsListEndpointsRequest o) {
  buildCounterNetworkEndpointGroupsListEndpointsRequest++;
  if (buildCounterNetworkEndpointGroupsListEndpointsRequest < 3) {
    unittest.expect(
      o.healthStatus!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupsListEndpointsRequest--;
}

core.List<api.NetworkEndpointWithHealthStatus> buildUnnamed1105() => [
      buildNetworkEndpointWithHealthStatus(),
      buildNetworkEndpointWithHealthStatus(),
    ];

void checkUnnamed1105(core.List<api.NetworkEndpointWithHealthStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointWithHealthStatus(o[0]);
  checkNetworkEndpointWithHealthStatus(o[1]);
}

core.int buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData = 0;
api.NetworkEndpointGroupsListNetworkEndpointsWarningData
    buildNetworkEndpointGroupsListNetworkEndpointsWarningData() {
  final o = api.NetworkEndpointGroupsListNetworkEndpointsWarningData();
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData--;
  return o;
}

void checkNetworkEndpointGroupsListNetworkEndpointsWarningData(
    api.NetworkEndpointGroupsListNetworkEndpointsWarningData o) {
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarningData--;
}

core.List<api.NetworkEndpointGroupsListNetworkEndpointsWarningData>
    buildUnnamed1106() => [
          buildNetworkEndpointGroupsListNetworkEndpointsWarningData(),
          buildNetworkEndpointGroupsListNetworkEndpointsWarningData(),
        ];

void checkUnnamed1106(
    core.List<api.NetworkEndpointGroupsListNetworkEndpointsWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroupsListNetworkEndpointsWarningData(o[0]);
  checkNetworkEndpointGroupsListNetworkEndpointsWarningData(o[1]);
}

core.int buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning = 0;
api.NetworkEndpointGroupsListNetworkEndpointsWarning
    buildNetworkEndpointGroupsListNetworkEndpointsWarning() {
  final o = api.NetworkEndpointGroupsListNetworkEndpointsWarning();
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1106();
    o.message = 'foo';
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning--;
  return o;
}

void checkNetworkEndpointGroupsListNetworkEndpointsWarning(
    api.NetworkEndpointGroupsListNetworkEndpointsWarning o) {
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1106(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpointsWarning--;
}

core.int buildCounterNetworkEndpointGroupsListNetworkEndpoints = 0;
api.NetworkEndpointGroupsListNetworkEndpoints
    buildNetworkEndpointGroupsListNetworkEndpoints() {
  final o = api.NetworkEndpointGroupsListNetworkEndpoints();
  buildCounterNetworkEndpointGroupsListNetworkEndpoints++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpoints < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1105();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.warning = buildNetworkEndpointGroupsListNetworkEndpointsWarning();
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpoints--;
  return o;
}

void checkNetworkEndpointGroupsListNetworkEndpoints(
    api.NetworkEndpointGroupsListNetworkEndpoints o) {
  buildCounterNetworkEndpointGroupsListNetworkEndpoints++;
  if (buildCounterNetworkEndpointGroupsListNetworkEndpoints < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1105(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkNetworkEndpointGroupsListNetworkEndpointsWarning(o.warning!);
  }
  buildCounterNetworkEndpointGroupsListNetworkEndpoints--;
}

core.List<api.NetworkEndpointGroup> buildUnnamed1107() => [
      buildNetworkEndpointGroup(),
      buildNetworkEndpointGroup(),
    ];

void checkUnnamed1107(core.List<api.NetworkEndpointGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroup(o[0]);
  checkNetworkEndpointGroup(o[1]);
}

core.int buildCounterNetworkEndpointGroupsScopedListWarningData = 0;
api.NetworkEndpointGroupsScopedListWarningData
    buildNetworkEndpointGroupsScopedListWarningData() {
  final o = api.NetworkEndpointGroupsScopedListWarningData();
  buildCounterNetworkEndpointGroupsScopedListWarningData++;
  if (buildCounterNetworkEndpointGroupsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNetworkEndpointGroupsScopedListWarningData--;
  return o;
}

void checkNetworkEndpointGroupsScopedListWarningData(
    api.NetworkEndpointGroupsScopedListWarningData o) {
  buildCounterNetworkEndpointGroupsScopedListWarningData++;
  if (buildCounterNetworkEndpointGroupsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupsScopedListWarningData--;
}

core.List<api.NetworkEndpointGroupsScopedListWarningData> buildUnnamed1108() =>
    [
      buildNetworkEndpointGroupsScopedListWarningData(),
      buildNetworkEndpointGroupsScopedListWarningData(),
    ];

void checkUnnamed1108(
    core.List<api.NetworkEndpointGroupsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkEndpointGroupsScopedListWarningData(o[0]);
  checkNetworkEndpointGroupsScopedListWarningData(o[1]);
}

core.int buildCounterNetworkEndpointGroupsScopedListWarning = 0;
api.NetworkEndpointGroupsScopedListWarning
    buildNetworkEndpointGroupsScopedListWarning() {
  final o = api.NetworkEndpointGroupsScopedListWarning();
  buildCounterNetworkEndpointGroupsScopedListWarning++;
  if (buildCounterNetworkEndpointGroupsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1108();
    o.message = 'foo';
  }
  buildCounterNetworkEndpointGroupsScopedListWarning--;
  return o;
}

void checkNetworkEndpointGroupsScopedListWarning(
    api.NetworkEndpointGroupsScopedListWarning o) {
  buildCounterNetworkEndpointGroupsScopedListWarning++;
  if (buildCounterNetworkEndpointGroupsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1108(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkEndpointGroupsScopedListWarning--;
}

core.int buildCounterNetworkEndpointGroupsScopedList = 0;
api.NetworkEndpointGroupsScopedList buildNetworkEndpointGroupsScopedList() {
  final o = api.NetworkEndpointGroupsScopedList();
  buildCounterNetworkEndpointGroupsScopedList++;
  if (buildCounterNetworkEndpointGroupsScopedList < 3) {
    o.networkEndpointGroups = buildUnnamed1107();
    o.warning = buildNetworkEndpointGroupsScopedListWarning();
  }
  buildCounterNetworkEndpointGroupsScopedList--;
  return o;
}

void checkNetworkEndpointGroupsScopedList(
    api.NetworkEndpointGroupsScopedList o) {
  buildCounterNetworkEndpointGroupsScopedList++;
  if (buildCounterNetworkEndpointGroupsScopedList < 3) {
    checkUnnamed1107(o.networkEndpointGroups!);
    checkNetworkEndpointGroupsScopedListWarning(o.warning!);
  }
  buildCounterNetworkEndpointGroupsScopedList--;
}

core.List<api.HealthStatusForNetworkEndpoint> buildUnnamed1109() => [
      buildHealthStatusForNetworkEndpoint(),
      buildHealthStatusForNetworkEndpoint(),
    ];

void checkUnnamed1109(core.List<api.HealthStatusForNetworkEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthStatusForNetworkEndpoint(o[0]);
  checkHealthStatusForNetworkEndpoint(o[1]);
}

core.int buildCounterNetworkEndpointWithHealthStatus = 0;
api.NetworkEndpointWithHealthStatus buildNetworkEndpointWithHealthStatus() {
  final o = api.NetworkEndpointWithHealthStatus();
  buildCounterNetworkEndpointWithHealthStatus++;
  if (buildCounterNetworkEndpointWithHealthStatus < 3) {
    o.healths = buildUnnamed1109();
    o.networkEndpoint = buildNetworkEndpoint();
  }
  buildCounterNetworkEndpointWithHealthStatus--;
  return o;
}

void checkNetworkEndpointWithHealthStatus(
    api.NetworkEndpointWithHealthStatus o) {
  buildCounterNetworkEndpointWithHealthStatus++;
  if (buildCounterNetworkEndpointWithHealthStatus < 3) {
    checkUnnamed1109(o.healths!);
    checkNetworkEndpoint(o.networkEndpoint!);
  }
  buildCounterNetworkEndpointWithHealthStatus--;
}

core.List<api.AccessConfig> buildUnnamed1110() => [
      buildAccessConfig(),
      buildAccessConfig(),
    ];

void checkUnnamed1110(core.List<api.AccessConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAccessConfig(o[0]);
  checkAccessConfig(o[1]);
}

core.List<api.AliasIpRange> buildUnnamed1111() => [
      buildAliasIpRange(),
      buildAliasIpRange(),
    ];

void checkUnnamed1111(core.List<api.AliasIpRange> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAliasIpRange(o[0]);
  checkAliasIpRange(o[1]);
}

core.List<api.AccessConfig> buildUnnamed1112() => [
      buildAccessConfig(),
      buildAccessConfig(),
    ];

void checkUnnamed1112(core.List<api.AccessConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAccessConfig(o[0]);
  checkAccessConfig(o[1]);
}

core.int buildCounterNetworkInterface = 0;
api.NetworkInterface buildNetworkInterface() {
  final o = api.NetworkInterface();
  buildCounterNetworkInterface++;
  if (buildCounterNetworkInterface < 3) {
    o.accessConfigs = buildUnnamed1110();
    o.aliasIpRanges = buildUnnamed1111();
    o.fingerprint = 'foo';
    o.ipv6AccessConfigs = buildUnnamed1112();
    o.ipv6AccessType = 'foo';
    o.ipv6Address = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.network = 'foo';
    o.networkIP = 'foo';
    o.nicType = 'foo';
    o.queueCount = 42;
    o.stackType = 'foo';
    o.subnetwork = 'foo';
  }
  buildCounterNetworkInterface--;
  return o;
}

void checkNetworkInterface(api.NetworkInterface o) {
  buildCounterNetworkInterface++;
  if (buildCounterNetworkInterface < 3) {
    checkUnnamed1110(o.accessConfigs!);
    checkUnnamed1111(o.aliasIpRanges!);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1112(o.ipv6AccessConfigs!);
    unittest.expect(
      o.ipv6AccessType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipv6Address!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.networkIP!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nicType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.queueCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.stackType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkInterface--;
}

core.List<api.Network> buildUnnamed1113() => [
      buildNetwork(),
      buildNetwork(),
    ];

void checkUnnamed1113(core.List<api.Network> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetwork(o[0]);
  checkNetwork(o[1]);
}

core.int buildCounterNetworkListWarningData = 0;
api.NetworkListWarningData buildNetworkListWarningData() {
  final o = api.NetworkListWarningData();
  buildCounterNetworkListWarningData++;
  if (buildCounterNetworkListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNetworkListWarningData--;
  return o;
}

void checkNetworkListWarningData(api.NetworkListWarningData o) {
  buildCounterNetworkListWarningData++;
  if (buildCounterNetworkListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkListWarningData--;
}

core.List<api.NetworkListWarningData> buildUnnamed1114() => [
      buildNetworkListWarningData(),
      buildNetworkListWarningData(),
    ];

void checkUnnamed1114(core.List<api.NetworkListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworkListWarningData(o[0]);
  checkNetworkListWarningData(o[1]);
}

core.int buildCounterNetworkListWarning = 0;
api.NetworkListWarning buildNetworkListWarning() {
  final o = api.NetworkListWarning();
  buildCounterNetworkListWarning++;
  if (buildCounterNetworkListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1114();
    o.message = 'foo';
  }
  buildCounterNetworkListWarning--;
  return o;
}

void checkNetworkListWarning(api.NetworkListWarning o) {
  buildCounterNetworkListWarning++;
  if (buildCounterNetworkListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1114(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkListWarning--;
}

core.int buildCounterNetworkList = 0;
api.NetworkList buildNetworkList() {
  final o = api.NetworkList();
  buildCounterNetworkList++;
  if (buildCounterNetworkList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1113();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNetworkListWarning();
  }
  buildCounterNetworkList--;
  return o;
}

void checkNetworkList(api.NetworkList o) {
  buildCounterNetworkList++;
  if (buildCounterNetworkList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1113(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNetworkListWarning(o.warning!);
  }
  buildCounterNetworkList--;
}

core.int buildCounterNetworkPeering = 0;
api.NetworkPeering buildNetworkPeering() {
  final o = api.NetworkPeering();
  buildCounterNetworkPeering++;
  if (buildCounterNetworkPeering < 3) {
    o.autoCreateRoutes = true;
    o.exchangeSubnetRoutes = true;
    o.exportCustomRoutes = true;
    o.exportSubnetRoutesWithPublicIp = true;
    o.importCustomRoutes = true;
    o.importSubnetRoutesWithPublicIp = true;
    o.name = 'foo';
    o.network = 'foo';
    o.peerMtu = 42;
    o.state = 'foo';
    o.stateDetails = 'foo';
  }
  buildCounterNetworkPeering--;
  return o;
}

void checkNetworkPeering(api.NetworkPeering o) {
  buildCounterNetworkPeering++;
  if (buildCounterNetworkPeering < 3) {
    unittest.expect(o.autoCreateRoutes!, unittest.isTrue);
    unittest.expect(o.exchangeSubnetRoutes!, unittest.isTrue);
    unittest.expect(o.exportCustomRoutes!, unittest.isTrue);
    unittest.expect(o.exportSubnetRoutesWithPublicIp!, unittest.isTrue);
    unittest.expect(o.importCustomRoutes!, unittest.isTrue);
    unittest.expect(o.importSubnetRoutesWithPublicIp!, unittest.isTrue);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerMtu!,
      unittest.equals(42),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.stateDetails!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkPeering--;
}

core.int buildCounterNetworkRoutingConfig = 0;
api.NetworkRoutingConfig buildNetworkRoutingConfig() {
  final o = api.NetworkRoutingConfig();
  buildCounterNetworkRoutingConfig++;
  if (buildCounterNetworkRoutingConfig < 3) {
    o.routingMode = 'foo';
  }
  buildCounterNetworkRoutingConfig--;
  return o;
}

void checkNetworkRoutingConfig(api.NetworkRoutingConfig o) {
  buildCounterNetworkRoutingConfig++;
  if (buildCounterNetworkRoutingConfig < 3) {
    unittest.expect(
      o.routingMode!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworkRoutingConfig--;
}

core.int buildCounterNetworksAddPeeringRequest = 0;
api.NetworksAddPeeringRequest buildNetworksAddPeeringRequest() {
  final o = api.NetworksAddPeeringRequest();
  buildCounterNetworksAddPeeringRequest++;
  if (buildCounterNetworksAddPeeringRequest < 3) {
    o.autoCreateRoutes = true;
    o.name = 'foo';
    o.networkPeering = buildNetworkPeering();
    o.peerNetwork = 'foo';
  }
  buildCounterNetworksAddPeeringRequest--;
  return o;
}

void checkNetworksAddPeeringRequest(api.NetworksAddPeeringRequest o) {
  buildCounterNetworksAddPeeringRequest++;
  if (buildCounterNetworksAddPeeringRequest < 3) {
    unittest.expect(o.autoCreateRoutes!, unittest.isTrue);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkNetworkPeering(o.networkPeering!);
    unittest.expect(
      o.peerNetwork!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworksAddPeeringRequest--;
}

core.List<api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy>
    buildUnnamed1115() => [
          buildNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(),
          buildNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(),
        ];

void checkUnnamed1115(
    core.List<api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(o[0]);
  checkNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(o[1]);
}

core.List<api.Firewall> buildUnnamed1116() => [
      buildFirewall(),
      buildFirewall(),
    ];

void checkUnnamed1116(core.List<api.Firewall> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewall(o[0]);
  checkFirewall(o[1]);
}

core.int buildCounterNetworksGetEffectiveFirewallsResponse = 0;
api.NetworksGetEffectiveFirewallsResponse
    buildNetworksGetEffectiveFirewallsResponse() {
  final o = api.NetworksGetEffectiveFirewallsResponse();
  buildCounterNetworksGetEffectiveFirewallsResponse++;
  if (buildCounterNetworksGetEffectiveFirewallsResponse < 3) {
    o.firewallPolicys = buildUnnamed1115();
    o.firewalls = buildUnnamed1116();
  }
  buildCounterNetworksGetEffectiveFirewallsResponse--;
  return o;
}

void checkNetworksGetEffectiveFirewallsResponse(
    api.NetworksGetEffectiveFirewallsResponse o) {
  buildCounterNetworksGetEffectiveFirewallsResponse++;
  if (buildCounterNetworksGetEffectiveFirewallsResponse < 3) {
    checkUnnamed1115(o.firewallPolicys!);
    checkUnnamed1116(o.firewalls!);
  }
  buildCounterNetworksGetEffectiveFirewallsResponse--;
}

core.List<api.FirewallPolicyRule> buildUnnamed1117() => [
      buildFirewallPolicyRule(),
      buildFirewallPolicyRule(),
    ];

void checkUnnamed1117(core.List<api.FirewallPolicyRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkFirewallPolicyRule(o[0]);
  checkFirewallPolicyRule(o[1]);
}

core.int
    buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy =
    0;
api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    buildNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy() {
  final o = api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy();
  buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy++;
  if (buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy <
      3) {
    o.displayName = 'foo';
    o.name = 'foo';
    o.rules = buildUnnamed1117();
    o.shortName = 'foo';
    o.type = 'foo';
  }
  buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy--;
  return o;
}

void checkNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(
    api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy o) {
  buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy++;
  if (buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy <
      3) {
    unittest.expect(
      o.displayName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1117(o.rules!);
    unittest.expect(
      o.shortName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy--;
}

core.int buildCounterNetworksRemovePeeringRequest = 0;
api.NetworksRemovePeeringRequest buildNetworksRemovePeeringRequest() {
  final o = api.NetworksRemovePeeringRequest();
  buildCounterNetworksRemovePeeringRequest++;
  if (buildCounterNetworksRemovePeeringRequest < 3) {
    o.name = 'foo';
  }
  buildCounterNetworksRemovePeeringRequest--;
  return o;
}

void checkNetworksRemovePeeringRequest(api.NetworksRemovePeeringRequest o) {
  buildCounterNetworksRemovePeeringRequest++;
  if (buildCounterNetworksRemovePeeringRequest < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
  }
  buildCounterNetworksRemovePeeringRequest--;
}

core.int buildCounterNetworksUpdatePeeringRequest = 0;
api.NetworksUpdatePeeringRequest buildNetworksUpdatePeeringRequest() {
  final o = api.NetworksUpdatePeeringRequest();
  buildCounterNetworksUpdatePeeringRequest++;
  if (buildCounterNetworksUpdatePeeringRequest < 3) {
    o.networkPeering = buildNetworkPeering();
  }
  buildCounterNetworksUpdatePeeringRequest--;
  return o;
}

void checkNetworksUpdatePeeringRequest(api.NetworksUpdatePeeringRequest o) {
  buildCounterNetworksUpdatePeeringRequest++;
  if (buildCounterNetworksUpdatePeeringRequest < 3) {
    checkNetworkPeering(o.networkPeering!);
  }
  buildCounterNetworksUpdatePeeringRequest--;
}

core.int buildCounterNodeGroup = 0;
api.NodeGroup buildNodeGroup() {
  final o = api.NodeGroup();
  buildCounterNodeGroup++;
  if (buildCounterNodeGroup < 3) {
    o.autoscalingPolicy = buildNodeGroupAutoscalingPolicy();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.locationHint = 'foo';
    o.maintenancePolicy = 'foo';
    o.maintenanceWindow = buildNodeGroupMaintenanceWindow();
    o.name = 'foo';
    o.nodeTemplate = 'foo';
    o.selfLink = 'foo';
    o.size = 42;
    o.status = 'foo';
    o.zone = 'foo';
  }
  buildCounterNodeGroup--;
  return o;
}

void checkNodeGroup(api.NodeGroup o) {
  buildCounterNodeGroup++;
  if (buildCounterNodeGroup < 3) {
    checkNodeGroupAutoscalingPolicy(o.autoscalingPolicy!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.locationHint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.maintenancePolicy!,
      unittest.equals('foo'),
    );
    checkNodeGroupMaintenanceWindow(o.maintenanceWindow!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nodeTemplate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.size!,
      unittest.equals(42),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroup--;
}

core.Map<core.String, api.NodeGroupsScopedList> buildUnnamed1118() => {
      'x': buildNodeGroupsScopedList(),
      'y': buildNodeGroupsScopedList(),
    };

void checkUnnamed1118(core.Map<core.String, api.NodeGroupsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupsScopedList(o['x']!);
  checkNodeGroupsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1119() => [
      'foo',
      'foo',
    ];

void checkUnnamed1119(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeGroupAggregatedListWarningData = 0;
api.NodeGroupAggregatedListWarningData
    buildNodeGroupAggregatedListWarningData() {
  final o = api.NodeGroupAggregatedListWarningData();
  buildCounterNodeGroupAggregatedListWarningData++;
  if (buildCounterNodeGroupAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeGroupAggregatedListWarningData--;
  return o;
}

void checkNodeGroupAggregatedListWarningData(
    api.NodeGroupAggregatedListWarningData o) {
  buildCounterNodeGroupAggregatedListWarningData++;
  if (buildCounterNodeGroupAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupAggregatedListWarningData--;
}

core.List<api.NodeGroupAggregatedListWarningData> buildUnnamed1120() => [
      buildNodeGroupAggregatedListWarningData(),
      buildNodeGroupAggregatedListWarningData(),
    ];

void checkUnnamed1120(core.List<api.NodeGroupAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupAggregatedListWarningData(o[0]);
  checkNodeGroupAggregatedListWarningData(o[1]);
}

core.int buildCounterNodeGroupAggregatedListWarning = 0;
api.NodeGroupAggregatedListWarning buildNodeGroupAggregatedListWarning() {
  final o = api.NodeGroupAggregatedListWarning();
  buildCounterNodeGroupAggregatedListWarning++;
  if (buildCounterNodeGroupAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1120();
    o.message = 'foo';
  }
  buildCounterNodeGroupAggregatedListWarning--;
  return o;
}

void checkNodeGroupAggregatedListWarning(api.NodeGroupAggregatedListWarning o) {
  buildCounterNodeGroupAggregatedListWarning++;
  if (buildCounterNodeGroupAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1120(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupAggregatedListWarning--;
}

core.int buildCounterNodeGroupAggregatedList = 0;
api.NodeGroupAggregatedList buildNodeGroupAggregatedList() {
  final o = api.NodeGroupAggregatedList();
  buildCounterNodeGroupAggregatedList++;
  if (buildCounterNodeGroupAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1118();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1119();
    o.warning = buildNodeGroupAggregatedListWarning();
  }
  buildCounterNodeGroupAggregatedList--;
  return o;
}

void checkNodeGroupAggregatedList(api.NodeGroupAggregatedList o) {
  buildCounterNodeGroupAggregatedList++;
  if (buildCounterNodeGroupAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1118(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1119(o.unreachables!);
    checkNodeGroupAggregatedListWarning(o.warning!);
  }
  buildCounterNodeGroupAggregatedList--;
}

core.int buildCounterNodeGroupAutoscalingPolicy = 0;
api.NodeGroupAutoscalingPolicy buildNodeGroupAutoscalingPolicy() {
  final o = api.NodeGroupAutoscalingPolicy();
  buildCounterNodeGroupAutoscalingPolicy++;
  if (buildCounterNodeGroupAutoscalingPolicy < 3) {
    o.maxNodes = 42;
    o.minNodes = 42;
    o.mode = 'foo';
  }
  buildCounterNodeGroupAutoscalingPolicy--;
  return o;
}

void checkNodeGroupAutoscalingPolicy(api.NodeGroupAutoscalingPolicy o) {
  buildCounterNodeGroupAutoscalingPolicy++;
  if (buildCounterNodeGroupAutoscalingPolicy < 3) {
    unittest.expect(
      o.maxNodes!,
      unittest.equals(42),
    );
    unittest.expect(
      o.minNodes!,
      unittest.equals(42),
    );
    unittest.expect(
      o.mode!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupAutoscalingPolicy--;
}

core.List<api.NodeGroup> buildUnnamed1121() => [
      buildNodeGroup(),
      buildNodeGroup(),
    ];

void checkUnnamed1121(core.List<api.NodeGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroup(o[0]);
  checkNodeGroup(o[1]);
}

core.int buildCounterNodeGroupListWarningData = 0;
api.NodeGroupListWarningData buildNodeGroupListWarningData() {
  final o = api.NodeGroupListWarningData();
  buildCounterNodeGroupListWarningData++;
  if (buildCounterNodeGroupListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeGroupListWarningData--;
  return o;
}

void checkNodeGroupListWarningData(api.NodeGroupListWarningData o) {
  buildCounterNodeGroupListWarningData++;
  if (buildCounterNodeGroupListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupListWarningData--;
}

core.List<api.NodeGroupListWarningData> buildUnnamed1122() => [
      buildNodeGroupListWarningData(),
      buildNodeGroupListWarningData(),
    ];

void checkUnnamed1122(core.List<api.NodeGroupListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupListWarningData(o[0]);
  checkNodeGroupListWarningData(o[1]);
}

core.int buildCounterNodeGroupListWarning = 0;
api.NodeGroupListWarning buildNodeGroupListWarning() {
  final o = api.NodeGroupListWarning();
  buildCounterNodeGroupListWarning++;
  if (buildCounterNodeGroupListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1122();
    o.message = 'foo';
  }
  buildCounterNodeGroupListWarning--;
  return o;
}

void checkNodeGroupListWarning(api.NodeGroupListWarning o) {
  buildCounterNodeGroupListWarning++;
  if (buildCounterNodeGroupListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1122(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupListWarning--;
}

core.int buildCounterNodeGroupList = 0;
api.NodeGroupList buildNodeGroupList() {
  final o = api.NodeGroupList();
  buildCounterNodeGroupList++;
  if (buildCounterNodeGroupList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1121();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNodeGroupListWarning();
  }
  buildCounterNodeGroupList--;
  return o;
}

void checkNodeGroupList(api.NodeGroupList o) {
  buildCounterNodeGroupList++;
  if (buildCounterNodeGroupList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1121(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNodeGroupListWarning(o.warning!);
  }
  buildCounterNodeGroupList--;
}

core.int buildCounterNodeGroupMaintenanceWindow = 0;
api.NodeGroupMaintenanceWindow buildNodeGroupMaintenanceWindow() {
  final o = api.NodeGroupMaintenanceWindow();
  buildCounterNodeGroupMaintenanceWindow++;
  if (buildCounterNodeGroupMaintenanceWindow < 3) {
    o.maintenanceDuration = buildDuration();
    o.startTime = 'foo';
  }
  buildCounterNodeGroupMaintenanceWindow--;
  return o;
}

void checkNodeGroupMaintenanceWindow(api.NodeGroupMaintenanceWindow o) {
  buildCounterNodeGroupMaintenanceWindow++;
  if (buildCounterNodeGroupMaintenanceWindow < 3) {
    checkDuration(o.maintenanceDuration!);
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupMaintenanceWindow--;
}

core.List<api.AcceleratorConfig> buildUnnamed1123() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed1123(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.List<api.LocalDisk> buildUnnamed1124() => [
      buildLocalDisk(),
      buildLocalDisk(),
    ];

void checkUnnamed1124(core.List<api.LocalDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLocalDisk(o[0]);
  checkLocalDisk(o[1]);
}

core.List<core.String> buildUnnamed1125() => [
      'foo',
      'foo',
    ];

void checkUnnamed1125(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeGroupNode = 0;
api.NodeGroupNode buildNodeGroupNode() {
  final o = api.NodeGroupNode();
  buildCounterNodeGroupNode++;
  if (buildCounterNodeGroupNode < 3) {
    o.accelerators = buildUnnamed1123();
    o.cpuOvercommitType = 'foo';
    o.disks = buildUnnamed1124();
    o.instances = buildUnnamed1125();
    o.name = 'foo';
    o.nodeType = 'foo';
    o.satisfiesPzs = true;
    o.serverBinding = buildServerBinding();
    o.serverId = 'foo';
    o.status = 'foo';
  }
  buildCounterNodeGroupNode--;
  return o;
}

void checkNodeGroupNode(api.NodeGroupNode o) {
  buildCounterNodeGroupNode++;
  if (buildCounterNodeGroupNode < 3) {
    checkUnnamed1123(o.accelerators!);
    unittest.expect(
      o.cpuOvercommitType!,
      unittest.equals('foo'),
    );
    checkUnnamed1124(o.disks!);
    checkUnnamed1125(o.instances!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nodeType!,
      unittest.equals('foo'),
    );
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    checkServerBinding(o.serverBinding!);
    unittest.expect(
      o.serverId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupNode--;
}

core.int buildCounterNodeGroupsAddNodesRequest = 0;
api.NodeGroupsAddNodesRequest buildNodeGroupsAddNodesRequest() {
  final o = api.NodeGroupsAddNodesRequest();
  buildCounterNodeGroupsAddNodesRequest++;
  if (buildCounterNodeGroupsAddNodesRequest < 3) {
    o.additionalNodeCount = 42;
  }
  buildCounterNodeGroupsAddNodesRequest--;
  return o;
}

void checkNodeGroupsAddNodesRequest(api.NodeGroupsAddNodesRequest o) {
  buildCounterNodeGroupsAddNodesRequest++;
  if (buildCounterNodeGroupsAddNodesRequest < 3) {
    unittest.expect(
      o.additionalNodeCount!,
      unittest.equals(42),
    );
  }
  buildCounterNodeGroupsAddNodesRequest--;
}

core.List<core.String> buildUnnamed1126() => [
      'foo',
      'foo',
    ];

void checkUnnamed1126(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeGroupsDeleteNodesRequest = 0;
api.NodeGroupsDeleteNodesRequest buildNodeGroupsDeleteNodesRequest() {
  final o = api.NodeGroupsDeleteNodesRequest();
  buildCounterNodeGroupsDeleteNodesRequest++;
  if (buildCounterNodeGroupsDeleteNodesRequest < 3) {
    o.nodes = buildUnnamed1126();
  }
  buildCounterNodeGroupsDeleteNodesRequest--;
  return o;
}

void checkNodeGroupsDeleteNodesRequest(api.NodeGroupsDeleteNodesRequest o) {
  buildCounterNodeGroupsDeleteNodesRequest++;
  if (buildCounterNodeGroupsDeleteNodesRequest < 3) {
    checkUnnamed1126(o.nodes!);
  }
  buildCounterNodeGroupsDeleteNodesRequest--;
}

core.List<api.NodeGroupNode> buildUnnamed1127() => [
      buildNodeGroupNode(),
      buildNodeGroupNode(),
    ];

void checkUnnamed1127(core.List<api.NodeGroupNode> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupNode(o[0]);
  checkNodeGroupNode(o[1]);
}

core.int buildCounterNodeGroupsListNodesWarningData = 0;
api.NodeGroupsListNodesWarningData buildNodeGroupsListNodesWarningData() {
  final o = api.NodeGroupsListNodesWarningData();
  buildCounterNodeGroupsListNodesWarningData++;
  if (buildCounterNodeGroupsListNodesWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeGroupsListNodesWarningData--;
  return o;
}

void checkNodeGroupsListNodesWarningData(api.NodeGroupsListNodesWarningData o) {
  buildCounterNodeGroupsListNodesWarningData++;
  if (buildCounterNodeGroupsListNodesWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupsListNodesWarningData--;
}

core.List<api.NodeGroupsListNodesWarningData> buildUnnamed1128() => [
      buildNodeGroupsListNodesWarningData(),
      buildNodeGroupsListNodesWarningData(),
    ];

void checkUnnamed1128(core.List<api.NodeGroupsListNodesWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupsListNodesWarningData(o[0]);
  checkNodeGroupsListNodesWarningData(o[1]);
}

core.int buildCounterNodeGroupsListNodesWarning = 0;
api.NodeGroupsListNodesWarning buildNodeGroupsListNodesWarning() {
  final o = api.NodeGroupsListNodesWarning();
  buildCounterNodeGroupsListNodesWarning++;
  if (buildCounterNodeGroupsListNodesWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1128();
    o.message = 'foo';
  }
  buildCounterNodeGroupsListNodesWarning--;
  return o;
}

void checkNodeGroupsListNodesWarning(api.NodeGroupsListNodesWarning o) {
  buildCounterNodeGroupsListNodesWarning++;
  if (buildCounterNodeGroupsListNodesWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1128(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupsListNodesWarning--;
}

core.int buildCounterNodeGroupsListNodes = 0;
api.NodeGroupsListNodes buildNodeGroupsListNodes() {
  final o = api.NodeGroupsListNodes();
  buildCounterNodeGroupsListNodes++;
  if (buildCounterNodeGroupsListNodes < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1127();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNodeGroupsListNodesWarning();
  }
  buildCounterNodeGroupsListNodes--;
  return o;
}

void checkNodeGroupsListNodes(api.NodeGroupsListNodes o) {
  buildCounterNodeGroupsListNodes++;
  if (buildCounterNodeGroupsListNodes < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1127(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNodeGroupsListNodesWarning(o.warning!);
  }
  buildCounterNodeGroupsListNodes--;
}

core.List<api.NodeGroup> buildUnnamed1129() => [
      buildNodeGroup(),
      buildNodeGroup(),
    ];

void checkUnnamed1129(core.List<api.NodeGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroup(o[0]);
  checkNodeGroup(o[1]);
}

core.int buildCounterNodeGroupsScopedListWarningData = 0;
api.NodeGroupsScopedListWarningData buildNodeGroupsScopedListWarningData() {
  final o = api.NodeGroupsScopedListWarningData();
  buildCounterNodeGroupsScopedListWarningData++;
  if (buildCounterNodeGroupsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeGroupsScopedListWarningData--;
  return o;
}

void checkNodeGroupsScopedListWarningData(
    api.NodeGroupsScopedListWarningData o) {
  buildCounterNodeGroupsScopedListWarningData++;
  if (buildCounterNodeGroupsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupsScopedListWarningData--;
}

core.List<api.NodeGroupsScopedListWarningData> buildUnnamed1130() => [
      buildNodeGroupsScopedListWarningData(),
      buildNodeGroupsScopedListWarningData(),
    ];

void checkUnnamed1130(core.List<api.NodeGroupsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeGroupsScopedListWarningData(o[0]);
  checkNodeGroupsScopedListWarningData(o[1]);
}

core.int buildCounterNodeGroupsScopedListWarning = 0;
api.NodeGroupsScopedListWarning buildNodeGroupsScopedListWarning() {
  final o = api.NodeGroupsScopedListWarning();
  buildCounterNodeGroupsScopedListWarning++;
  if (buildCounterNodeGroupsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1130();
    o.message = 'foo';
  }
  buildCounterNodeGroupsScopedListWarning--;
  return o;
}

void checkNodeGroupsScopedListWarning(api.NodeGroupsScopedListWarning o) {
  buildCounterNodeGroupsScopedListWarning++;
  if (buildCounterNodeGroupsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1130(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupsScopedListWarning--;
}

core.int buildCounterNodeGroupsScopedList = 0;
api.NodeGroupsScopedList buildNodeGroupsScopedList() {
  final o = api.NodeGroupsScopedList();
  buildCounterNodeGroupsScopedList++;
  if (buildCounterNodeGroupsScopedList < 3) {
    o.nodeGroups = buildUnnamed1129();
    o.warning = buildNodeGroupsScopedListWarning();
  }
  buildCounterNodeGroupsScopedList--;
  return o;
}

void checkNodeGroupsScopedList(api.NodeGroupsScopedList o) {
  buildCounterNodeGroupsScopedList++;
  if (buildCounterNodeGroupsScopedList < 3) {
    checkUnnamed1129(o.nodeGroups!);
    checkNodeGroupsScopedListWarning(o.warning!);
  }
  buildCounterNodeGroupsScopedList--;
}

core.int buildCounterNodeGroupsSetNodeTemplateRequest = 0;
api.NodeGroupsSetNodeTemplateRequest buildNodeGroupsSetNodeTemplateRequest() {
  final o = api.NodeGroupsSetNodeTemplateRequest();
  buildCounterNodeGroupsSetNodeTemplateRequest++;
  if (buildCounterNodeGroupsSetNodeTemplateRequest < 3) {
    o.nodeTemplate = 'foo';
  }
  buildCounterNodeGroupsSetNodeTemplateRequest--;
  return o;
}

void checkNodeGroupsSetNodeTemplateRequest(
    api.NodeGroupsSetNodeTemplateRequest o) {
  buildCounterNodeGroupsSetNodeTemplateRequest++;
  if (buildCounterNodeGroupsSetNodeTemplateRequest < 3) {
    unittest.expect(
      o.nodeTemplate!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeGroupsSetNodeTemplateRequest--;
}

core.List<api.AcceleratorConfig> buildUnnamed1131() => [
      buildAcceleratorConfig(),
      buildAcceleratorConfig(),
    ];

void checkUnnamed1131(core.List<api.AcceleratorConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAcceleratorConfig(o[0]);
  checkAcceleratorConfig(o[1]);
}

core.List<api.LocalDisk> buildUnnamed1132() => [
      buildLocalDisk(),
      buildLocalDisk(),
    ];

void checkUnnamed1132(core.List<api.LocalDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLocalDisk(o[0]);
  checkLocalDisk(o[1]);
}

core.Map<core.String, core.String> buildUnnamed1133() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1133(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeTemplate = 0;
api.NodeTemplate buildNodeTemplate() {
  final o = api.NodeTemplate();
  buildCounterNodeTemplate++;
  if (buildCounterNodeTemplate < 3) {
    o.accelerators = buildUnnamed1131();
    o.cpuOvercommitType = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.disks = buildUnnamed1132();
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.nodeAffinityLabels = buildUnnamed1133();
    o.nodeType = 'foo';
    o.nodeTypeFlexibility = buildNodeTemplateNodeTypeFlexibility();
    o.region = 'foo';
    o.selfLink = 'foo';
    o.serverBinding = buildServerBinding();
    o.status = 'foo';
    o.statusMessage = 'foo';
  }
  buildCounterNodeTemplate--;
  return o;
}

void checkNodeTemplate(api.NodeTemplate o) {
  buildCounterNodeTemplate++;
  if (buildCounterNodeTemplate < 3) {
    checkUnnamed1131(o.accelerators!);
    unittest.expect(
      o.cpuOvercommitType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1132(o.disks!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1133(o.nodeAffinityLabels!);
    unittest.expect(
      o.nodeType!,
      unittest.equals('foo'),
    );
    checkNodeTemplateNodeTypeFlexibility(o.nodeTypeFlexibility!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkServerBinding(o.serverBinding!);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.statusMessage!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplate--;
}

core.Map<core.String, api.NodeTemplatesScopedList> buildUnnamed1134() => {
      'x': buildNodeTemplatesScopedList(),
      'y': buildNodeTemplatesScopedList(),
    };

void checkUnnamed1134(core.Map<core.String, api.NodeTemplatesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplatesScopedList(o['x']!);
  checkNodeTemplatesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1135() => [
      'foo',
      'foo',
    ];

void checkUnnamed1135(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeTemplateAggregatedListWarningData = 0;
api.NodeTemplateAggregatedListWarningData
    buildNodeTemplateAggregatedListWarningData() {
  final o = api.NodeTemplateAggregatedListWarningData();
  buildCounterNodeTemplateAggregatedListWarningData++;
  if (buildCounterNodeTemplateAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTemplateAggregatedListWarningData--;
  return o;
}

void checkNodeTemplateAggregatedListWarningData(
    api.NodeTemplateAggregatedListWarningData o) {
  buildCounterNodeTemplateAggregatedListWarningData++;
  if (buildCounterNodeTemplateAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplateAggregatedListWarningData--;
}

core.List<api.NodeTemplateAggregatedListWarningData> buildUnnamed1136() => [
      buildNodeTemplateAggregatedListWarningData(),
      buildNodeTemplateAggregatedListWarningData(),
    ];

void checkUnnamed1136(core.List<api.NodeTemplateAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplateAggregatedListWarningData(o[0]);
  checkNodeTemplateAggregatedListWarningData(o[1]);
}

core.int buildCounterNodeTemplateAggregatedListWarning = 0;
api.NodeTemplateAggregatedListWarning buildNodeTemplateAggregatedListWarning() {
  final o = api.NodeTemplateAggregatedListWarning();
  buildCounterNodeTemplateAggregatedListWarning++;
  if (buildCounterNodeTemplateAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1136();
    o.message = 'foo';
  }
  buildCounterNodeTemplateAggregatedListWarning--;
  return o;
}

void checkNodeTemplateAggregatedListWarning(
    api.NodeTemplateAggregatedListWarning o) {
  buildCounterNodeTemplateAggregatedListWarning++;
  if (buildCounterNodeTemplateAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1136(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplateAggregatedListWarning--;
}

core.int buildCounterNodeTemplateAggregatedList = 0;
api.NodeTemplateAggregatedList buildNodeTemplateAggregatedList() {
  final o = api.NodeTemplateAggregatedList();
  buildCounterNodeTemplateAggregatedList++;
  if (buildCounterNodeTemplateAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1134();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1135();
    o.warning = buildNodeTemplateAggregatedListWarning();
  }
  buildCounterNodeTemplateAggregatedList--;
  return o;
}

void checkNodeTemplateAggregatedList(api.NodeTemplateAggregatedList o) {
  buildCounterNodeTemplateAggregatedList++;
  if (buildCounterNodeTemplateAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1134(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1135(o.unreachables!);
    checkNodeTemplateAggregatedListWarning(o.warning!);
  }
  buildCounterNodeTemplateAggregatedList--;
}

core.List<api.NodeTemplate> buildUnnamed1137() => [
      buildNodeTemplate(),
      buildNodeTemplate(),
    ];

void checkUnnamed1137(core.List<api.NodeTemplate> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplate(o[0]);
  checkNodeTemplate(o[1]);
}

core.int buildCounterNodeTemplateListWarningData = 0;
api.NodeTemplateListWarningData buildNodeTemplateListWarningData() {
  final o = api.NodeTemplateListWarningData();
  buildCounterNodeTemplateListWarningData++;
  if (buildCounterNodeTemplateListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTemplateListWarningData--;
  return o;
}

void checkNodeTemplateListWarningData(api.NodeTemplateListWarningData o) {
  buildCounterNodeTemplateListWarningData++;
  if (buildCounterNodeTemplateListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplateListWarningData--;
}

core.List<api.NodeTemplateListWarningData> buildUnnamed1138() => [
      buildNodeTemplateListWarningData(),
      buildNodeTemplateListWarningData(),
    ];

void checkUnnamed1138(core.List<api.NodeTemplateListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplateListWarningData(o[0]);
  checkNodeTemplateListWarningData(o[1]);
}

core.int buildCounterNodeTemplateListWarning = 0;
api.NodeTemplateListWarning buildNodeTemplateListWarning() {
  final o = api.NodeTemplateListWarning();
  buildCounterNodeTemplateListWarning++;
  if (buildCounterNodeTemplateListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1138();
    o.message = 'foo';
  }
  buildCounterNodeTemplateListWarning--;
  return o;
}

void checkNodeTemplateListWarning(api.NodeTemplateListWarning o) {
  buildCounterNodeTemplateListWarning++;
  if (buildCounterNodeTemplateListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1138(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplateListWarning--;
}

core.int buildCounterNodeTemplateList = 0;
api.NodeTemplateList buildNodeTemplateList() {
  final o = api.NodeTemplateList();
  buildCounterNodeTemplateList++;
  if (buildCounterNodeTemplateList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1137();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNodeTemplateListWarning();
  }
  buildCounterNodeTemplateList--;
  return o;
}

void checkNodeTemplateList(api.NodeTemplateList o) {
  buildCounterNodeTemplateList++;
  if (buildCounterNodeTemplateList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1137(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNodeTemplateListWarning(o.warning!);
  }
  buildCounterNodeTemplateList--;
}

core.int buildCounterNodeTemplateNodeTypeFlexibility = 0;
api.NodeTemplateNodeTypeFlexibility buildNodeTemplateNodeTypeFlexibility() {
  final o = api.NodeTemplateNodeTypeFlexibility();
  buildCounterNodeTemplateNodeTypeFlexibility++;
  if (buildCounterNodeTemplateNodeTypeFlexibility < 3) {
    o.cpus = 'foo';
    o.localSsd = 'foo';
    o.memory = 'foo';
  }
  buildCounterNodeTemplateNodeTypeFlexibility--;
  return o;
}

void checkNodeTemplateNodeTypeFlexibility(
    api.NodeTemplateNodeTypeFlexibility o) {
  buildCounterNodeTemplateNodeTypeFlexibility++;
  if (buildCounterNodeTemplateNodeTypeFlexibility < 3) {
    unittest.expect(
      o.cpus!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.localSsd!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.memory!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplateNodeTypeFlexibility--;
}

core.List<api.NodeTemplate> buildUnnamed1139() => [
      buildNodeTemplate(),
      buildNodeTemplate(),
    ];

void checkUnnamed1139(core.List<api.NodeTemplate> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplate(o[0]);
  checkNodeTemplate(o[1]);
}

core.int buildCounterNodeTemplatesScopedListWarningData = 0;
api.NodeTemplatesScopedListWarningData
    buildNodeTemplatesScopedListWarningData() {
  final o = api.NodeTemplatesScopedListWarningData();
  buildCounterNodeTemplatesScopedListWarningData++;
  if (buildCounterNodeTemplatesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTemplatesScopedListWarningData--;
  return o;
}

void checkNodeTemplatesScopedListWarningData(
    api.NodeTemplatesScopedListWarningData o) {
  buildCounterNodeTemplatesScopedListWarningData++;
  if (buildCounterNodeTemplatesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplatesScopedListWarningData--;
}

core.List<api.NodeTemplatesScopedListWarningData> buildUnnamed1140() => [
      buildNodeTemplatesScopedListWarningData(),
      buildNodeTemplatesScopedListWarningData(),
    ];

void checkUnnamed1140(core.List<api.NodeTemplatesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTemplatesScopedListWarningData(o[0]);
  checkNodeTemplatesScopedListWarningData(o[1]);
}

core.int buildCounterNodeTemplatesScopedListWarning = 0;
api.NodeTemplatesScopedListWarning buildNodeTemplatesScopedListWarning() {
  final o = api.NodeTemplatesScopedListWarning();
  buildCounterNodeTemplatesScopedListWarning++;
  if (buildCounterNodeTemplatesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1140();
    o.message = 'foo';
  }
  buildCounterNodeTemplatesScopedListWarning--;
  return o;
}

void checkNodeTemplatesScopedListWarning(api.NodeTemplatesScopedListWarning o) {
  buildCounterNodeTemplatesScopedListWarning++;
  if (buildCounterNodeTemplatesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1140(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTemplatesScopedListWarning--;
}

core.int buildCounterNodeTemplatesScopedList = 0;
api.NodeTemplatesScopedList buildNodeTemplatesScopedList() {
  final o = api.NodeTemplatesScopedList();
  buildCounterNodeTemplatesScopedList++;
  if (buildCounterNodeTemplatesScopedList < 3) {
    o.nodeTemplates = buildUnnamed1139();
    o.warning = buildNodeTemplatesScopedListWarning();
  }
  buildCounterNodeTemplatesScopedList--;
  return o;
}

void checkNodeTemplatesScopedList(api.NodeTemplatesScopedList o) {
  buildCounterNodeTemplatesScopedList++;
  if (buildCounterNodeTemplatesScopedList < 3) {
    checkUnnamed1139(o.nodeTemplates!);
    checkNodeTemplatesScopedListWarning(o.warning!);
  }
  buildCounterNodeTemplatesScopedList--;
}

core.int buildCounterNodeType = 0;
api.NodeType buildNodeType() {
  final o = api.NodeType();
  buildCounterNodeType++;
  if (buildCounterNodeType < 3) {
    o.cpuPlatform = 'foo';
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.guestCpus = 42;
    o.id = 'foo';
    o.kind = 'foo';
    o.localSsdGb = 42;
    o.memoryMb = 42;
    o.name = 'foo';
    o.selfLink = 'foo';
    o.zone = 'foo';
  }
  buildCounterNodeType--;
  return o;
}

void checkNodeType(api.NodeType o) {
  buildCounterNodeType++;
  if (buildCounterNodeType < 3) {
    unittest.expect(
      o.cpuPlatform!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.guestCpus!,
      unittest.equals(42),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.localSsdGb!,
      unittest.equals(42),
    );
    unittest.expect(
      o.memoryMb!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeType--;
}

core.Map<core.String, api.NodeTypesScopedList> buildUnnamed1141() => {
      'x': buildNodeTypesScopedList(),
      'y': buildNodeTypesScopedList(),
    };

void checkUnnamed1141(core.Map<core.String, api.NodeTypesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTypesScopedList(o['x']!);
  checkNodeTypesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1142() => [
      'foo',
      'foo',
    ];

void checkUnnamed1142(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterNodeTypeAggregatedListWarningData = 0;
api.NodeTypeAggregatedListWarningData buildNodeTypeAggregatedListWarningData() {
  final o = api.NodeTypeAggregatedListWarningData();
  buildCounterNodeTypeAggregatedListWarningData++;
  if (buildCounterNodeTypeAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTypeAggregatedListWarningData--;
  return o;
}

void checkNodeTypeAggregatedListWarningData(
    api.NodeTypeAggregatedListWarningData o) {
  buildCounterNodeTypeAggregatedListWarningData++;
  if (buildCounterNodeTypeAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypeAggregatedListWarningData--;
}

core.List<api.NodeTypeAggregatedListWarningData> buildUnnamed1143() => [
      buildNodeTypeAggregatedListWarningData(),
      buildNodeTypeAggregatedListWarningData(),
    ];

void checkUnnamed1143(core.List<api.NodeTypeAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTypeAggregatedListWarningData(o[0]);
  checkNodeTypeAggregatedListWarningData(o[1]);
}

core.int buildCounterNodeTypeAggregatedListWarning = 0;
api.NodeTypeAggregatedListWarning buildNodeTypeAggregatedListWarning() {
  final o = api.NodeTypeAggregatedListWarning();
  buildCounterNodeTypeAggregatedListWarning++;
  if (buildCounterNodeTypeAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1143();
    o.message = 'foo';
  }
  buildCounterNodeTypeAggregatedListWarning--;
  return o;
}

void checkNodeTypeAggregatedListWarning(api.NodeTypeAggregatedListWarning o) {
  buildCounterNodeTypeAggregatedListWarning++;
  if (buildCounterNodeTypeAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1143(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypeAggregatedListWarning--;
}

core.int buildCounterNodeTypeAggregatedList = 0;
api.NodeTypeAggregatedList buildNodeTypeAggregatedList() {
  final o = api.NodeTypeAggregatedList();
  buildCounterNodeTypeAggregatedList++;
  if (buildCounterNodeTypeAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1141();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1142();
    o.warning = buildNodeTypeAggregatedListWarning();
  }
  buildCounterNodeTypeAggregatedList--;
  return o;
}

void checkNodeTypeAggregatedList(api.NodeTypeAggregatedList o) {
  buildCounterNodeTypeAggregatedList++;
  if (buildCounterNodeTypeAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1141(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1142(o.unreachables!);
    checkNodeTypeAggregatedListWarning(o.warning!);
  }
  buildCounterNodeTypeAggregatedList--;
}

core.List<api.NodeType> buildUnnamed1144() => [
      buildNodeType(),
      buildNodeType(),
    ];

void checkUnnamed1144(core.List<api.NodeType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeType(o[0]);
  checkNodeType(o[1]);
}

core.int buildCounterNodeTypeListWarningData = 0;
api.NodeTypeListWarningData buildNodeTypeListWarningData() {
  final o = api.NodeTypeListWarningData();
  buildCounterNodeTypeListWarningData++;
  if (buildCounterNodeTypeListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTypeListWarningData--;
  return o;
}

void checkNodeTypeListWarningData(api.NodeTypeListWarningData o) {
  buildCounterNodeTypeListWarningData++;
  if (buildCounterNodeTypeListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypeListWarningData--;
}

core.List<api.NodeTypeListWarningData> buildUnnamed1145() => [
      buildNodeTypeListWarningData(),
      buildNodeTypeListWarningData(),
    ];

void checkUnnamed1145(core.List<api.NodeTypeListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTypeListWarningData(o[0]);
  checkNodeTypeListWarningData(o[1]);
}

core.int buildCounterNodeTypeListWarning = 0;
api.NodeTypeListWarning buildNodeTypeListWarning() {
  final o = api.NodeTypeListWarning();
  buildCounterNodeTypeListWarning++;
  if (buildCounterNodeTypeListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1145();
    o.message = 'foo';
  }
  buildCounterNodeTypeListWarning--;
  return o;
}

void checkNodeTypeListWarning(api.NodeTypeListWarning o) {
  buildCounterNodeTypeListWarning++;
  if (buildCounterNodeTypeListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1145(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypeListWarning--;
}

core.int buildCounterNodeTypeList = 0;
api.NodeTypeList buildNodeTypeList() {
  final o = api.NodeTypeList();
  buildCounterNodeTypeList++;
  if (buildCounterNodeTypeList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1144();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNodeTypeListWarning();
  }
  buildCounterNodeTypeList--;
  return o;
}

void checkNodeTypeList(api.NodeTypeList o) {
  buildCounterNodeTypeList++;
  if (buildCounterNodeTypeList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1144(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNodeTypeListWarning(o.warning!);
  }
  buildCounterNodeTypeList--;
}

core.List<api.NodeType> buildUnnamed1146() => [
      buildNodeType(),
      buildNodeType(),
    ];

void checkUnnamed1146(core.List<api.NodeType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeType(o[0]);
  checkNodeType(o[1]);
}

core.int buildCounterNodeTypesScopedListWarningData = 0;
api.NodeTypesScopedListWarningData buildNodeTypesScopedListWarningData() {
  final o = api.NodeTypesScopedListWarningData();
  buildCounterNodeTypesScopedListWarningData++;
  if (buildCounterNodeTypesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNodeTypesScopedListWarningData--;
  return o;
}

void checkNodeTypesScopedListWarningData(api.NodeTypesScopedListWarningData o) {
  buildCounterNodeTypesScopedListWarningData++;
  if (buildCounterNodeTypesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypesScopedListWarningData--;
}

core.List<api.NodeTypesScopedListWarningData> buildUnnamed1147() => [
      buildNodeTypesScopedListWarningData(),
      buildNodeTypesScopedListWarningData(),
    ];

void checkUnnamed1147(core.List<api.NodeTypesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNodeTypesScopedListWarningData(o[0]);
  checkNodeTypesScopedListWarningData(o[1]);
}

core.int buildCounterNodeTypesScopedListWarning = 0;
api.NodeTypesScopedListWarning buildNodeTypesScopedListWarning() {
  final o = api.NodeTypesScopedListWarning();
  buildCounterNodeTypesScopedListWarning++;
  if (buildCounterNodeTypesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1147();
    o.message = 'foo';
  }
  buildCounterNodeTypesScopedListWarning--;
  return o;
}

void checkNodeTypesScopedListWarning(api.NodeTypesScopedListWarning o) {
  buildCounterNodeTypesScopedListWarning++;
  if (buildCounterNodeTypesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1147(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNodeTypesScopedListWarning--;
}

core.int buildCounterNodeTypesScopedList = 0;
api.NodeTypesScopedList buildNodeTypesScopedList() {
  final o = api.NodeTypesScopedList();
  buildCounterNodeTypesScopedList++;
  if (buildCounterNodeTypesScopedList < 3) {
    o.nodeTypes = buildUnnamed1146();
    o.warning = buildNodeTypesScopedListWarning();
  }
  buildCounterNodeTypesScopedList--;
  return o;
}

void checkNodeTypesScopedList(api.NodeTypesScopedList o) {
  buildCounterNodeTypesScopedList++;
  if (buildCounterNodeTypesScopedList < 3) {
    checkUnnamed1146(o.nodeTypes!);
    checkNodeTypesScopedListWarning(o.warning!);
  }
  buildCounterNodeTypesScopedList--;
}

core.int buildCounterNotificationEndpoint = 0;
api.NotificationEndpoint buildNotificationEndpoint() {
  final o = api.NotificationEndpoint();
  buildCounterNotificationEndpoint++;
  if (buildCounterNotificationEndpoint < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.grpcSettings = buildNotificationEndpointGrpcSettings();
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterNotificationEndpoint--;
  return o;
}

void checkNotificationEndpoint(api.NotificationEndpoint o) {
  buildCounterNotificationEndpoint++;
  if (buildCounterNotificationEndpoint < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkNotificationEndpointGrpcSettings(o.grpcSettings!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterNotificationEndpoint--;
}

core.int buildCounterNotificationEndpointGrpcSettings = 0;
api.NotificationEndpointGrpcSettings buildNotificationEndpointGrpcSettings() {
  final o = api.NotificationEndpointGrpcSettings();
  buildCounterNotificationEndpointGrpcSettings++;
  if (buildCounterNotificationEndpointGrpcSettings < 3) {
    o.authority = 'foo';
    o.endpoint = 'foo';
    o.payloadName = 'foo';
    o.resendInterval = buildDuration();
    o.retryDurationSec = 42;
  }
  buildCounterNotificationEndpointGrpcSettings--;
  return o;
}

void checkNotificationEndpointGrpcSettings(
    api.NotificationEndpointGrpcSettings o) {
  buildCounterNotificationEndpointGrpcSettings++;
  if (buildCounterNotificationEndpointGrpcSettings < 3) {
    unittest.expect(
      o.authority!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.endpoint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.payloadName!,
      unittest.equals('foo'),
    );
    checkDuration(o.resendInterval!);
    unittest.expect(
      o.retryDurationSec!,
      unittest.equals(42),
    );
  }
  buildCounterNotificationEndpointGrpcSettings--;
}

core.List<api.NotificationEndpoint> buildUnnamed1148() => [
      buildNotificationEndpoint(),
      buildNotificationEndpoint(),
    ];

void checkUnnamed1148(core.List<api.NotificationEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNotificationEndpoint(o[0]);
  checkNotificationEndpoint(o[1]);
}

core.int buildCounterNotificationEndpointListWarningData = 0;
api.NotificationEndpointListWarningData
    buildNotificationEndpointListWarningData() {
  final o = api.NotificationEndpointListWarningData();
  buildCounterNotificationEndpointListWarningData++;
  if (buildCounterNotificationEndpointListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterNotificationEndpointListWarningData--;
  return o;
}

void checkNotificationEndpointListWarningData(
    api.NotificationEndpointListWarningData o) {
  buildCounterNotificationEndpointListWarningData++;
  if (buildCounterNotificationEndpointListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterNotificationEndpointListWarningData--;
}

core.List<api.NotificationEndpointListWarningData> buildUnnamed1149() => [
      buildNotificationEndpointListWarningData(),
      buildNotificationEndpointListWarningData(),
    ];

void checkUnnamed1149(core.List<api.NotificationEndpointListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNotificationEndpointListWarningData(o[0]);
  checkNotificationEndpointListWarningData(o[1]);
}

core.int buildCounterNotificationEndpointListWarning = 0;
api.NotificationEndpointListWarning buildNotificationEndpointListWarning() {
  final o = api.NotificationEndpointListWarning();
  buildCounterNotificationEndpointListWarning++;
  if (buildCounterNotificationEndpointListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1149();
    o.message = 'foo';
  }
  buildCounterNotificationEndpointListWarning--;
  return o;
}

void checkNotificationEndpointListWarning(
    api.NotificationEndpointListWarning o) {
  buildCounterNotificationEndpointListWarning++;
  if (buildCounterNotificationEndpointListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1149(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterNotificationEndpointListWarning--;
}

core.int buildCounterNotificationEndpointList = 0;
api.NotificationEndpointList buildNotificationEndpointList() {
  final o = api.NotificationEndpointList();
  buildCounterNotificationEndpointList++;
  if (buildCounterNotificationEndpointList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1148();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildNotificationEndpointListWarning();
  }
  buildCounterNotificationEndpointList--;
  return o;
}

void checkNotificationEndpointList(api.NotificationEndpointList o) {
  buildCounterNotificationEndpointList++;
  if (buildCounterNotificationEndpointList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1148(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkNotificationEndpointListWarning(o.warning!);
  }
  buildCounterNotificationEndpointList--;
}

core.int buildCounterOperationErrorErrors = 0;
api.OperationErrorErrors buildOperationErrorErrors() {
  final o = api.OperationErrorErrors();
  buildCounterOperationErrorErrors++;
  if (buildCounterOperationErrorErrors < 3) {
    o.code = 'foo';
    o.location = 'foo';
    o.message = 'foo';
  }
  buildCounterOperationErrorErrors--;
  return o;
}

void checkOperationErrorErrors(api.OperationErrorErrors o) {
  buildCounterOperationErrorErrors++;
  if (buildCounterOperationErrorErrors < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.location!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationErrorErrors--;
}

core.List<api.OperationErrorErrors> buildUnnamed1150() => [
      buildOperationErrorErrors(),
      buildOperationErrorErrors(),
    ];

void checkUnnamed1150(core.List<api.OperationErrorErrors> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationErrorErrors(o[0]);
  checkOperationErrorErrors(o[1]);
}

core.int buildCounterOperationError = 0;
api.OperationError buildOperationError() {
  final o = api.OperationError();
  buildCounterOperationError++;
  if (buildCounterOperationError < 3) {
    o.errors = buildUnnamed1150();
  }
  buildCounterOperationError--;
  return o;
}

void checkOperationError(api.OperationError o) {
  buildCounterOperationError++;
  if (buildCounterOperationError < 3) {
    checkUnnamed1150(o.errors!);
  }
  buildCounterOperationError--;
}

core.int buildCounterOperationWarningsData = 0;
api.OperationWarningsData buildOperationWarningsData() {
  final o = api.OperationWarningsData();
  buildCounterOperationWarningsData++;
  if (buildCounterOperationWarningsData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterOperationWarningsData--;
  return o;
}

void checkOperationWarningsData(api.OperationWarningsData o) {
  buildCounterOperationWarningsData++;
  if (buildCounterOperationWarningsData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationWarningsData--;
}

core.List<api.OperationWarningsData> buildUnnamed1151() => [
      buildOperationWarningsData(),
      buildOperationWarningsData(),
    ];

void checkUnnamed1151(core.List<api.OperationWarningsData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationWarningsData(o[0]);
  checkOperationWarningsData(o[1]);
}

core.int buildCounterOperationWarnings = 0;
api.OperationWarnings buildOperationWarnings() {
  final o = api.OperationWarnings();
  buildCounterOperationWarnings++;
  if (buildCounterOperationWarnings < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1151();
    o.message = 'foo';
  }
  buildCounterOperationWarnings--;
  return o;
}

void checkOperationWarnings(api.OperationWarnings o) {
  buildCounterOperationWarnings++;
  if (buildCounterOperationWarnings < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1151(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationWarnings--;
}

core.List<api.OperationWarnings> buildUnnamed1152() => [
      buildOperationWarnings(),
      buildOperationWarnings(),
    ];

void checkUnnamed1152(core.List<api.OperationWarnings> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationWarnings(o[0]);
  checkOperationWarnings(o[1]);
}

core.int buildCounterOperation = 0;
api.Operation buildOperation() {
  final o = api.Operation();
  buildCounterOperation++;
  if (buildCounterOperation < 3) {
    o.clientOperationId = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.endTime = 'foo';
    o.error = buildOperationError();
    o.httpErrorMessage = 'foo';
    o.httpErrorStatusCode = 42;
    o.id = 'foo';
    o.insertTime = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.operationGroupId = 'foo';
    o.operationType = 'foo';
    o.progress = 42;
    o.region = 'foo';
    o.selfLink = 'foo';
    o.startTime = 'foo';
    o.status = 'foo';
    o.statusMessage = 'foo';
    o.targetId = 'foo';
    o.targetLink = 'foo';
    o.user = 'foo';
    o.warnings = buildUnnamed1152();
    o.zone = 'foo';
  }
  buildCounterOperation--;
  return o;
}

void checkOperation(api.Operation o) {
  buildCounterOperation++;
  if (buildCounterOperation < 3) {
    unittest.expect(
      o.clientOperationId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.endTime!,
      unittest.equals('foo'),
    );
    checkOperationError(o.error!);
    unittest.expect(
      o.httpErrorMessage!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.httpErrorStatusCode!,
      unittest.equals(42),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.insertTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.operationGroupId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.operationType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.progress!,
      unittest.equals(42),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.statusMessage!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.user!,
      unittest.equals('foo'),
    );
    checkUnnamed1152(o.warnings!);
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperation--;
}

core.Map<core.String, api.OperationsScopedList> buildUnnamed1153() => {
      'x': buildOperationsScopedList(),
      'y': buildOperationsScopedList(),
    };

void checkUnnamed1153(core.Map<core.String, api.OperationsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationsScopedList(o['x']!);
  checkOperationsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1154() => [
      'foo',
      'foo',
    ];

void checkUnnamed1154(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterOperationAggregatedListWarningData = 0;
api.OperationAggregatedListWarningData
    buildOperationAggregatedListWarningData() {
  final o = api.OperationAggregatedListWarningData();
  buildCounterOperationAggregatedListWarningData++;
  if (buildCounterOperationAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterOperationAggregatedListWarningData--;
  return o;
}

void checkOperationAggregatedListWarningData(
    api.OperationAggregatedListWarningData o) {
  buildCounterOperationAggregatedListWarningData++;
  if (buildCounterOperationAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationAggregatedListWarningData--;
}

core.List<api.OperationAggregatedListWarningData> buildUnnamed1155() => [
      buildOperationAggregatedListWarningData(),
      buildOperationAggregatedListWarningData(),
    ];

void checkUnnamed1155(core.List<api.OperationAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationAggregatedListWarningData(o[0]);
  checkOperationAggregatedListWarningData(o[1]);
}

core.int buildCounterOperationAggregatedListWarning = 0;
api.OperationAggregatedListWarning buildOperationAggregatedListWarning() {
  final o = api.OperationAggregatedListWarning();
  buildCounterOperationAggregatedListWarning++;
  if (buildCounterOperationAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1155();
    o.message = 'foo';
  }
  buildCounterOperationAggregatedListWarning--;
  return o;
}

void checkOperationAggregatedListWarning(api.OperationAggregatedListWarning o) {
  buildCounterOperationAggregatedListWarning++;
  if (buildCounterOperationAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1155(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationAggregatedListWarning--;
}

core.int buildCounterOperationAggregatedList = 0;
api.OperationAggregatedList buildOperationAggregatedList() {
  final o = api.OperationAggregatedList();
  buildCounterOperationAggregatedList++;
  if (buildCounterOperationAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1153();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1154();
    o.warning = buildOperationAggregatedListWarning();
  }
  buildCounterOperationAggregatedList--;
  return o;
}

void checkOperationAggregatedList(api.OperationAggregatedList o) {
  buildCounterOperationAggregatedList++;
  if (buildCounterOperationAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1153(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1154(o.unreachables!);
    checkOperationAggregatedListWarning(o.warning!);
  }
  buildCounterOperationAggregatedList--;
}

core.List<api.Operation> buildUnnamed1156() => [
      buildOperation(),
      buildOperation(),
    ];

void checkUnnamed1156(core.List<api.Operation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperation(o[0]);
  checkOperation(o[1]);
}

core.int buildCounterOperationListWarningData = 0;
api.OperationListWarningData buildOperationListWarningData() {
  final o = api.OperationListWarningData();
  buildCounterOperationListWarningData++;
  if (buildCounterOperationListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterOperationListWarningData--;
  return o;
}

void checkOperationListWarningData(api.OperationListWarningData o) {
  buildCounterOperationListWarningData++;
  if (buildCounterOperationListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationListWarningData--;
}

core.List<api.OperationListWarningData> buildUnnamed1157() => [
      buildOperationListWarningData(),
      buildOperationListWarningData(),
    ];

void checkUnnamed1157(core.List<api.OperationListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationListWarningData(o[0]);
  checkOperationListWarningData(o[1]);
}

core.int buildCounterOperationListWarning = 0;
api.OperationListWarning buildOperationListWarning() {
  final o = api.OperationListWarning();
  buildCounterOperationListWarning++;
  if (buildCounterOperationListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1157();
    o.message = 'foo';
  }
  buildCounterOperationListWarning--;
  return o;
}

void checkOperationListWarning(api.OperationListWarning o) {
  buildCounterOperationListWarning++;
  if (buildCounterOperationListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1157(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationListWarning--;
}

core.int buildCounterOperationList = 0;
api.OperationList buildOperationList() {
  final o = api.OperationList();
  buildCounterOperationList++;
  if (buildCounterOperationList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1156();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildOperationListWarning();
  }
  buildCounterOperationList--;
  return o;
}

void checkOperationList(api.OperationList o) {
  buildCounterOperationList++;
  if (buildCounterOperationList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1156(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkOperationListWarning(o.warning!);
  }
  buildCounterOperationList--;
}

core.List<api.Operation> buildUnnamed1158() => [
      buildOperation(),
      buildOperation(),
    ];

void checkUnnamed1158(core.List<api.Operation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperation(o[0]);
  checkOperation(o[1]);
}

core.int buildCounterOperationsScopedListWarningData = 0;
api.OperationsScopedListWarningData buildOperationsScopedListWarningData() {
  final o = api.OperationsScopedListWarningData();
  buildCounterOperationsScopedListWarningData++;
  if (buildCounterOperationsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterOperationsScopedListWarningData--;
  return o;
}

void checkOperationsScopedListWarningData(
    api.OperationsScopedListWarningData o) {
  buildCounterOperationsScopedListWarningData++;
  if (buildCounterOperationsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationsScopedListWarningData--;
}

core.List<api.OperationsScopedListWarningData> buildUnnamed1159() => [
      buildOperationsScopedListWarningData(),
      buildOperationsScopedListWarningData(),
    ];

void checkUnnamed1159(core.List<api.OperationsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkOperationsScopedListWarningData(o[0]);
  checkOperationsScopedListWarningData(o[1]);
}

core.int buildCounterOperationsScopedListWarning = 0;
api.OperationsScopedListWarning buildOperationsScopedListWarning() {
  final o = api.OperationsScopedListWarning();
  buildCounterOperationsScopedListWarning++;
  if (buildCounterOperationsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1159();
    o.message = 'foo';
  }
  buildCounterOperationsScopedListWarning--;
  return o;
}

void checkOperationsScopedListWarning(api.OperationsScopedListWarning o) {
  buildCounterOperationsScopedListWarning++;
  if (buildCounterOperationsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1159(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterOperationsScopedListWarning--;
}

core.int buildCounterOperationsScopedList = 0;
api.OperationsScopedList buildOperationsScopedList() {
  final o = api.OperationsScopedList();
  buildCounterOperationsScopedList++;
  if (buildCounterOperationsScopedList < 3) {
    o.operations = buildUnnamed1158();
    o.warning = buildOperationsScopedListWarning();
  }
  buildCounterOperationsScopedList--;
  return o;
}

void checkOperationsScopedList(api.OperationsScopedList o) {
  buildCounterOperationsScopedList++;
  if (buildCounterOperationsScopedList < 3) {
    checkUnnamed1158(o.operations!);
    checkOperationsScopedListWarning(o.warning!);
  }
  buildCounterOperationsScopedList--;
}

core.int buildCounterOutlierDetection = 0;
api.OutlierDetection buildOutlierDetection() {
  final o = api.OutlierDetection();
  buildCounterOutlierDetection++;
  if (buildCounterOutlierDetection < 3) {
    o.baseEjectionTime = buildDuration();
    o.consecutiveErrors = 42;
    o.consecutiveGatewayFailure = 42;
    o.enforcingConsecutiveErrors = 42;
    o.enforcingConsecutiveGatewayFailure = 42;
    o.enforcingSuccessRate = 42;
    o.interval = buildDuration();
    o.maxEjectionPercent = 42;
    o.successRateMinimumHosts = 42;
    o.successRateRequestVolume = 42;
    o.successRateStdevFactor = 42;
  }
  buildCounterOutlierDetection--;
  return o;
}

void checkOutlierDetection(api.OutlierDetection o) {
  buildCounterOutlierDetection++;
  if (buildCounterOutlierDetection < 3) {
    checkDuration(o.baseEjectionTime!);
    unittest.expect(
      o.consecutiveErrors!,
      unittest.equals(42),
    );
    unittest.expect(
      o.consecutiveGatewayFailure!,
      unittest.equals(42),
    );
    unittest.expect(
      o.enforcingConsecutiveErrors!,
      unittest.equals(42),
    );
    unittest.expect(
      o.enforcingConsecutiveGatewayFailure!,
      unittest.equals(42),
    );
    unittest.expect(
      o.enforcingSuccessRate!,
      unittest.equals(42),
    );
    checkDuration(o.interval!);
    unittest.expect(
      o.maxEjectionPercent!,
      unittest.equals(42),
    );
    unittest.expect(
      o.successRateMinimumHosts!,
      unittest.equals(42),
    );
    unittest.expect(
      o.successRateRequestVolume!,
      unittest.equals(42),
    );
    unittest.expect(
      o.successRateStdevFactor!,
      unittest.equals(42),
    );
  }
  buildCounterOutlierDetection--;
}

core.int buildCounterPacketMirroring = 0;
api.PacketMirroring buildPacketMirroring() {
  final o = api.PacketMirroring();
  buildCounterPacketMirroring++;
  if (buildCounterPacketMirroring < 3) {
    o.collectorIlb = buildPacketMirroringForwardingRuleInfo();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.enable = 'foo';
    o.filter = buildPacketMirroringFilter();
    o.id = 'foo';
    o.kind = 'foo';
    o.mirroredResources = buildPacketMirroringMirroredResourceInfo();
    o.name = 'foo';
    o.network = buildPacketMirroringNetworkInfo();
    o.priority = 42;
    o.region = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterPacketMirroring--;
  return o;
}

void checkPacketMirroring(api.PacketMirroring o) {
  buildCounterPacketMirroring++;
  if (buildCounterPacketMirroring < 3) {
    checkPacketMirroringForwardingRuleInfo(o.collectorIlb!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.enable!,
      unittest.equals('foo'),
    );
    checkPacketMirroringFilter(o.filter!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkPacketMirroringMirroredResourceInfo(o.mirroredResources!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkPacketMirroringNetworkInfo(o.network!);
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroring--;
}

core.Map<core.String, api.PacketMirroringsScopedList> buildUnnamed1160() => {
      'x': buildPacketMirroringsScopedList(),
      'y': buildPacketMirroringsScopedList(),
    };

void checkUnnamed1160(core.Map<core.String, api.PacketMirroringsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringsScopedList(o['x']!);
  checkPacketMirroringsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1161() => [
      'foo',
      'foo',
    ];

void checkUnnamed1161(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterPacketMirroringAggregatedListWarningData = 0;
api.PacketMirroringAggregatedListWarningData
    buildPacketMirroringAggregatedListWarningData() {
  final o = api.PacketMirroringAggregatedListWarningData();
  buildCounterPacketMirroringAggregatedListWarningData++;
  if (buildCounterPacketMirroringAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPacketMirroringAggregatedListWarningData--;
  return o;
}

void checkPacketMirroringAggregatedListWarningData(
    api.PacketMirroringAggregatedListWarningData o) {
  buildCounterPacketMirroringAggregatedListWarningData++;
  if (buildCounterPacketMirroringAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringAggregatedListWarningData--;
}

core.List<api.PacketMirroringAggregatedListWarningData> buildUnnamed1162() => [
      buildPacketMirroringAggregatedListWarningData(),
      buildPacketMirroringAggregatedListWarningData(),
    ];

void checkUnnamed1162(
    core.List<api.PacketMirroringAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringAggregatedListWarningData(o[0]);
  checkPacketMirroringAggregatedListWarningData(o[1]);
}

core.int buildCounterPacketMirroringAggregatedListWarning = 0;
api.PacketMirroringAggregatedListWarning
    buildPacketMirroringAggregatedListWarning() {
  final o = api.PacketMirroringAggregatedListWarning();
  buildCounterPacketMirroringAggregatedListWarning++;
  if (buildCounterPacketMirroringAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1162();
    o.message = 'foo';
  }
  buildCounterPacketMirroringAggregatedListWarning--;
  return o;
}

void checkPacketMirroringAggregatedListWarning(
    api.PacketMirroringAggregatedListWarning o) {
  buildCounterPacketMirroringAggregatedListWarning++;
  if (buildCounterPacketMirroringAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1162(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringAggregatedListWarning--;
}

core.int buildCounterPacketMirroringAggregatedList = 0;
api.PacketMirroringAggregatedList buildPacketMirroringAggregatedList() {
  final o = api.PacketMirroringAggregatedList();
  buildCounterPacketMirroringAggregatedList++;
  if (buildCounterPacketMirroringAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1160();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1161();
    o.warning = buildPacketMirroringAggregatedListWarning();
  }
  buildCounterPacketMirroringAggregatedList--;
  return o;
}

void checkPacketMirroringAggregatedList(api.PacketMirroringAggregatedList o) {
  buildCounterPacketMirroringAggregatedList++;
  if (buildCounterPacketMirroringAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1160(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1161(o.unreachables!);
    checkPacketMirroringAggregatedListWarning(o.warning!);
  }
  buildCounterPacketMirroringAggregatedList--;
}

core.List<core.String> buildUnnamed1163() => [
      'foo',
      'foo',
    ];

void checkUnnamed1163(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1164() => [
      'foo',
      'foo',
    ];

void checkUnnamed1164(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterPacketMirroringFilter = 0;
api.PacketMirroringFilter buildPacketMirroringFilter() {
  final o = api.PacketMirroringFilter();
  buildCounterPacketMirroringFilter++;
  if (buildCounterPacketMirroringFilter < 3) {
    o.IPProtocols = buildUnnamed1163();
    o.cidrRanges = buildUnnamed1164();
    o.direction = 'foo';
  }
  buildCounterPacketMirroringFilter--;
  return o;
}

void checkPacketMirroringFilter(api.PacketMirroringFilter o) {
  buildCounterPacketMirroringFilter++;
  if (buildCounterPacketMirroringFilter < 3) {
    checkUnnamed1163(o.IPProtocols!);
    checkUnnamed1164(o.cidrRanges!);
    unittest.expect(
      o.direction!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringFilter--;
}

core.int buildCounterPacketMirroringForwardingRuleInfo = 0;
api.PacketMirroringForwardingRuleInfo buildPacketMirroringForwardingRuleInfo() {
  final o = api.PacketMirroringForwardingRuleInfo();
  buildCounterPacketMirroringForwardingRuleInfo++;
  if (buildCounterPacketMirroringForwardingRuleInfo < 3) {
    o.canonicalUrl = 'foo';
    o.url = 'foo';
  }
  buildCounterPacketMirroringForwardingRuleInfo--;
  return o;
}

void checkPacketMirroringForwardingRuleInfo(
    api.PacketMirroringForwardingRuleInfo o) {
  buildCounterPacketMirroringForwardingRuleInfo++;
  if (buildCounterPacketMirroringForwardingRuleInfo < 3) {
    unittest.expect(
      o.canonicalUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.url!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringForwardingRuleInfo--;
}

core.List<api.PacketMirroring> buildUnnamed1165() => [
      buildPacketMirroring(),
      buildPacketMirroring(),
    ];

void checkUnnamed1165(core.List<api.PacketMirroring> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroring(o[0]);
  checkPacketMirroring(o[1]);
}

core.int buildCounterPacketMirroringListWarningData = 0;
api.PacketMirroringListWarningData buildPacketMirroringListWarningData() {
  final o = api.PacketMirroringListWarningData();
  buildCounterPacketMirroringListWarningData++;
  if (buildCounterPacketMirroringListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPacketMirroringListWarningData--;
  return o;
}

void checkPacketMirroringListWarningData(api.PacketMirroringListWarningData o) {
  buildCounterPacketMirroringListWarningData++;
  if (buildCounterPacketMirroringListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringListWarningData--;
}

core.List<api.PacketMirroringListWarningData> buildUnnamed1166() => [
      buildPacketMirroringListWarningData(),
      buildPacketMirroringListWarningData(),
    ];

void checkUnnamed1166(core.List<api.PacketMirroringListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringListWarningData(o[0]);
  checkPacketMirroringListWarningData(o[1]);
}

core.int buildCounterPacketMirroringListWarning = 0;
api.PacketMirroringListWarning buildPacketMirroringListWarning() {
  final o = api.PacketMirroringListWarning();
  buildCounterPacketMirroringListWarning++;
  if (buildCounterPacketMirroringListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1166();
    o.message = 'foo';
  }
  buildCounterPacketMirroringListWarning--;
  return o;
}

void checkPacketMirroringListWarning(api.PacketMirroringListWarning o) {
  buildCounterPacketMirroringListWarning++;
  if (buildCounterPacketMirroringListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1166(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringListWarning--;
}

core.int buildCounterPacketMirroringList = 0;
api.PacketMirroringList buildPacketMirroringList() {
  final o = api.PacketMirroringList();
  buildCounterPacketMirroringList++;
  if (buildCounterPacketMirroringList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1165();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildPacketMirroringListWarning();
  }
  buildCounterPacketMirroringList--;
  return o;
}

void checkPacketMirroringList(api.PacketMirroringList o) {
  buildCounterPacketMirroringList++;
  if (buildCounterPacketMirroringList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1165(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkPacketMirroringListWarning(o.warning!);
  }
  buildCounterPacketMirroringList--;
}

core.List<api.PacketMirroringMirroredResourceInfoInstanceInfo>
    buildUnnamed1167() => [
          buildPacketMirroringMirroredResourceInfoInstanceInfo(),
          buildPacketMirroringMirroredResourceInfoInstanceInfo(),
        ];

void checkUnnamed1167(
    core.List<api.PacketMirroringMirroredResourceInfoInstanceInfo> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringMirroredResourceInfoInstanceInfo(o[0]);
  checkPacketMirroringMirroredResourceInfoInstanceInfo(o[1]);
}

core.List<api.PacketMirroringMirroredResourceInfoSubnetInfo>
    buildUnnamed1168() => [
          buildPacketMirroringMirroredResourceInfoSubnetInfo(),
          buildPacketMirroringMirroredResourceInfoSubnetInfo(),
        ];

void checkUnnamed1168(
    core.List<api.PacketMirroringMirroredResourceInfoSubnetInfo> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringMirroredResourceInfoSubnetInfo(o[0]);
  checkPacketMirroringMirroredResourceInfoSubnetInfo(o[1]);
}

core.List<core.String> buildUnnamed1169() => [
      'foo',
      'foo',
    ];

void checkUnnamed1169(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterPacketMirroringMirroredResourceInfo = 0;
api.PacketMirroringMirroredResourceInfo
    buildPacketMirroringMirroredResourceInfo() {
  final o = api.PacketMirroringMirroredResourceInfo();
  buildCounterPacketMirroringMirroredResourceInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfo < 3) {
    o.instances = buildUnnamed1167();
    o.subnetworks = buildUnnamed1168();
    o.tags = buildUnnamed1169();
  }
  buildCounterPacketMirroringMirroredResourceInfo--;
  return o;
}

void checkPacketMirroringMirroredResourceInfo(
    api.PacketMirroringMirroredResourceInfo o) {
  buildCounterPacketMirroringMirroredResourceInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfo < 3) {
    checkUnnamed1167(o.instances!);
    checkUnnamed1168(o.subnetworks!);
    checkUnnamed1169(o.tags!);
  }
  buildCounterPacketMirroringMirroredResourceInfo--;
}

core.int buildCounterPacketMirroringMirroredResourceInfoInstanceInfo = 0;
api.PacketMirroringMirroredResourceInfoInstanceInfo
    buildPacketMirroringMirroredResourceInfoInstanceInfo() {
  final o = api.PacketMirroringMirroredResourceInfoInstanceInfo();
  buildCounterPacketMirroringMirroredResourceInfoInstanceInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfoInstanceInfo < 3) {
    o.canonicalUrl = 'foo';
    o.url = 'foo';
  }
  buildCounterPacketMirroringMirroredResourceInfoInstanceInfo--;
  return o;
}

void checkPacketMirroringMirroredResourceInfoInstanceInfo(
    api.PacketMirroringMirroredResourceInfoInstanceInfo o) {
  buildCounterPacketMirroringMirroredResourceInfoInstanceInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfoInstanceInfo < 3) {
    unittest.expect(
      o.canonicalUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.url!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringMirroredResourceInfoInstanceInfo--;
}

core.int buildCounterPacketMirroringMirroredResourceInfoSubnetInfo = 0;
api.PacketMirroringMirroredResourceInfoSubnetInfo
    buildPacketMirroringMirroredResourceInfoSubnetInfo() {
  final o = api.PacketMirroringMirroredResourceInfoSubnetInfo();
  buildCounterPacketMirroringMirroredResourceInfoSubnetInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfoSubnetInfo < 3) {
    o.canonicalUrl = 'foo';
    o.url = 'foo';
  }
  buildCounterPacketMirroringMirroredResourceInfoSubnetInfo--;
  return o;
}

void checkPacketMirroringMirroredResourceInfoSubnetInfo(
    api.PacketMirroringMirroredResourceInfoSubnetInfo o) {
  buildCounterPacketMirroringMirroredResourceInfoSubnetInfo++;
  if (buildCounterPacketMirroringMirroredResourceInfoSubnetInfo < 3) {
    unittest.expect(
      o.canonicalUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.url!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringMirroredResourceInfoSubnetInfo--;
}

core.int buildCounterPacketMirroringNetworkInfo = 0;
api.PacketMirroringNetworkInfo buildPacketMirroringNetworkInfo() {
  final o = api.PacketMirroringNetworkInfo();
  buildCounterPacketMirroringNetworkInfo++;
  if (buildCounterPacketMirroringNetworkInfo < 3) {
    o.canonicalUrl = 'foo';
    o.url = 'foo';
  }
  buildCounterPacketMirroringNetworkInfo--;
  return o;
}

void checkPacketMirroringNetworkInfo(api.PacketMirroringNetworkInfo o) {
  buildCounterPacketMirroringNetworkInfo++;
  if (buildCounterPacketMirroringNetworkInfo < 3) {
    unittest.expect(
      o.canonicalUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.url!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringNetworkInfo--;
}

core.List<api.PacketMirroring> buildUnnamed1170() => [
      buildPacketMirroring(),
      buildPacketMirroring(),
    ];

void checkUnnamed1170(core.List<api.PacketMirroring> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroring(o[0]);
  checkPacketMirroring(o[1]);
}

core.int buildCounterPacketMirroringsScopedListWarningData = 0;
api.PacketMirroringsScopedListWarningData
    buildPacketMirroringsScopedListWarningData() {
  final o = api.PacketMirroringsScopedListWarningData();
  buildCounterPacketMirroringsScopedListWarningData++;
  if (buildCounterPacketMirroringsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPacketMirroringsScopedListWarningData--;
  return o;
}

void checkPacketMirroringsScopedListWarningData(
    api.PacketMirroringsScopedListWarningData o) {
  buildCounterPacketMirroringsScopedListWarningData++;
  if (buildCounterPacketMirroringsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringsScopedListWarningData--;
}

core.List<api.PacketMirroringsScopedListWarningData> buildUnnamed1171() => [
      buildPacketMirroringsScopedListWarningData(),
      buildPacketMirroringsScopedListWarningData(),
    ];

void checkUnnamed1171(core.List<api.PacketMirroringsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPacketMirroringsScopedListWarningData(o[0]);
  checkPacketMirroringsScopedListWarningData(o[1]);
}

core.int buildCounterPacketMirroringsScopedListWarning = 0;
api.PacketMirroringsScopedListWarning buildPacketMirroringsScopedListWarning() {
  final o = api.PacketMirroringsScopedListWarning();
  buildCounterPacketMirroringsScopedListWarning++;
  if (buildCounterPacketMirroringsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1171();
    o.message = 'foo';
  }
  buildCounterPacketMirroringsScopedListWarning--;
  return o;
}

void checkPacketMirroringsScopedListWarning(
    api.PacketMirroringsScopedListWarning o) {
  buildCounterPacketMirroringsScopedListWarning++;
  if (buildCounterPacketMirroringsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1171(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPacketMirroringsScopedListWarning--;
}

core.int buildCounterPacketMirroringsScopedList = 0;
api.PacketMirroringsScopedList buildPacketMirroringsScopedList() {
  final o = api.PacketMirroringsScopedList();
  buildCounterPacketMirroringsScopedList++;
  if (buildCounterPacketMirroringsScopedList < 3) {
    o.packetMirrorings = buildUnnamed1170();
    o.warning = buildPacketMirroringsScopedListWarning();
  }
  buildCounterPacketMirroringsScopedList--;
  return o;
}

void checkPacketMirroringsScopedList(api.PacketMirroringsScopedList o) {
  buildCounterPacketMirroringsScopedList++;
  if (buildCounterPacketMirroringsScopedList < 3) {
    checkUnnamed1170(o.packetMirrorings!);
    checkPacketMirroringsScopedListWarning(o.warning!);
  }
  buildCounterPacketMirroringsScopedList--;
}

core.List<api.PathRule> buildUnnamed1172() => [
      buildPathRule(),
      buildPathRule(),
    ];

void checkUnnamed1172(core.List<api.PathRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPathRule(o[0]);
  checkPathRule(o[1]);
}

core.List<api.HttpRouteRule> buildUnnamed1173() => [
      buildHttpRouteRule(),
      buildHttpRouteRule(),
    ];

void checkUnnamed1173(core.List<api.HttpRouteRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHttpRouteRule(o[0]);
  checkHttpRouteRule(o[1]);
}

core.int buildCounterPathMatcher = 0;
api.PathMatcher buildPathMatcher() {
  final o = api.PathMatcher();
  buildCounterPathMatcher++;
  if (buildCounterPathMatcher < 3) {
    o.defaultRouteAction = buildHttpRouteAction();
    o.defaultService = 'foo';
    o.defaultUrlRedirect = buildHttpRedirectAction();
    o.description = 'foo';
    o.headerAction = buildHttpHeaderAction();
    o.name = 'foo';
    o.pathRules = buildUnnamed1172();
    o.routeRules = buildUnnamed1173();
  }
  buildCounterPathMatcher--;
  return o;
}

void checkPathMatcher(api.PathMatcher o) {
  buildCounterPathMatcher++;
  if (buildCounterPathMatcher < 3) {
    checkHttpRouteAction(o.defaultRouteAction!);
    unittest.expect(
      o.defaultService!,
      unittest.equals('foo'),
    );
    checkHttpRedirectAction(o.defaultUrlRedirect!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkHttpHeaderAction(o.headerAction!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1172(o.pathRules!);
    checkUnnamed1173(o.routeRules!);
  }
  buildCounterPathMatcher--;
}

core.List<core.String> buildUnnamed1174() => [
      'foo',
      'foo',
    ];

void checkUnnamed1174(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterPathRule = 0;
api.PathRule buildPathRule() {
  final o = api.PathRule();
  buildCounterPathRule++;
  if (buildCounterPathRule < 3) {
    o.paths = buildUnnamed1174();
    o.routeAction = buildHttpRouteAction();
    o.service = 'foo';
    o.urlRedirect = buildHttpRedirectAction();
  }
  buildCounterPathRule--;
  return o;
}

void checkPathRule(api.PathRule o) {
  buildCounterPathRule++;
  if (buildCounterPathRule < 3) {
    checkUnnamed1174(o.paths!);
    checkHttpRouteAction(o.routeAction!);
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    checkHttpRedirectAction(o.urlRedirect!);
  }
  buildCounterPathRule--;
}

core.int buildCounterPerInstanceConfig = 0;
api.PerInstanceConfig buildPerInstanceConfig() {
  final o = api.PerInstanceConfig();
  buildCounterPerInstanceConfig++;
  if (buildCounterPerInstanceConfig < 3) {
    o.fingerprint = 'foo';
    o.name = 'foo';
    o.preservedState = buildPreservedState();
    o.status = 'foo';
  }
  buildCounterPerInstanceConfig--;
  return o;
}

void checkPerInstanceConfig(api.PerInstanceConfig o) {
  buildCounterPerInstanceConfig++;
  if (buildCounterPerInstanceConfig < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkPreservedState(o.preservedState!);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterPerInstanceConfig--;
}

core.List<api.AuditConfig> buildUnnamed1175() => [
      buildAuditConfig(),
      buildAuditConfig(),
    ];

void checkUnnamed1175(core.List<api.AuditConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAuditConfig(o[0]);
  checkAuditConfig(o[1]);
}

core.List<api.Binding> buildUnnamed1176() => [
      buildBinding(),
      buildBinding(),
    ];

void checkUnnamed1176(core.List<api.Binding> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBinding(o[0]);
  checkBinding(o[1]);
}

core.List<api.Rule> buildUnnamed1177() => [
      buildRule(),
      buildRule(),
    ];

void checkUnnamed1177(core.List<api.Rule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRule(o[0]);
  checkRule(o[1]);
}

core.int buildCounterPolicy = 0;
api.Policy buildPolicy() {
  final o = api.Policy();
  buildCounterPolicy++;
  if (buildCounterPolicy < 3) {
    o.auditConfigs = buildUnnamed1175();
    o.bindings = buildUnnamed1176();
    o.etag = 'foo';
    o.iamOwned = true;
    o.rules = buildUnnamed1177();
    o.version = 42;
  }
  buildCounterPolicy--;
  return o;
}

void checkPolicy(api.Policy o) {
  buildCounterPolicy++;
  if (buildCounterPolicy < 3) {
    checkUnnamed1175(o.auditConfigs!);
    checkUnnamed1176(o.bindings!);
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    unittest.expect(o.iamOwned!, unittest.isTrue);
    checkUnnamed1177(o.rules!);
    unittest.expect(
      o.version!,
      unittest.equals(42),
    );
  }
  buildCounterPolicy--;
}

core.List<api.WafExpressionSet> buildUnnamed1178() => [
      buildWafExpressionSet(),
      buildWafExpressionSet(),
    ];

void checkUnnamed1178(core.List<api.WafExpressionSet> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkWafExpressionSet(o[0]);
  checkWafExpressionSet(o[1]);
}

core.int buildCounterPreconfiguredWafSet = 0;
api.PreconfiguredWafSet buildPreconfiguredWafSet() {
  final o = api.PreconfiguredWafSet();
  buildCounterPreconfiguredWafSet++;
  if (buildCounterPreconfiguredWafSet < 3) {
    o.expressionSets = buildUnnamed1178();
  }
  buildCounterPreconfiguredWafSet--;
  return o;
}

void checkPreconfiguredWafSet(api.PreconfiguredWafSet o) {
  buildCounterPreconfiguredWafSet++;
  if (buildCounterPreconfiguredWafSet < 3) {
    checkUnnamed1178(o.expressionSets!);
  }
  buildCounterPreconfiguredWafSet--;
}

core.Map<core.String, api.PreservedStatePreservedDisk> buildUnnamed1179() => {
      'x': buildPreservedStatePreservedDisk(),
      'y': buildPreservedStatePreservedDisk(),
    };

void checkUnnamed1179(
    core.Map<core.String, api.PreservedStatePreservedDisk> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPreservedStatePreservedDisk(o['x']!);
  checkPreservedStatePreservedDisk(o['y']!);
}

core.Map<core.String, core.String> buildUnnamed1180() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1180(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterPreservedState = 0;
api.PreservedState buildPreservedState() {
  final o = api.PreservedState();
  buildCounterPreservedState++;
  if (buildCounterPreservedState < 3) {
    o.disks = buildUnnamed1179();
    o.metadata = buildUnnamed1180();
  }
  buildCounterPreservedState--;
  return o;
}

void checkPreservedState(api.PreservedState o) {
  buildCounterPreservedState++;
  if (buildCounterPreservedState < 3) {
    checkUnnamed1179(o.disks!);
    checkUnnamed1180(o.metadata!);
  }
  buildCounterPreservedState--;
}

core.int buildCounterPreservedStatePreservedDisk = 0;
api.PreservedStatePreservedDisk buildPreservedStatePreservedDisk() {
  final o = api.PreservedStatePreservedDisk();
  buildCounterPreservedStatePreservedDisk++;
  if (buildCounterPreservedStatePreservedDisk < 3) {
    o.autoDelete = 'foo';
    o.mode = 'foo';
    o.source = 'foo';
  }
  buildCounterPreservedStatePreservedDisk--;
  return o;
}

void checkPreservedStatePreservedDisk(api.PreservedStatePreservedDisk o) {
  buildCounterPreservedStatePreservedDisk++;
  if (buildCounterPreservedStatePreservedDisk < 3) {
    unittest.expect(
      o.autoDelete!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.mode!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.source!,
      unittest.equals('foo'),
    );
  }
  buildCounterPreservedStatePreservedDisk--;
}

core.List<core.String> buildUnnamed1181() => [
      'foo',
      'foo',
    ];

void checkUnnamed1181(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.Quota> buildUnnamed1182() => [
      buildQuota(),
      buildQuota(),
    ];

void checkUnnamed1182(core.List<api.Quota> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkQuota(o[0]);
  checkQuota(o[1]);
}

core.int buildCounterProject = 0;
api.Project buildProject() {
  final o = api.Project();
  buildCounterProject++;
  if (buildCounterProject < 3) {
    o.commonInstanceMetadata = buildMetadata();
    o.creationTimestamp = 'foo';
    o.defaultNetworkTier = 'foo';
    o.defaultServiceAccount = 'foo';
    o.description = 'foo';
    o.enabledFeatures = buildUnnamed1181();
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.quotas = buildUnnamed1182();
    o.selfLink = 'foo';
    o.usageExportLocation = buildUsageExportLocation();
    o.xpnProjectStatus = 'foo';
  }
  buildCounterProject--;
  return o;
}

void checkProject(api.Project o) {
  buildCounterProject++;
  if (buildCounterProject < 3) {
    checkMetadata(o.commonInstanceMetadata!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.defaultNetworkTier!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.defaultServiceAccount!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1181(o.enabledFeatures!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1182(o.quotas!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUsageExportLocation(o.usageExportLocation!);
    unittest.expect(
      o.xpnProjectStatus!,
      unittest.equals('foo'),
    );
  }
  buildCounterProject--;
}

core.int buildCounterProjectsDisableXpnResourceRequest = 0;
api.ProjectsDisableXpnResourceRequest buildProjectsDisableXpnResourceRequest() {
  final o = api.ProjectsDisableXpnResourceRequest();
  buildCounterProjectsDisableXpnResourceRequest++;
  if (buildCounterProjectsDisableXpnResourceRequest < 3) {
    o.xpnResource = buildXpnResourceId();
  }
  buildCounterProjectsDisableXpnResourceRequest--;
  return o;
}

void checkProjectsDisableXpnResourceRequest(
    api.ProjectsDisableXpnResourceRequest o) {
  buildCounterProjectsDisableXpnResourceRequest++;
  if (buildCounterProjectsDisableXpnResourceRequest < 3) {
    checkXpnResourceId(o.xpnResource!);
  }
  buildCounterProjectsDisableXpnResourceRequest--;
}

core.int buildCounterProjectsEnableXpnResourceRequest = 0;
api.ProjectsEnableXpnResourceRequest buildProjectsEnableXpnResourceRequest() {
  final o = api.ProjectsEnableXpnResourceRequest();
  buildCounterProjectsEnableXpnResourceRequest++;
  if (buildCounterProjectsEnableXpnResourceRequest < 3) {
    o.xpnResource = buildXpnResourceId();
  }
  buildCounterProjectsEnableXpnResourceRequest--;
  return o;
}

void checkProjectsEnableXpnResourceRequest(
    api.ProjectsEnableXpnResourceRequest o) {
  buildCounterProjectsEnableXpnResourceRequest++;
  if (buildCounterProjectsEnableXpnResourceRequest < 3) {
    checkXpnResourceId(o.xpnResource!);
  }
  buildCounterProjectsEnableXpnResourceRequest--;
}

core.List<api.XpnResourceId> buildUnnamed1183() => [
      buildXpnResourceId(),
      buildXpnResourceId(),
    ];

void checkUnnamed1183(core.List<api.XpnResourceId> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkXpnResourceId(o[0]);
  checkXpnResourceId(o[1]);
}

core.int buildCounterProjectsGetXpnResources = 0;
api.ProjectsGetXpnResources buildProjectsGetXpnResources() {
  final o = api.ProjectsGetXpnResources();
  buildCounterProjectsGetXpnResources++;
  if (buildCounterProjectsGetXpnResources < 3) {
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.resources = buildUnnamed1183();
  }
  buildCounterProjectsGetXpnResources--;
  return o;
}

void checkProjectsGetXpnResources(api.ProjectsGetXpnResources o) {
  buildCounterProjectsGetXpnResources++;
  if (buildCounterProjectsGetXpnResources < 3) {
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkUnnamed1183(o.resources!);
  }
  buildCounterProjectsGetXpnResources--;
}

core.int buildCounterProjectsListXpnHostsRequest = 0;
api.ProjectsListXpnHostsRequest buildProjectsListXpnHostsRequest() {
  final o = api.ProjectsListXpnHostsRequest();
  buildCounterProjectsListXpnHostsRequest++;
  if (buildCounterProjectsListXpnHostsRequest < 3) {
    o.organization = 'foo';
  }
  buildCounterProjectsListXpnHostsRequest--;
  return o;
}

void checkProjectsListXpnHostsRequest(api.ProjectsListXpnHostsRequest o) {
  buildCounterProjectsListXpnHostsRequest++;
  if (buildCounterProjectsListXpnHostsRequest < 3) {
    unittest.expect(
      o.organization!,
      unittest.equals('foo'),
    );
  }
  buildCounterProjectsListXpnHostsRequest--;
}

core.int buildCounterProjectsSetDefaultNetworkTierRequest = 0;
api.ProjectsSetDefaultNetworkTierRequest
    buildProjectsSetDefaultNetworkTierRequest() {
  final o = api.ProjectsSetDefaultNetworkTierRequest();
  buildCounterProjectsSetDefaultNetworkTierRequest++;
  if (buildCounterProjectsSetDefaultNetworkTierRequest < 3) {
    o.networkTier = 'foo';
  }
  buildCounterProjectsSetDefaultNetworkTierRequest--;
  return o;
}

void checkProjectsSetDefaultNetworkTierRequest(
    api.ProjectsSetDefaultNetworkTierRequest o) {
  buildCounterProjectsSetDefaultNetworkTierRequest++;
  if (buildCounterProjectsSetDefaultNetworkTierRequest < 3) {
    unittest.expect(
      o.networkTier!,
      unittest.equals('foo'),
    );
  }
  buildCounterProjectsSetDefaultNetworkTierRequest--;
}

core.List<api.PublicAdvertisedPrefixPublicDelegatedPrefix> buildUnnamed1184() =>
    [
      buildPublicAdvertisedPrefixPublicDelegatedPrefix(),
      buildPublicAdvertisedPrefixPublicDelegatedPrefix(),
    ];

void checkUnnamed1184(
    core.List<api.PublicAdvertisedPrefixPublicDelegatedPrefix> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicAdvertisedPrefixPublicDelegatedPrefix(o[0]);
  checkPublicAdvertisedPrefixPublicDelegatedPrefix(o[1]);
}

core.int buildCounterPublicAdvertisedPrefix = 0;
api.PublicAdvertisedPrefix buildPublicAdvertisedPrefix() {
  final o = api.PublicAdvertisedPrefix();
  buildCounterPublicAdvertisedPrefix++;
  if (buildCounterPublicAdvertisedPrefix < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.dnsVerificationIp = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.ipCidrRange = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.publicDelegatedPrefixs = buildUnnamed1184();
    o.selfLink = 'foo';
    o.sharedSecret = 'foo';
    o.status = 'foo';
  }
  buildCounterPublicAdvertisedPrefix--;
  return o;
}

void checkPublicAdvertisedPrefix(api.PublicAdvertisedPrefix o) {
  buildCounterPublicAdvertisedPrefix++;
  if (buildCounterPublicAdvertisedPrefix < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.dnsVerificationIp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1184(o.publicDelegatedPrefixs!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sharedSecret!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicAdvertisedPrefix--;
}

core.List<api.PublicAdvertisedPrefix> buildUnnamed1185() => [
      buildPublicAdvertisedPrefix(),
      buildPublicAdvertisedPrefix(),
    ];

void checkUnnamed1185(core.List<api.PublicAdvertisedPrefix> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicAdvertisedPrefix(o[0]);
  checkPublicAdvertisedPrefix(o[1]);
}

core.int buildCounterPublicAdvertisedPrefixListWarningData = 0;
api.PublicAdvertisedPrefixListWarningData
    buildPublicAdvertisedPrefixListWarningData() {
  final o = api.PublicAdvertisedPrefixListWarningData();
  buildCounterPublicAdvertisedPrefixListWarningData++;
  if (buildCounterPublicAdvertisedPrefixListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPublicAdvertisedPrefixListWarningData--;
  return o;
}

void checkPublicAdvertisedPrefixListWarningData(
    api.PublicAdvertisedPrefixListWarningData o) {
  buildCounterPublicAdvertisedPrefixListWarningData++;
  if (buildCounterPublicAdvertisedPrefixListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicAdvertisedPrefixListWarningData--;
}

core.List<api.PublicAdvertisedPrefixListWarningData> buildUnnamed1186() => [
      buildPublicAdvertisedPrefixListWarningData(),
      buildPublicAdvertisedPrefixListWarningData(),
    ];

void checkUnnamed1186(core.List<api.PublicAdvertisedPrefixListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicAdvertisedPrefixListWarningData(o[0]);
  checkPublicAdvertisedPrefixListWarningData(o[1]);
}

core.int buildCounterPublicAdvertisedPrefixListWarning = 0;
api.PublicAdvertisedPrefixListWarning buildPublicAdvertisedPrefixListWarning() {
  final o = api.PublicAdvertisedPrefixListWarning();
  buildCounterPublicAdvertisedPrefixListWarning++;
  if (buildCounterPublicAdvertisedPrefixListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1186();
    o.message = 'foo';
  }
  buildCounterPublicAdvertisedPrefixListWarning--;
  return o;
}

void checkPublicAdvertisedPrefixListWarning(
    api.PublicAdvertisedPrefixListWarning o) {
  buildCounterPublicAdvertisedPrefixListWarning++;
  if (buildCounterPublicAdvertisedPrefixListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1186(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicAdvertisedPrefixListWarning--;
}

core.int buildCounterPublicAdvertisedPrefixList = 0;
api.PublicAdvertisedPrefixList buildPublicAdvertisedPrefixList() {
  final o = api.PublicAdvertisedPrefixList();
  buildCounterPublicAdvertisedPrefixList++;
  if (buildCounterPublicAdvertisedPrefixList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1185();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildPublicAdvertisedPrefixListWarning();
  }
  buildCounterPublicAdvertisedPrefixList--;
  return o;
}

void checkPublicAdvertisedPrefixList(api.PublicAdvertisedPrefixList o) {
  buildCounterPublicAdvertisedPrefixList++;
  if (buildCounterPublicAdvertisedPrefixList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1185(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkPublicAdvertisedPrefixListWarning(o.warning!);
  }
  buildCounterPublicAdvertisedPrefixList--;
}

core.int buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix = 0;
api.PublicAdvertisedPrefixPublicDelegatedPrefix
    buildPublicAdvertisedPrefixPublicDelegatedPrefix() {
  final o = api.PublicAdvertisedPrefixPublicDelegatedPrefix();
  buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix++;
  if (buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix < 3) {
    o.ipRange = 'foo';
    o.name = 'foo';
    o.project = 'foo';
    o.region = 'foo';
    o.status = 'foo';
  }
  buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix--;
  return o;
}

void checkPublicAdvertisedPrefixPublicDelegatedPrefix(
    api.PublicAdvertisedPrefixPublicDelegatedPrefix o) {
  buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix++;
  if (buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix < 3) {
    unittest.expect(
      o.ipRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.project!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicAdvertisedPrefixPublicDelegatedPrefix--;
}

core.List<api.PublicDelegatedPrefixPublicDelegatedSubPrefix>
    buildUnnamed1187() => [
          buildPublicDelegatedPrefixPublicDelegatedSubPrefix(),
          buildPublicDelegatedPrefixPublicDelegatedSubPrefix(),
        ];

void checkUnnamed1187(
    core.List<api.PublicDelegatedPrefixPublicDelegatedSubPrefix> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefixPublicDelegatedSubPrefix(o[0]);
  checkPublicDelegatedPrefixPublicDelegatedSubPrefix(o[1]);
}

core.int buildCounterPublicDelegatedPrefix = 0;
api.PublicDelegatedPrefix buildPublicDelegatedPrefix() {
  final o = api.PublicDelegatedPrefix();
  buildCounterPublicDelegatedPrefix++;
  if (buildCounterPublicDelegatedPrefix < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.ipCidrRange = 'foo';
    o.isLiveMigration = true;
    o.kind = 'foo';
    o.name = 'foo';
    o.parentPrefix = 'foo';
    o.publicDelegatedSubPrefixs = buildUnnamed1187();
    o.region = 'foo';
    o.selfLink = 'foo';
    o.status = 'foo';
  }
  buildCounterPublicDelegatedPrefix--;
  return o;
}

void checkPublicDelegatedPrefix(api.PublicDelegatedPrefix o) {
  buildCounterPublicDelegatedPrefix++;
  if (buildCounterPublicDelegatedPrefix < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(o.isLiveMigration!, unittest.isTrue);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.parentPrefix!,
      unittest.equals('foo'),
    );
    checkUnnamed1187(o.publicDelegatedSubPrefixs!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefix--;
}

core.Map<core.String, api.PublicDelegatedPrefixesScopedList>
    buildUnnamed1188() => {
          'x': buildPublicDelegatedPrefixesScopedList(),
          'y': buildPublicDelegatedPrefixesScopedList(),
        };

void checkUnnamed1188(
    core.Map<core.String, api.PublicDelegatedPrefixesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefixesScopedList(o['x']!);
  checkPublicDelegatedPrefixesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1189() => [
      'foo',
      'foo',
    ];

void checkUnnamed1189(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterPublicDelegatedPrefixAggregatedListWarningData = 0;
api.PublicDelegatedPrefixAggregatedListWarningData
    buildPublicDelegatedPrefixAggregatedListWarningData() {
  final o = api.PublicDelegatedPrefixAggregatedListWarningData();
  buildCounterPublicDelegatedPrefixAggregatedListWarningData++;
  if (buildCounterPublicDelegatedPrefixAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPublicDelegatedPrefixAggregatedListWarningData--;
  return o;
}

void checkPublicDelegatedPrefixAggregatedListWarningData(
    api.PublicDelegatedPrefixAggregatedListWarningData o) {
  buildCounterPublicDelegatedPrefixAggregatedListWarningData++;
  if (buildCounterPublicDelegatedPrefixAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixAggregatedListWarningData--;
}

core.List<api.PublicDelegatedPrefixAggregatedListWarningData>
    buildUnnamed1190() => [
          buildPublicDelegatedPrefixAggregatedListWarningData(),
          buildPublicDelegatedPrefixAggregatedListWarningData(),
        ];

void checkUnnamed1190(
    core.List<api.PublicDelegatedPrefixAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefixAggregatedListWarningData(o[0]);
  checkPublicDelegatedPrefixAggregatedListWarningData(o[1]);
}

core.int buildCounterPublicDelegatedPrefixAggregatedListWarning = 0;
api.PublicDelegatedPrefixAggregatedListWarning
    buildPublicDelegatedPrefixAggregatedListWarning() {
  final o = api.PublicDelegatedPrefixAggregatedListWarning();
  buildCounterPublicDelegatedPrefixAggregatedListWarning++;
  if (buildCounterPublicDelegatedPrefixAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1190();
    o.message = 'foo';
  }
  buildCounterPublicDelegatedPrefixAggregatedListWarning--;
  return o;
}

void checkPublicDelegatedPrefixAggregatedListWarning(
    api.PublicDelegatedPrefixAggregatedListWarning o) {
  buildCounterPublicDelegatedPrefixAggregatedListWarning++;
  if (buildCounterPublicDelegatedPrefixAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1190(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixAggregatedListWarning--;
}

core.int buildCounterPublicDelegatedPrefixAggregatedList = 0;
api.PublicDelegatedPrefixAggregatedList
    buildPublicDelegatedPrefixAggregatedList() {
  final o = api.PublicDelegatedPrefixAggregatedList();
  buildCounterPublicDelegatedPrefixAggregatedList++;
  if (buildCounterPublicDelegatedPrefixAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1188();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1189();
    o.warning = buildPublicDelegatedPrefixAggregatedListWarning();
  }
  buildCounterPublicDelegatedPrefixAggregatedList--;
  return o;
}

void checkPublicDelegatedPrefixAggregatedList(
    api.PublicDelegatedPrefixAggregatedList o) {
  buildCounterPublicDelegatedPrefixAggregatedList++;
  if (buildCounterPublicDelegatedPrefixAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1188(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1189(o.unreachables!);
    checkPublicDelegatedPrefixAggregatedListWarning(o.warning!);
  }
  buildCounterPublicDelegatedPrefixAggregatedList--;
}

core.List<api.PublicDelegatedPrefix> buildUnnamed1191() => [
      buildPublicDelegatedPrefix(),
      buildPublicDelegatedPrefix(),
    ];

void checkUnnamed1191(core.List<api.PublicDelegatedPrefix> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefix(o[0]);
  checkPublicDelegatedPrefix(o[1]);
}

core.int buildCounterPublicDelegatedPrefixListWarningData = 0;
api.PublicDelegatedPrefixListWarningData
    buildPublicDelegatedPrefixListWarningData() {
  final o = api.PublicDelegatedPrefixListWarningData();
  buildCounterPublicDelegatedPrefixListWarningData++;
  if (buildCounterPublicDelegatedPrefixListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPublicDelegatedPrefixListWarningData--;
  return o;
}

void checkPublicDelegatedPrefixListWarningData(
    api.PublicDelegatedPrefixListWarningData o) {
  buildCounterPublicDelegatedPrefixListWarningData++;
  if (buildCounterPublicDelegatedPrefixListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixListWarningData--;
}

core.List<api.PublicDelegatedPrefixListWarningData> buildUnnamed1192() => [
      buildPublicDelegatedPrefixListWarningData(),
      buildPublicDelegatedPrefixListWarningData(),
    ];

void checkUnnamed1192(core.List<api.PublicDelegatedPrefixListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefixListWarningData(o[0]);
  checkPublicDelegatedPrefixListWarningData(o[1]);
}

core.int buildCounterPublicDelegatedPrefixListWarning = 0;
api.PublicDelegatedPrefixListWarning buildPublicDelegatedPrefixListWarning() {
  final o = api.PublicDelegatedPrefixListWarning();
  buildCounterPublicDelegatedPrefixListWarning++;
  if (buildCounterPublicDelegatedPrefixListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1192();
    o.message = 'foo';
  }
  buildCounterPublicDelegatedPrefixListWarning--;
  return o;
}

void checkPublicDelegatedPrefixListWarning(
    api.PublicDelegatedPrefixListWarning o) {
  buildCounterPublicDelegatedPrefixListWarning++;
  if (buildCounterPublicDelegatedPrefixListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1192(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixListWarning--;
}

core.int buildCounterPublicDelegatedPrefixList = 0;
api.PublicDelegatedPrefixList buildPublicDelegatedPrefixList() {
  final o = api.PublicDelegatedPrefixList();
  buildCounterPublicDelegatedPrefixList++;
  if (buildCounterPublicDelegatedPrefixList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1191();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildPublicDelegatedPrefixListWarning();
  }
  buildCounterPublicDelegatedPrefixList--;
  return o;
}

void checkPublicDelegatedPrefixList(api.PublicDelegatedPrefixList o) {
  buildCounterPublicDelegatedPrefixList++;
  if (buildCounterPublicDelegatedPrefixList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1191(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkPublicDelegatedPrefixListWarning(o.warning!);
  }
  buildCounterPublicDelegatedPrefixList--;
}

core.int buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix = 0;
api.PublicDelegatedPrefixPublicDelegatedSubPrefix
    buildPublicDelegatedPrefixPublicDelegatedSubPrefix() {
  final o = api.PublicDelegatedPrefixPublicDelegatedSubPrefix();
  buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix++;
  if (buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix < 3) {
    o.delegateeProject = 'foo';
    o.description = 'foo';
    o.ipCidrRange = 'foo';
    o.isAddress = true;
    o.name = 'foo';
    o.region = 'foo';
    o.status = 'foo';
  }
  buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix--;
  return o;
}

void checkPublicDelegatedPrefixPublicDelegatedSubPrefix(
    api.PublicDelegatedPrefixPublicDelegatedSubPrefix o) {
  buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix++;
  if (buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix < 3) {
    unittest.expect(
      o.delegateeProject!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(o.isAddress!, unittest.isTrue);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixPublicDelegatedSubPrefix--;
}

core.List<api.PublicDelegatedPrefix> buildUnnamed1193() => [
      buildPublicDelegatedPrefix(),
      buildPublicDelegatedPrefix(),
    ];

void checkUnnamed1193(core.List<api.PublicDelegatedPrefix> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefix(o[0]);
  checkPublicDelegatedPrefix(o[1]);
}

core.int buildCounterPublicDelegatedPrefixesScopedListWarningData = 0;
api.PublicDelegatedPrefixesScopedListWarningData
    buildPublicDelegatedPrefixesScopedListWarningData() {
  final o = api.PublicDelegatedPrefixesScopedListWarningData();
  buildCounterPublicDelegatedPrefixesScopedListWarningData++;
  if (buildCounterPublicDelegatedPrefixesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterPublicDelegatedPrefixesScopedListWarningData--;
  return o;
}

void checkPublicDelegatedPrefixesScopedListWarningData(
    api.PublicDelegatedPrefixesScopedListWarningData o) {
  buildCounterPublicDelegatedPrefixesScopedListWarningData++;
  if (buildCounterPublicDelegatedPrefixesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixesScopedListWarningData--;
}

core.List<api.PublicDelegatedPrefixesScopedListWarningData>
    buildUnnamed1194() => [
          buildPublicDelegatedPrefixesScopedListWarningData(),
          buildPublicDelegatedPrefixesScopedListWarningData(),
        ];

void checkUnnamed1194(
    core.List<api.PublicDelegatedPrefixesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPublicDelegatedPrefixesScopedListWarningData(o[0]);
  checkPublicDelegatedPrefixesScopedListWarningData(o[1]);
}

core.int buildCounterPublicDelegatedPrefixesScopedListWarning = 0;
api.PublicDelegatedPrefixesScopedListWarning
    buildPublicDelegatedPrefixesScopedListWarning() {
  final o = api.PublicDelegatedPrefixesScopedListWarning();
  buildCounterPublicDelegatedPrefixesScopedListWarning++;
  if (buildCounterPublicDelegatedPrefixesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1194();
    o.message = 'foo';
  }
  buildCounterPublicDelegatedPrefixesScopedListWarning--;
  return o;
}

void checkPublicDelegatedPrefixesScopedListWarning(
    api.PublicDelegatedPrefixesScopedListWarning o) {
  buildCounterPublicDelegatedPrefixesScopedListWarning++;
  if (buildCounterPublicDelegatedPrefixesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1194(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterPublicDelegatedPrefixesScopedListWarning--;
}

core.int buildCounterPublicDelegatedPrefixesScopedList = 0;
api.PublicDelegatedPrefixesScopedList buildPublicDelegatedPrefixesScopedList() {
  final o = api.PublicDelegatedPrefixesScopedList();
  buildCounterPublicDelegatedPrefixesScopedList++;
  if (buildCounterPublicDelegatedPrefixesScopedList < 3) {
    o.publicDelegatedPrefixes = buildUnnamed1193();
    o.warning = buildPublicDelegatedPrefixesScopedListWarning();
  }
  buildCounterPublicDelegatedPrefixesScopedList--;
  return o;
}

void checkPublicDelegatedPrefixesScopedList(
    api.PublicDelegatedPrefixesScopedList o) {
  buildCounterPublicDelegatedPrefixesScopedList++;
  if (buildCounterPublicDelegatedPrefixesScopedList < 3) {
    checkUnnamed1193(o.publicDelegatedPrefixes!);
    checkPublicDelegatedPrefixesScopedListWarning(o.warning!);
  }
  buildCounterPublicDelegatedPrefixesScopedList--;
}

core.int buildCounterQuota = 0;
api.Quota buildQuota() {
  final o = api.Quota();
  buildCounterQuota++;
  if (buildCounterQuota < 3) {
    o.limit = 42.0;
    o.metric = 'foo';
    o.owner = 'foo';
    o.usage = 42.0;
  }
  buildCounterQuota--;
  return o;
}

void checkQuota(api.Quota o) {
  buildCounterQuota++;
  if (buildCounterQuota < 3) {
    unittest.expect(
      o.limit!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.metric!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.owner!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.usage!,
      unittest.equals(42.0),
    );
  }
  buildCounterQuota--;
}

core.int buildCounterReference = 0;
api.Reference buildReference() {
  final o = api.Reference();
  buildCounterReference++;
  if (buildCounterReference < 3) {
    o.kind = 'foo';
    o.referenceType = 'foo';
    o.referrer = 'foo';
    o.target = 'foo';
  }
  buildCounterReference--;
  return o;
}

void checkReference(api.Reference o) {
  buildCounterReference++;
  if (buildCounterReference < 3) {
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.referenceType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.referrer!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.target!,
      unittest.equals('foo'),
    );
  }
  buildCounterReference--;
}

core.List<api.Quota> buildUnnamed1195() => [
      buildQuota(),
      buildQuota(),
    ];

void checkUnnamed1195(core.List<api.Quota> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkQuota(o[0]);
  checkQuota(o[1]);
}

core.List<core.String> buildUnnamed1196() => [
      'foo',
      'foo',
    ];

void checkUnnamed1196(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegion = 0;
api.Region buildRegion() {
  final o = api.Region();
  buildCounterRegion++;
  if (buildCounterRegion < 3) {
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.quotas = buildUnnamed1195();
    o.selfLink = 'foo';
    o.status = 'foo';
    o.supportsPzs = true;
    o.zones = buildUnnamed1196();
  }
  buildCounterRegion--;
  return o;
}

void checkRegion(api.Region o) {
  buildCounterRegion++;
  if (buildCounterRegion < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1195(o.quotas!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(o.supportsPzs!, unittest.isTrue);
    checkUnnamed1196(o.zones!);
  }
  buildCounterRegion--;
}

core.List<api.Autoscaler> buildUnnamed1197() => [
      buildAutoscaler(),
      buildAutoscaler(),
    ];

void checkUnnamed1197(core.List<api.Autoscaler> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkAutoscaler(o[0]);
  checkAutoscaler(o[1]);
}

core.int buildCounterRegionAutoscalerListWarningData = 0;
api.RegionAutoscalerListWarningData buildRegionAutoscalerListWarningData() {
  final o = api.RegionAutoscalerListWarningData();
  buildCounterRegionAutoscalerListWarningData++;
  if (buildCounterRegionAutoscalerListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionAutoscalerListWarningData--;
  return o;
}

void checkRegionAutoscalerListWarningData(
    api.RegionAutoscalerListWarningData o) {
  buildCounterRegionAutoscalerListWarningData++;
  if (buildCounterRegionAutoscalerListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionAutoscalerListWarningData--;
}

core.List<api.RegionAutoscalerListWarningData> buildUnnamed1198() => [
      buildRegionAutoscalerListWarningData(),
      buildRegionAutoscalerListWarningData(),
    ];

void checkUnnamed1198(core.List<api.RegionAutoscalerListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionAutoscalerListWarningData(o[0]);
  checkRegionAutoscalerListWarningData(o[1]);
}

core.int buildCounterRegionAutoscalerListWarning = 0;
api.RegionAutoscalerListWarning buildRegionAutoscalerListWarning() {
  final o = api.RegionAutoscalerListWarning();
  buildCounterRegionAutoscalerListWarning++;
  if (buildCounterRegionAutoscalerListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1198();
    o.message = 'foo';
  }
  buildCounterRegionAutoscalerListWarning--;
  return o;
}

void checkRegionAutoscalerListWarning(api.RegionAutoscalerListWarning o) {
  buildCounterRegionAutoscalerListWarning++;
  if (buildCounterRegionAutoscalerListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1198(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionAutoscalerListWarning--;
}

core.int buildCounterRegionAutoscalerList = 0;
api.RegionAutoscalerList buildRegionAutoscalerList() {
  final o = api.RegionAutoscalerList();
  buildCounterRegionAutoscalerList++;
  if (buildCounterRegionAutoscalerList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1197();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionAutoscalerListWarning();
  }
  buildCounterRegionAutoscalerList--;
  return o;
}

void checkRegionAutoscalerList(api.RegionAutoscalerList o) {
  buildCounterRegionAutoscalerList++;
  if (buildCounterRegionAutoscalerList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1197(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionAutoscalerListWarning(o.warning!);
  }
  buildCounterRegionAutoscalerList--;
}

core.List<api.DiskType> buildUnnamed1199() => [
      buildDiskType(),
      buildDiskType(),
    ];

void checkUnnamed1199(core.List<api.DiskType> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskType(o[0]);
  checkDiskType(o[1]);
}

core.int buildCounterRegionDiskTypeListWarningData = 0;
api.RegionDiskTypeListWarningData buildRegionDiskTypeListWarningData() {
  final o = api.RegionDiskTypeListWarningData();
  buildCounterRegionDiskTypeListWarningData++;
  if (buildCounterRegionDiskTypeListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionDiskTypeListWarningData--;
  return o;
}

void checkRegionDiskTypeListWarningData(api.RegionDiskTypeListWarningData o) {
  buildCounterRegionDiskTypeListWarningData++;
  if (buildCounterRegionDiskTypeListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionDiskTypeListWarningData--;
}

core.List<api.RegionDiskTypeListWarningData> buildUnnamed1200() => [
      buildRegionDiskTypeListWarningData(),
      buildRegionDiskTypeListWarningData(),
    ];

void checkUnnamed1200(core.List<api.RegionDiskTypeListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionDiskTypeListWarningData(o[0]);
  checkRegionDiskTypeListWarningData(o[1]);
}

core.int buildCounterRegionDiskTypeListWarning = 0;
api.RegionDiskTypeListWarning buildRegionDiskTypeListWarning() {
  final o = api.RegionDiskTypeListWarning();
  buildCounterRegionDiskTypeListWarning++;
  if (buildCounterRegionDiskTypeListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1200();
    o.message = 'foo';
  }
  buildCounterRegionDiskTypeListWarning--;
  return o;
}

void checkRegionDiskTypeListWarning(api.RegionDiskTypeListWarning o) {
  buildCounterRegionDiskTypeListWarning++;
  if (buildCounterRegionDiskTypeListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1200(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionDiskTypeListWarning--;
}

core.int buildCounterRegionDiskTypeList = 0;
api.RegionDiskTypeList buildRegionDiskTypeList() {
  final o = api.RegionDiskTypeList();
  buildCounterRegionDiskTypeList++;
  if (buildCounterRegionDiskTypeList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1199();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionDiskTypeListWarning();
  }
  buildCounterRegionDiskTypeList--;
  return o;
}

void checkRegionDiskTypeList(api.RegionDiskTypeList o) {
  buildCounterRegionDiskTypeList++;
  if (buildCounterRegionDiskTypeList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1199(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionDiskTypeListWarning(o.warning!);
  }
  buildCounterRegionDiskTypeList--;
}

core.List<core.String> buildUnnamed1201() => [
      'foo',
      'foo',
    ];

void checkUnnamed1201(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionDisksAddResourcePoliciesRequest = 0;
api.RegionDisksAddResourcePoliciesRequest
    buildRegionDisksAddResourcePoliciesRequest() {
  final o = api.RegionDisksAddResourcePoliciesRequest();
  buildCounterRegionDisksAddResourcePoliciesRequest++;
  if (buildCounterRegionDisksAddResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed1201();
  }
  buildCounterRegionDisksAddResourcePoliciesRequest--;
  return o;
}

void checkRegionDisksAddResourcePoliciesRequest(
    api.RegionDisksAddResourcePoliciesRequest o) {
  buildCounterRegionDisksAddResourcePoliciesRequest++;
  if (buildCounterRegionDisksAddResourcePoliciesRequest < 3) {
    checkUnnamed1201(o.resourcePolicies!);
  }
  buildCounterRegionDisksAddResourcePoliciesRequest--;
}

core.List<core.String> buildUnnamed1202() => [
      'foo',
      'foo',
    ];

void checkUnnamed1202(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionDisksRemoveResourcePoliciesRequest = 0;
api.RegionDisksRemoveResourcePoliciesRequest
    buildRegionDisksRemoveResourcePoliciesRequest() {
  final o = api.RegionDisksRemoveResourcePoliciesRequest();
  buildCounterRegionDisksRemoveResourcePoliciesRequest++;
  if (buildCounterRegionDisksRemoveResourcePoliciesRequest < 3) {
    o.resourcePolicies = buildUnnamed1202();
  }
  buildCounterRegionDisksRemoveResourcePoliciesRequest--;
  return o;
}

void checkRegionDisksRemoveResourcePoliciesRequest(
    api.RegionDisksRemoveResourcePoliciesRequest o) {
  buildCounterRegionDisksRemoveResourcePoliciesRequest++;
  if (buildCounterRegionDisksRemoveResourcePoliciesRequest < 3) {
    checkUnnamed1202(o.resourcePolicies!);
  }
  buildCounterRegionDisksRemoveResourcePoliciesRequest--;
}

core.int buildCounterRegionDisksResizeRequest = 0;
api.RegionDisksResizeRequest buildRegionDisksResizeRequest() {
  final o = api.RegionDisksResizeRequest();
  buildCounterRegionDisksResizeRequest++;
  if (buildCounterRegionDisksResizeRequest < 3) {
    o.sizeGb = 'foo';
  }
  buildCounterRegionDisksResizeRequest--;
  return o;
}

void checkRegionDisksResizeRequest(api.RegionDisksResizeRequest o) {
  buildCounterRegionDisksResizeRequest++;
  if (buildCounterRegionDisksResizeRequest < 3) {
    unittest.expect(
      o.sizeGb!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionDisksResizeRequest--;
}

core.List<api.InstanceGroup> buildUnnamed1203() => [
      buildInstanceGroup(),
      buildInstanceGroup(),
    ];

void checkUnnamed1203(core.List<api.InstanceGroup> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroup(o[0]);
  checkInstanceGroup(o[1]);
}

core.int buildCounterRegionInstanceGroupListWarningData = 0;
api.RegionInstanceGroupListWarningData
    buildRegionInstanceGroupListWarningData() {
  final o = api.RegionInstanceGroupListWarningData();
  buildCounterRegionInstanceGroupListWarningData++;
  if (buildCounterRegionInstanceGroupListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionInstanceGroupListWarningData--;
  return o;
}

void checkRegionInstanceGroupListWarningData(
    api.RegionInstanceGroupListWarningData o) {
  buildCounterRegionInstanceGroupListWarningData++;
  if (buildCounterRegionInstanceGroupListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupListWarningData--;
}

core.List<api.RegionInstanceGroupListWarningData> buildUnnamed1204() => [
      buildRegionInstanceGroupListWarningData(),
      buildRegionInstanceGroupListWarningData(),
    ];

void checkUnnamed1204(core.List<api.RegionInstanceGroupListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionInstanceGroupListWarningData(o[0]);
  checkRegionInstanceGroupListWarningData(o[1]);
}

core.int buildCounterRegionInstanceGroupListWarning = 0;
api.RegionInstanceGroupListWarning buildRegionInstanceGroupListWarning() {
  final o = api.RegionInstanceGroupListWarning();
  buildCounterRegionInstanceGroupListWarning++;
  if (buildCounterRegionInstanceGroupListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1204();
    o.message = 'foo';
  }
  buildCounterRegionInstanceGroupListWarning--;
  return o;
}

void checkRegionInstanceGroupListWarning(api.RegionInstanceGroupListWarning o) {
  buildCounterRegionInstanceGroupListWarning++;
  if (buildCounterRegionInstanceGroupListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1204(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupListWarning--;
}

core.int buildCounterRegionInstanceGroupList = 0;
api.RegionInstanceGroupList buildRegionInstanceGroupList() {
  final o = api.RegionInstanceGroupList();
  buildCounterRegionInstanceGroupList++;
  if (buildCounterRegionInstanceGroupList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1203();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionInstanceGroupListWarning();
  }
  buildCounterRegionInstanceGroupList--;
  return o;
}

void checkRegionInstanceGroupList(api.RegionInstanceGroupList o) {
  buildCounterRegionInstanceGroupList++;
  if (buildCounterRegionInstanceGroupList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1203(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionInstanceGroupListWarning(o.warning!);
  }
  buildCounterRegionInstanceGroupList--;
}

core.List<core.String> buildUnnamed1205() => [
      'foo',
      'foo',
    ];

void checkUnnamed1205(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq = 0;
api.RegionInstanceGroupManagerDeleteInstanceConfigReq
    buildRegionInstanceGroupManagerDeleteInstanceConfigReq() {
  final o = api.RegionInstanceGroupManagerDeleteInstanceConfigReq();
  buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq < 3) {
    o.names = buildUnnamed1205();
  }
  buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq--;
  return o;
}

void checkRegionInstanceGroupManagerDeleteInstanceConfigReq(
    api.RegionInstanceGroupManagerDeleteInstanceConfigReq o) {
  buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq < 3) {
    checkUnnamed1205(o.names!);
  }
  buildCounterRegionInstanceGroupManagerDeleteInstanceConfigReq--;
}

core.List<api.InstanceGroupManager> buildUnnamed1206() => [
      buildInstanceGroupManager(),
      buildInstanceGroupManager(),
    ];

void checkUnnamed1206(core.List<api.InstanceGroupManager> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceGroupManager(o[0]);
  checkInstanceGroupManager(o[1]);
}

core.int buildCounterRegionInstanceGroupManagerListWarningData = 0;
api.RegionInstanceGroupManagerListWarningData
    buildRegionInstanceGroupManagerListWarningData() {
  final o = api.RegionInstanceGroupManagerListWarningData();
  buildCounterRegionInstanceGroupManagerListWarningData++;
  if (buildCounterRegionInstanceGroupManagerListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionInstanceGroupManagerListWarningData--;
  return o;
}

void checkRegionInstanceGroupManagerListWarningData(
    api.RegionInstanceGroupManagerListWarningData o) {
  buildCounterRegionInstanceGroupManagerListWarningData++;
  if (buildCounterRegionInstanceGroupManagerListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagerListWarningData--;
}

core.List<api.RegionInstanceGroupManagerListWarningData> buildUnnamed1207() => [
      buildRegionInstanceGroupManagerListWarningData(),
      buildRegionInstanceGroupManagerListWarningData(),
    ];

void checkUnnamed1207(
    core.List<api.RegionInstanceGroupManagerListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionInstanceGroupManagerListWarningData(o[0]);
  checkRegionInstanceGroupManagerListWarningData(o[1]);
}

core.int buildCounterRegionInstanceGroupManagerListWarning = 0;
api.RegionInstanceGroupManagerListWarning
    buildRegionInstanceGroupManagerListWarning() {
  final o = api.RegionInstanceGroupManagerListWarning();
  buildCounterRegionInstanceGroupManagerListWarning++;
  if (buildCounterRegionInstanceGroupManagerListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1207();
    o.message = 'foo';
  }
  buildCounterRegionInstanceGroupManagerListWarning--;
  return o;
}

void checkRegionInstanceGroupManagerListWarning(
    api.RegionInstanceGroupManagerListWarning o) {
  buildCounterRegionInstanceGroupManagerListWarning++;
  if (buildCounterRegionInstanceGroupManagerListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1207(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagerListWarning--;
}

core.int buildCounterRegionInstanceGroupManagerList = 0;
api.RegionInstanceGroupManagerList buildRegionInstanceGroupManagerList() {
  final o = api.RegionInstanceGroupManagerList();
  buildCounterRegionInstanceGroupManagerList++;
  if (buildCounterRegionInstanceGroupManagerList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1206();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionInstanceGroupManagerListWarning();
  }
  buildCounterRegionInstanceGroupManagerList--;
  return o;
}

void checkRegionInstanceGroupManagerList(api.RegionInstanceGroupManagerList o) {
  buildCounterRegionInstanceGroupManagerList++;
  if (buildCounterRegionInstanceGroupManagerList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1206(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionInstanceGroupManagerListWarning(o.warning!);
  }
  buildCounterRegionInstanceGroupManagerList--;
}

core.List<api.PerInstanceConfig> buildUnnamed1208() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1208(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq = 0;
api.RegionInstanceGroupManagerPatchInstanceConfigReq
    buildRegionInstanceGroupManagerPatchInstanceConfigReq() {
  final o = api.RegionInstanceGroupManagerPatchInstanceConfigReq();
  buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq < 3) {
    o.perInstanceConfigs = buildUnnamed1208();
  }
  buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq--;
  return o;
}

void checkRegionInstanceGroupManagerPatchInstanceConfigReq(
    api.RegionInstanceGroupManagerPatchInstanceConfigReq o) {
  buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq < 3) {
    checkUnnamed1208(o.perInstanceConfigs!);
  }
  buildCounterRegionInstanceGroupManagerPatchInstanceConfigReq--;
}

core.List<api.PerInstanceConfig> buildUnnamed1209() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1209(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq = 0;
api.RegionInstanceGroupManagerUpdateInstanceConfigReq
    buildRegionInstanceGroupManagerUpdateInstanceConfigReq() {
  final o = api.RegionInstanceGroupManagerUpdateInstanceConfigReq();
  buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq < 3) {
    o.perInstanceConfigs = buildUnnamed1209();
  }
  buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq--;
  return o;
}

void checkRegionInstanceGroupManagerUpdateInstanceConfigReq(
    api.RegionInstanceGroupManagerUpdateInstanceConfigReq o) {
  buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq++;
  if (buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq < 3) {
    checkUnnamed1209(o.perInstanceConfigs!);
  }
  buildCounterRegionInstanceGroupManagerUpdateInstanceConfigReq--;
}

core.List<core.String> buildUnnamed1210() => [
      'foo',
      'foo',
    ];

void checkUnnamed1210(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagersAbandonInstancesRequest = 0;
api.RegionInstanceGroupManagersAbandonInstancesRequest
    buildRegionInstanceGroupManagersAbandonInstancesRequest() {
  final o = api.RegionInstanceGroupManagersAbandonInstancesRequest();
  buildCounterRegionInstanceGroupManagersAbandonInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersAbandonInstancesRequest < 3) {
    o.instances = buildUnnamed1210();
  }
  buildCounterRegionInstanceGroupManagersAbandonInstancesRequest--;
  return o;
}

void checkRegionInstanceGroupManagersAbandonInstancesRequest(
    api.RegionInstanceGroupManagersAbandonInstancesRequest o) {
  buildCounterRegionInstanceGroupManagersAbandonInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersAbandonInstancesRequest < 3) {
    checkUnnamed1210(o.instances!);
  }
  buildCounterRegionInstanceGroupManagersAbandonInstancesRequest--;
}

core.List<core.String> buildUnnamed1211() => [
      'foo',
      'foo',
    ];

void checkUnnamed1211(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagersApplyUpdatesRequest = 0;
api.RegionInstanceGroupManagersApplyUpdatesRequest
    buildRegionInstanceGroupManagersApplyUpdatesRequest() {
  final o = api.RegionInstanceGroupManagersApplyUpdatesRequest();
  buildCounterRegionInstanceGroupManagersApplyUpdatesRequest++;
  if (buildCounterRegionInstanceGroupManagersApplyUpdatesRequest < 3) {
    o.allInstances = true;
    o.instances = buildUnnamed1211();
    o.minimalAction = 'foo';
    o.mostDisruptiveAllowedAction = 'foo';
  }
  buildCounterRegionInstanceGroupManagersApplyUpdatesRequest--;
  return o;
}

void checkRegionInstanceGroupManagersApplyUpdatesRequest(
    api.RegionInstanceGroupManagersApplyUpdatesRequest o) {
  buildCounterRegionInstanceGroupManagersApplyUpdatesRequest++;
  if (buildCounterRegionInstanceGroupManagersApplyUpdatesRequest < 3) {
    unittest.expect(o.allInstances!, unittest.isTrue);
    checkUnnamed1211(o.instances!);
    unittest.expect(
      o.minimalAction!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.mostDisruptiveAllowedAction!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersApplyUpdatesRequest--;
}

core.List<api.PerInstanceConfig> buildUnnamed1212() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1212(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int buildCounterRegionInstanceGroupManagersCreateInstancesRequest = 0;
api.RegionInstanceGroupManagersCreateInstancesRequest
    buildRegionInstanceGroupManagersCreateInstancesRequest() {
  final o = api.RegionInstanceGroupManagersCreateInstancesRequest();
  buildCounterRegionInstanceGroupManagersCreateInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersCreateInstancesRequest < 3) {
    o.instances = buildUnnamed1212();
  }
  buildCounterRegionInstanceGroupManagersCreateInstancesRequest--;
  return o;
}

void checkRegionInstanceGroupManagersCreateInstancesRequest(
    api.RegionInstanceGroupManagersCreateInstancesRequest o) {
  buildCounterRegionInstanceGroupManagersCreateInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersCreateInstancesRequest < 3) {
    checkUnnamed1212(o.instances!);
  }
  buildCounterRegionInstanceGroupManagersCreateInstancesRequest--;
}

core.List<core.String> buildUnnamed1213() => [
      'foo',
      'foo',
    ];

void checkUnnamed1213(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagersDeleteInstancesRequest = 0;
api.RegionInstanceGroupManagersDeleteInstancesRequest
    buildRegionInstanceGroupManagersDeleteInstancesRequest() {
  final o = api.RegionInstanceGroupManagersDeleteInstancesRequest();
  buildCounterRegionInstanceGroupManagersDeleteInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersDeleteInstancesRequest < 3) {
    o.instances = buildUnnamed1213();
    o.skipInstancesOnValidationError = true;
  }
  buildCounterRegionInstanceGroupManagersDeleteInstancesRequest--;
  return o;
}

void checkRegionInstanceGroupManagersDeleteInstancesRequest(
    api.RegionInstanceGroupManagersDeleteInstancesRequest o) {
  buildCounterRegionInstanceGroupManagersDeleteInstancesRequest++;
  if (buildCounterRegionInstanceGroupManagersDeleteInstancesRequest < 3) {
    checkUnnamed1213(o.instances!);
    unittest.expect(o.skipInstancesOnValidationError!, unittest.isTrue);
  }
  buildCounterRegionInstanceGroupManagersDeleteInstancesRequest--;
}

core.List<api.InstanceManagedByIgmError> buildUnnamed1214() => [
      buildInstanceManagedByIgmError(),
      buildInstanceManagedByIgmError(),
    ];

void checkUnnamed1214(core.List<api.InstanceManagedByIgmError> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceManagedByIgmError(o[0]);
  checkInstanceManagedByIgmError(o[1]);
}

core.int buildCounterRegionInstanceGroupManagersListErrorsResponse = 0;
api.RegionInstanceGroupManagersListErrorsResponse
    buildRegionInstanceGroupManagersListErrorsResponse() {
  final o = api.RegionInstanceGroupManagersListErrorsResponse();
  buildCounterRegionInstanceGroupManagersListErrorsResponse++;
  if (buildCounterRegionInstanceGroupManagersListErrorsResponse < 3) {
    o.items = buildUnnamed1214();
    o.nextPageToken = 'foo';
  }
  buildCounterRegionInstanceGroupManagersListErrorsResponse--;
  return o;
}

void checkRegionInstanceGroupManagersListErrorsResponse(
    api.RegionInstanceGroupManagersListErrorsResponse o) {
  buildCounterRegionInstanceGroupManagersListErrorsResponse++;
  if (buildCounterRegionInstanceGroupManagersListErrorsResponse < 3) {
    checkUnnamed1214(o.items!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersListErrorsResponse--;
}

core.List<api.PerInstanceConfig> buildUnnamed1215() => [
      buildPerInstanceConfig(),
      buildPerInstanceConfig(),
    ];

void checkUnnamed1215(core.List<api.PerInstanceConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPerInstanceConfig(o[0]);
  checkPerInstanceConfig(o[1]);
}

core.int
    buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData =
    0;
api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData
    buildRegionInstanceGroupManagersListInstanceConfigsRespWarningData() {
  final o = api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData();
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData <
      3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData--;
  return o;
}

void checkRegionInstanceGroupManagersListInstanceConfigsRespWarningData(
    api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData o) {
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData <
      3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarningData--;
}

core.List<api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData>
    buildUnnamed1216() => [
          buildRegionInstanceGroupManagersListInstanceConfigsRespWarningData(),
          buildRegionInstanceGroupManagersListInstanceConfigsRespWarningData(),
        ];

void checkUnnamed1216(
    core.List<api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData>
        o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionInstanceGroupManagersListInstanceConfigsRespWarningData(o[0]);
  checkRegionInstanceGroupManagersListInstanceConfigsRespWarningData(o[1]);
}

core.int buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning =
    0;
api.RegionInstanceGroupManagersListInstanceConfigsRespWarning
    buildRegionInstanceGroupManagersListInstanceConfigsRespWarning() {
  final o = api.RegionInstanceGroupManagersListInstanceConfigsRespWarning();
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning <
      3) {
    o.code = 'foo';
    o.data = buildUnnamed1216();
    o.message = 'foo';
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning--;
  return o;
}

void checkRegionInstanceGroupManagersListInstanceConfigsRespWarning(
    api.RegionInstanceGroupManagersListInstanceConfigsRespWarning o) {
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning <
      3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1216(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsRespWarning--;
}

core.int buildCounterRegionInstanceGroupManagersListInstanceConfigsResp = 0;
api.RegionInstanceGroupManagersListInstanceConfigsResp
    buildRegionInstanceGroupManagersListInstanceConfigsResp() {
  final o = api.RegionInstanceGroupManagersListInstanceConfigsResp();
  buildCounterRegionInstanceGroupManagersListInstanceConfigsResp++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsResp < 3) {
    o.items = buildUnnamed1215();
    o.nextPageToken = 'foo';
    o.warning =
        buildRegionInstanceGroupManagersListInstanceConfigsRespWarning();
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsResp--;
  return o;
}

void checkRegionInstanceGroupManagersListInstanceConfigsResp(
    api.RegionInstanceGroupManagersListInstanceConfigsResp o) {
  buildCounterRegionInstanceGroupManagersListInstanceConfigsResp++;
  if (buildCounterRegionInstanceGroupManagersListInstanceConfigsResp < 3) {
    checkUnnamed1215(o.items!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkRegionInstanceGroupManagersListInstanceConfigsRespWarning(o.warning!);
  }
  buildCounterRegionInstanceGroupManagersListInstanceConfigsResp--;
}

core.List<api.ManagedInstance> buildUnnamed1217() => [
      buildManagedInstance(),
      buildManagedInstance(),
    ];

void checkUnnamed1217(core.List<api.ManagedInstance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkManagedInstance(o[0]);
  checkManagedInstance(o[1]);
}

core.int buildCounterRegionInstanceGroupManagersListInstancesResponse = 0;
api.RegionInstanceGroupManagersListInstancesResponse
    buildRegionInstanceGroupManagersListInstancesResponse() {
  final o = api.RegionInstanceGroupManagersListInstancesResponse();
  buildCounterRegionInstanceGroupManagersListInstancesResponse++;
  if (buildCounterRegionInstanceGroupManagersListInstancesResponse < 3) {
    o.managedInstances = buildUnnamed1217();
    o.nextPageToken = 'foo';
  }
  buildCounterRegionInstanceGroupManagersListInstancesResponse--;
  return o;
}

void checkRegionInstanceGroupManagersListInstancesResponse(
    api.RegionInstanceGroupManagersListInstancesResponse o) {
  buildCounterRegionInstanceGroupManagersListInstancesResponse++;
  if (buildCounterRegionInstanceGroupManagersListInstancesResponse < 3) {
    checkUnnamed1217(o.managedInstances!);
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersListInstancesResponse--;
}

core.List<core.String> buildUnnamed1218() => [
      'foo',
      'foo',
    ];

void checkUnnamed1218(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagersRecreateRequest = 0;
api.RegionInstanceGroupManagersRecreateRequest
    buildRegionInstanceGroupManagersRecreateRequest() {
  final o = api.RegionInstanceGroupManagersRecreateRequest();
  buildCounterRegionInstanceGroupManagersRecreateRequest++;
  if (buildCounterRegionInstanceGroupManagersRecreateRequest < 3) {
    o.instances = buildUnnamed1218();
  }
  buildCounterRegionInstanceGroupManagersRecreateRequest--;
  return o;
}

void checkRegionInstanceGroupManagersRecreateRequest(
    api.RegionInstanceGroupManagersRecreateRequest o) {
  buildCounterRegionInstanceGroupManagersRecreateRequest++;
  if (buildCounterRegionInstanceGroupManagersRecreateRequest < 3) {
    checkUnnamed1218(o.instances!);
  }
  buildCounterRegionInstanceGroupManagersRecreateRequest--;
}

core.List<core.String> buildUnnamed1219() => [
      'foo',
      'foo',
    ];

void checkUnnamed1219(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest = 0;
api.RegionInstanceGroupManagersSetTargetPoolsRequest
    buildRegionInstanceGroupManagersSetTargetPoolsRequest() {
  final o = api.RegionInstanceGroupManagersSetTargetPoolsRequest();
  buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest++;
  if (buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest < 3) {
    o.fingerprint = 'foo';
    o.targetPools = buildUnnamed1219();
  }
  buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest--;
  return o;
}

void checkRegionInstanceGroupManagersSetTargetPoolsRequest(
    api.RegionInstanceGroupManagersSetTargetPoolsRequest o) {
  buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest++;
  if (buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1219(o.targetPools!);
  }
  buildCounterRegionInstanceGroupManagersSetTargetPoolsRequest--;
}

core.int buildCounterRegionInstanceGroupManagersSetTemplateRequest = 0;
api.RegionInstanceGroupManagersSetTemplateRequest
    buildRegionInstanceGroupManagersSetTemplateRequest() {
  final o = api.RegionInstanceGroupManagersSetTemplateRequest();
  buildCounterRegionInstanceGroupManagersSetTemplateRequest++;
  if (buildCounterRegionInstanceGroupManagersSetTemplateRequest < 3) {
    o.instanceTemplate = 'foo';
  }
  buildCounterRegionInstanceGroupManagersSetTemplateRequest--;
  return o;
}

void checkRegionInstanceGroupManagersSetTemplateRequest(
    api.RegionInstanceGroupManagersSetTemplateRequest o) {
  buildCounterRegionInstanceGroupManagersSetTemplateRequest++;
  if (buildCounterRegionInstanceGroupManagersSetTemplateRequest < 3) {
    unittest.expect(
      o.instanceTemplate!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupManagersSetTemplateRequest--;
}

core.List<api.InstanceWithNamedPorts> buildUnnamed1220() => [
      buildInstanceWithNamedPorts(),
      buildInstanceWithNamedPorts(),
    ];

void checkUnnamed1220(core.List<api.InstanceWithNamedPorts> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceWithNamedPorts(o[0]);
  checkInstanceWithNamedPorts(o[1]);
}

core.int buildCounterRegionInstanceGroupsListInstancesWarningData = 0;
api.RegionInstanceGroupsListInstancesWarningData
    buildRegionInstanceGroupsListInstancesWarningData() {
  final o = api.RegionInstanceGroupsListInstancesWarningData();
  buildCounterRegionInstanceGroupsListInstancesWarningData++;
  if (buildCounterRegionInstanceGroupsListInstancesWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionInstanceGroupsListInstancesWarningData--;
  return o;
}

void checkRegionInstanceGroupsListInstancesWarningData(
    api.RegionInstanceGroupsListInstancesWarningData o) {
  buildCounterRegionInstanceGroupsListInstancesWarningData++;
  if (buildCounterRegionInstanceGroupsListInstancesWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupsListInstancesWarningData--;
}

core.List<api.RegionInstanceGroupsListInstancesWarningData>
    buildUnnamed1221() => [
          buildRegionInstanceGroupsListInstancesWarningData(),
          buildRegionInstanceGroupsListInstancesWarningData(),
        ];

void checkUnnamed1221(
    core.List<api.RegionInstanceGroupsListInstancesWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionInstanceGroupsListInstancesWarningData(o[0]);
  checkRegionInstanceGroupsListInstancesWarningData(o[1]);
}

core.int buildCounterRegionInstanceGroupsListInstancesWarning = 0;
api.RegionInstanceGroupsListInstancesWarning
    buildRegionInstanceGroupsListInstancesWarning() {
  final o = api.RegionInstanceGroupsListInstancesWarning();
  buildCounterRegionInstanceGroupsListInstancesWarning++;
  if (buildCounterRegionInstanceGroupsListInstancesWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1221();
    o.message = 'foo';
  }
  buildCounterRegionInstanceGroupsListInstancesWarning--;
  return o;
}

void checkRegionInstanceGroupsListInstancesWarning(
    api.RegionInstanceGroupsListInstancesWarning o) {
  buildCounterRegionInstanceGroupsListInstancesWarning++;
  if (buildCounterRegionInstanceGroupsListInstancesWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1221(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupsListInstancesWarning--;
}

core.int buildCounterRegionInstanceGroupsListInstances = 0;
api.RegionInstanceGroupsListInstances buildRegionInstanceGroupsListInstances() {
  final o = api.RegionInstanceGroupsListInstances();
  buildCounterRegionInstanceGroupsListInstances++;
  if (buildCounterRegionInstanceGroupsListInstances < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1220();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionInstanceGroupsListInstancesWarning();
  }
  buildCounterRegionInstanceGroupsListInstances--;
  return o;
}

void checkRegionInstanceGroupsListInstances(
    api.RegionInstanceGroupsListInstances o) {
  buildCounterRegionInstanceGroupsListInstances++;
  if (buildCounterRegionInstanceGroupsListInstances < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1220(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionInstanceGroupsListInstancesWarning(o.warning!);
  }
  buildCounterRegionInstanceGroupsListInstances--;
}

core.int buildCounterRegionInstanceGroupsListInstancesRequest = 0;
api.RegionInstanceGroupsListInstancesRequest
    buildRegionInstanceGroupsListInstancesRequest() {
  final o = api.RegionInstanceGroupsListInstancesRequest();
  buildCounterRegionInstanceGroupsListInstancesRequest++;
  if (buildCounterRegionInstanceGroupsListInstancesRequest < 3) {
    o.instanceState = 'foo';
    o.portName = 'foo';
  }
  buildCounterRegionInstanceGroupsListInstancesRequest--;
  return o;
}

void checkRegionInstanceGroupsListInstancesRequest(
    api.RegionInstanceGroupsListInstancesRequest o) {
  buildCounterRegionInstanceGroupsListInstancesRequest++;
  if (buildCounterRegionInstanceGroupsListInstancesRequest < 3) {
    unittest.expect(
      o.instanceState!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionInstanceGroupsListInstancesRequest--;
}

core.List<api.NamedPort> buildUnnamed1222() => [
      buildNamedPort(),
      buildNamedPort(),
    ];

void checkUnnamed1222(core.List<api.NamedPort> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkNamedPort(o[0]);
  checkNamedPort(o[1]);
}

core.int buildCounterRegionInstanceGroupsSetNamedPortsRequest = 0;
api.RegionInstanceGroupsSetNamedPortsRequest
    buildRegionInstanceGroupsSetNamedPortsRequest() {
  final o = api.RegionInstanceGroupsSetNamedPortsRequest();
  buildCounterRegionInstanceGroupsSetNamedPortsRequest++;
  if (buildCounterRegionInstanceGroupsSetNamedPortsRequest < 3) {
    o.fingerprint = 'foo';
    o.namedPorts = buildUnnamed1222();
  }
  buildCounterRegionInstanceGroupsSetNamedPortsRequest--;
  return o;
}

void checkRegionInstanceGroupsSetNamedPortsRequest(
    api.RegionInstanceGroupsSetNamedPortsRequest o) {
  buildCounterRegionInstanceGroupsSetNamedPortsRequest++;
  if (buildCounterRegionInstanceGroupsSetNamedPortsRequest < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1222(o.namedPorts!);
  }
  buildCounterRegionInstanceGroupsSetNamedPortsRequest--;
}

core.List<api.Region> buildUnnamed1223() => [
      buildRegion(),
      buildRegion(),
    ];

void checkUnnamed1223(core.List<api.Region> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegion(o[0]);
  checkRegion(o[1]);
}

core.int buildCounterRegionListWarningData = 0;
api.RegionListWarningData buildRegionListWarningData() {
  final o = api.RegionListWarningData();
  buildCounterRegionListWarningData++;
  if (buildCounterRegionListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRegionListWarningData--;
  return o;
}

void checkRegionListWarningData(api.RegionListWarningData o) {
  buildCounterRegionListWarningData++;
  if (buildCounterRegionListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionListWarningData--;
}

core.List<api.RegionListWarningData> buildUnnamed1224() => [
      buildRegionListWarningData(),
      buildRegionListWarningData(),
    ];

void checkUnnamed1224(core.List<api.RegionListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRegionListWarningData(o[0]);
  checkRegionListWarningData(o[1]);
}

core.int buildCounterRegionListWarning = 0;
api.RegionListWarning buildRegionListWarning() {
  final o = api.RegionListWarning();
  buildCounterRegionListWarning++;
  if (buildCounterRegionListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1224();
    o.message = 'foo';
  }
  buildCounterRegionListWarning--;
  return o;
}

void checkRegionListWarning(api.RegionListWarning o) {
  buildCounterRegionListWarning++;
  if (buildCounterRegionListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1224(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRegionListWarning--;
}

core.int buildCounterRegionList = 0;
api.RegionList buildRegionList() {
  final o = api.RegionList();
  buildCounterRegionList++;
  if (buildCounterRegionList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1223();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRegionListWarning();
  }
  buildCounterRegionList--;
  return o;
}

void checkRegionList(api.RegionList o) {
  buildCounterRegionList++;
  if (buildCounterRegionList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1223(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRegionListWarning(o.warning!);
  }
  buildCounterRegionList--;
}

core.Map<core.String, core.String> buildUnnamed1225() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1225(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionSetLabelsRequest = 0;
api.RegionSetLabelsRequest buildRegionSetLabelsRequest() {
  final o = api.RegionSetLabelsRequest();
  buildCounterRegionSetLabelsRequest++;
  if (buildCounterRegionSetLabelsRequest < 3) {
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed1225();
  }
  buildCounterRegionSetLabelsRequest--;
  return o;
}

void checkRegionSetLabelsRequest(api.RegionSetLabelsRequest o) {
  buildCounterRegionSetLabelsRequest++;
  if (buildCounterRegionSetLabelsRequest < 3) {
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1225(o.labels!);
  }
  buildCounterRegionSetLabelsRequest--;
}

core.List<api.Binding> buildUnnamed1226() => [
      buildBinding(),
      buildBinding(),
    ];

void checkUnnamed1226(core.List<api.Binding> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBinding(o[0]);
  checkBinding(o[1]);
}

core.int buildCounterRegionSetPolicyRequest = 0;
api.RegionSetPolicyRequest buildRegionSetPolicyRequest() {
  final o = api.RegionSetPolicyRequest();
  buildCounterRegionSetPolicyRequest++;
  if (buildCounterRegionSetPolicyRequest < 3) {
    o.bindings = buildUnnamed1226();
    o.etag = 'foo';
    o.policy = buildPolicy();
  }
  buildCounterRegionSetPolicyRequest--;
  return o;
}

void checkRegionSetPolicyRequest(api.RegionSetPolicyRequest o) {
  buildCounterRegionSetPolicyRequest++;
  if (buildCounterRegionSetPolicyRequest < 3) {
    checkUnnamed1226(o.bindings!);
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    checkPolicy(o.policy!);
  }
  buildCounterRegionSetPolicyRequest--;
}

core.List<core.String> buildUnnamed1227() => [
      'foo',
      'foo',
    ];

void checkUnnamed1227(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest = 0;
api.RegionTargetHttpsProxiesSetSslCertificatesRequest
    buildRegionTargetHttpsProxiesSetSslCertificatesRequest() {
  final o = api.RegionTargetHttpsProxiesSetSslCertificatesRequest();
  buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest++;
  if (buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest < 3) {
    o.sslCertificates = buildUnnamed1227();
  }
  buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest--;
  return o;
}

void checkRegionTargetHttpsProxiesSetSslCertificatesRequest(
    api.RegionTargetHttpsProxiesSetSslCertificatesRequest o) {
  buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest++;
  if (buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest < 3) {
    checkUnnamed1227(o.sslCertificates!);
  }
  buildCounterRegionTargetHttpsProxiesSetSslCertificatesRequest--;
}

core.int buildCounterRegionUrlMapsValidateRequest = 0;
api.RegionUrlMapsValidateRequest buildRegionUrlMapsValidateRequest() {
  final o = api.RegionUrlMapsValidateRequest();
  buildCounterRegionUrlMapsValidateRequest++;
  if (buildCounterRegionUrlMapsValidateRequest < 3) {
    o.resource = buildUrlMap();
  }
  buildCounterRegionUrlMapsValidateRequest--;
  return o;
}

void checkRegionUrlMapsValidateRequest(api.RegionUrlMapsValidateRequest o) {
  buildCounterRegionUrlMapsValidateRequest++;
  if (buildCounterRegionUrlMapsValidateRequest < 3) {
    checkUrlMap(o.resource!);
  }
  buildCounterRegionUrlMapsValidateRequest--;
}

core.int buildCounterRequestMirrorPolicy = 0;
api.RequestMirrorPolicy buildRequestMirrorPolicy() {
  final o = api.RequestMirrorPolicy();
  buildCounterRequestMirrorPolicy++;
  if (buildCounterRequestMirrorPolicy < 3) {
    o.backendService = 'foo';
  }
  buildCounterRequestMirrorPolicy--;
  return o;
}

void checkRequestMirrorPolicy(api.RequestMirrorPolicy o) {
  buildCounterRequestMirrorPolicy++;
  if (buildCounterRequestMirrorPolicy < 3) {
    unittest.expect(
      o.backendService!,
      unittest.equals('foo'),
    );
  }
  buildCounterRequestMirrorPolicy--;
}

core.int buildCounterReservation = 0;
api.Reservation buildReservation() {
  final o = api.Reservation();
  buildCounterReservation++;
  if (buildCounterReservation < 3) {
    o.commitment = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.satisfiesPzs = true;
    o.selfLink = 'foo';
    o.specificReservation = buildAllocationSpecificSKUReservation();
    o.specificReservationRequired = true;
    o.status = 'foo';
    o.zone = 'foo';
  }
  buildCounterReservation--;
  return o;
}

void checkReservation(api.Reservation o) {
  buildCounterReservation++;
  if (buildCounterReservation < 3) {
    unittest.expect(
      o.commitment!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkAllocationSpecificSKUReservation(o.specificReservation!);
    unittest.expect(o.specificReservationRequired!, unittest.isTrue);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservation--;
}

core.List<core.String> buildUnnamed1228() => [
      'foo',
      'foo',
    ];

void checkUnnamed1228(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterReservationAffinity = 0;
api.ReservationAffinity buildReservationAffinity() {
  final o = api.ReservationAffinity();
  buildCounterReservationAffinity++;
  if (buildCounterReservationAffinity < 3) {
    o.consumeReservationType = 'foo';
    o.key = 'foo';
    o.values = buildUnnamed1228();
  }
  buildCounterReservationAffinity--;
  return o;
}

void checkReservationAffinity(api.ReservationAffinity o) {
  buildCounterReservationAffinity++;
  if (buildCounterReservationAffinity < 3) {
    unittest.expect(
      o.consumeReservationType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    checkUnnamed1228(o.values!);
  }
  buildCounterReservationAffinity--;
}

core.Map<core.String, api.ReservationsScopedList> buildUnnamed1229() => {
      'x': buildReservationsScopedList(),
      'y': buildReservationsScopedList(),
    };

void checkUnnamed1229(core.Map<core.String, api.ReservationsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservationsScopedList(o['x']!);
  checkReservationsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1230() => [
      'foo',
      'foo',
    ];

void checkUnnamed1230(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterReservationAggregatedListWarningData = 0;
api.ReservationAggregatedListWarningData
    buildReservationAggregatedListWarningData() {
  final o = api.ReservationAggregatedListWarningData();
  buildCounterReservationAggregatedListWarningData++;
  if (buildCounterReservationAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterReservationAggregatedListWarningData--;
  return o;
}

void checkReservationAggregatedListWarningData(
    api.ReservationAggregatedListWarningData o) {
  buildCounterReservationAggregatedListWarningData++;
  if (buildCounterReservationAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationAggregatedListWarningData--;
}

core.List<api.ReservationAggregatedListWarningData> buildUnnamed1231() => [
      buildReservationAggregatedListWarningData(),
      buildReservationAggregatedListWarningData(),
    ];

void checkUnnamed1231(core.List<api.ReservationAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservationAggregatedListWarningData(o[0]);
  checkReservationAggregatedListWarningData(o[1]);
}

core.int buildCounterReservationAggregatedListWarning = 0;
api.ReservationAggregatedListWarning buildReservationAggregatedListWarning() {
  final o = api.ReservationAggregatedListWarning();
  buildCounterReservationAggregatedListWarning++;
  if (buildCounterReservationAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1231();
    o.message = 'foo';
  }
  buildCounterReservationAggregatedListWarning--;
  return o;
}

void checkReservationAggregatedListWarning(
    api.ReservationAggregatedListWarning o) {
  buildCounterReservationAggregatedListWarning++;
  if (buildCounterReservationAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1231(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationAggregatedListWarning--;
}

core.int buildCounterReservationAggregatedList = 0;
api.ReservationAggregatedList buildReservationAggregatedList() {
  final o = api.ReservationAggregatedList();
  buildCounterReservationAggregatedList++;
  if (buildCounterReservationAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1229();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1230();
    o.warning = buildReservationAggregatedListWarning();
  }
  buildCounterReservationAggregatedList--;
  return o;
}

void checkReservationAggregatedList(api.ReservationAggregatedList o) {
  buildCounterReservationAggregatedList++;
  if (buildCounterReservationAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1229(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1230(o.unreachables!);
    checkReservationAggregatedListWarning(o.warning!);
  }
  buildCounterReservationAggregatedList--;
}

core.List<api.Reservation> buildUnnamed1232() => [
      buildReservation(),
      buildReservation(),
    ];

void checkUnnamed1232(core.List<api.Reservation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservation(o[0]);
  checkReservation(o[1]);
}

core.int buildCounterReservationListWarningData = 0;
api.ReservationListWarningData buildReservationListWarningData() {
  final o = api.ReservationListWarningData();
  buildCounterReservationListWarningData++;
  if (buildCounterReservationListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterReservationListWarningData--;
  return o;
}

void checkReservationListWarningData(api.ReservationListWarningData o) {
  buildCounterReservationListWarningData++;
  if (buildCounterReservationListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationListWarningData--;
}

core.List<api.ReservationListWarningData> buildUnnamed1233() => [
      buildReservationListWarningData(),
      buildReservationListWarningData(),
    ];

void checkUnnamed1233(core.List<api.ReservationListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservationListWarningData(o[0]);
  checkReservationListWarningData(o[1]);
}

core.int buildCounterReservationListWarning = 0;
api.ReservationListWarning buildReservationListWarning() {
  final o = api.ReservationListWarning();
  buildCounterReservationListWarning++;
  if (buildCounterReservationListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1233();
    o.message = 'foo';
  }
  buildCounterReservationListWarning--;
  return o;
}

void checkReservationListWarning(api.ReservationListWarning o) {
  buildCounterReservationListWarning++;
  if (buildCounterReservationListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1233(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationListWarning--;
}

core.int buildCounterReservationList = 0;
api.ReservationList buildReservationList() {
  final o = api.ReservationList();
  buildCounterReservationList++;
  if (buildCounterReservationList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1232();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildReservationListWarning();
  }
  buildCounterReservationList--;
  return o;
}

void checkReservationList(api.ReservationList o) {
  buildCounterReservationList++;
  if (buildCounterReservationList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1232(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkReservationListWarning(o.warning!);
  }
  buildCounterReservationList--;
}

core.int buildCounterReservationsResizeRequest = 0;
api.ReservationsResizeRequest buildReservationsResizeRequest() {
  final o = api.ReservationsResizeRequest();
  buildCounterReservationsResizeRequest++;
  if (buildCounterReservationsResizeRequest < 3) {
    o.specificSkuCount = 'foo';
  }
  buildCounterReservationsResizeRequest--;
  return o;
}

void checkReservationsResizeRequest(api.ReservationsResizeRequest o) {
  buildCounterReservationsResizeRequest++;
  if (buildCounterReservationsResizeRequest < 3) {
    unittest.expect(
      o.specificSkuCount!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationsResizeRequest--;
}

core.List<api.Reservation> buildUnnamed1234() => [
      buildReservation(),
      buildReservation(),
    ];

void checkUnnamed1234(core.List<api.Reservation> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservation(o[0]);
  checkReservation(o[1]);
}

core.int buildCounterReservationsScopedListWarningData = 0;
api.ReservationsScopedListWarningData buildReservationsScopedListWarningData() {
  final o = api.ReservationsScopedListWarningData();
  buildCounterReservationsScopedListWarningData++;
  if (buildCounterReservationsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterReservationsScopedListWarningData--;
  return o;
}

void checkReservationsScopedListWarningData(
    api.ReservationsScopedListWarningData o) {
  buildCounterReservationsScopedListWarningData++;
  if (buildCounterReservationsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationsScopedListWarningData--;
}

core.List<api.ReservationsScopedListWarningData> buildUnnamed1235() => [
      buildReservationsScopedListWarningData(),
      buildReservationsScopedListWarningData(),
    ];

void checkUnnamed1235(core.List<api.ReservationsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkReservationsScopedListWarningData(o[0]);
  checkReservationsScopedListWarningData(o[1]);
}

core.int buildCounterReservationsScopedListWarning = 0;
api.ReservationsScopedListWarning buildReservationsScopedListWarning() {
  final o = api.ReservationsScopedListWarning();
  buildCounterReservationsScopedListWarning++;
  if (buildCounterReservationsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1235();
    o.message = 'foo';
  }
  buildCounterReservationsScopedListWarning--;
  return o;
}

void checkReservationsScopedListWarning(api.ReservationsScopedListWarning o) {
  buildCounterReservationsScopedListWarning++;
  if (buildCounterReservationsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1235(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterReservationsScopedListWarning--;
}

core.int buildCounterReservationsScopedList = 0;
api.ReservationsScopedList buildReservationsScopedList() {
  final o = api.ReservationsScopedList();
  buildCounterReservationsScopedList++;
  if (buildCounterReservationsScopedList < 3) {
    o.reservations = buildUnnamed1234();
    o.warning = buildReservationsScopedListWarning();
  }
  buildCounterReservationsScopedList--;
  return o;
}

void checkReservationsScopedList(api.ReservationsScopedList o) {
  buildCounterReservationsScopedList++;
  if (buildCounterReservationsScopedList < 3) {
    checkUnnamed1234(o.reservations!);
    checkReservationsScopedListWarning(o.warning!);
  }
  buildCounterReservationsScopedList--;
}

core.int buildCounterResourceCommitment = 0;
api.ResourceCommitment buildResourceCommitment() {
  final o = api.ResourceCommitment();
  buildCounterResourceCommitment++;
  if (buildCounterResourceCommitment < 3) {
    o.acceleratorType = 'foo';
    o.amount = 'foo';
    o.type = 'foo';
  }
  buildCounterResourceCommitment--;
  return o;
}

void checkResourceCommitment(api.ResourceCommitment o) {
  buildCounterResourceCommitment++;
  if (buildCounterResourceCommitment < 3) {
    unittest.expect(
      o.acceleratorType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.amount!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourceCommitment--;
}

core.int buildCounterResourceGroupReference = 0;
api.ResourceGroupReference buildResourceGroupReference() {
  final o = api.ResourceGroupReference();
  buildCounterResourceGroupReference++;
  if (buildCounterResourceGroupReference < 3) {
    o.group = 'foo';
  }
  buildCounterResourceGroupReference--;
  return o;
}

void checkResourceGroupReference(api.ResourceGroupReference o) {
  buildCounterResourceGroupReference++;
  if (buildCounterResourceGroupReference < 3) {
    unittest.expect(
      o.group!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourceGroupReference--;
}

core.List<api.ResourcePolicy> buildUnnamed1236() => [
      buildResourcePolicy(),
      buildResourcePolicy(),
    ];

void checkUnnamed1236(core.List<api.ResourcePolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePolicy(o[0]);
  checkResourcePolicy(o[1]);
}

core.int buildCounterResourcePoliciesScopedListWarningData = 0;
api.ResourcePoliciesScopedListWarningData
    buildResourcePoliciesScopedListWarningData() {
  final o = api.ResourcePoliciesScopedListWarningData();
  buildCounterResourcePoliciesScopedListWarningData++;
  if (buildCounterResourcePoliciesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterResourcePoliciesScopedListWarningData--;
  return o;
}

void checkResourcePoliciesScopedListWarningData(
    api.ResourcePoliciesScopedListWarningData o) {
  buildCounterResourcePoliciesScopedListWarningData++;
  if (buildCounterResourcePoliciesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePoliciesScopedListWarningData--;
}

core.List<api.ResourcePoliciesScopedListWarningData> buildUnnamed1237() => [
      buildResourcePoliciesScopedListWarningData(),
      buildResourcePoliciesScopedListWarningData(),
    ];

void checkUnnamed1237(core.List<api.ResourcePoliciesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePoliciesScopedListWarningData(o[0]);
  checkResourcePoliciesScopedListWarningData(o[1]);
}

core.int buildCounterResourcePoliciesScopedListWarning = 0;
api.ResourcePoliciesScopedListWarning buildResourcePoliciesScopedListWarning() {
  final o = api.ResourcePoliciesScopedListWarning();
  buildCounterResourcePoliciesScopedListWarning++;
  if (buildCounterResourcePoliciesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1237();
    o.message = 'foo';
  }
  buildCounterResourcePoliciesScopedListWarning--;
  return o;
}

void checkResourcePoliciesScopedListWarning(
    api.ResourcePoliciesScopedListWarning o) {
  buildCounterResourcePoliciesScopedListWarning++;
  if (buildCounterResourcePoliciesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1237(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePoliciesScopedListWarning--;
}

core.int buildCounterResourcePoliciesScopedList = 0;
api.ResourcePoliciesScopedList buildResourcePoliciesScopedList() {
  final o = api.ResourcePoliciesScopedList();
  buildCounterResourcePoliciesScopedList++;
  if (buildCounterResourcePoliciesScopedList < 3) {
    o.resourcePolicies = buildUnnamed1236();
    o.warning = buildResourcePoliciesScopedListWarning();
  }
  buildCounterResourcePoliciesScopedList--;
  return o;
}

void checkResourcePoliciesScopedList(api.ResourcePoliciesScopedList o) {
  buildCounterResourcePoliciesScopedList++;
  if (buildCounterResourcePoliciesScopedList < 3) {
    checkUnnamed1236(o.resourcePolicies!);
    checkResourcePoliciesScopedListWarning(o.warning!);
  }
  buildCounterResourcePoliciesScopedList--;
}

core.int buildCounterResourcePolicy = 0;
api.ResourcePolicy buildResourcePolicy() {
  final o = api.ResourcePolicy();
  buildCounterResourcePolicy++;
  if (buildCounterResourcePolicy < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.groupPlacementPolicy = buildResourcePolicyGroupPlacementPolicy();
    o.id = 'foo';
    o.instanceSchedulePolicy = buildResourcePolicyInstanceSchedulePolicy();
    o.kind = 'foo';
    o.name = 'foo';
    o.region = 'foo';
    o.resourceStatus = buildResourcePolicyResourceStatus();
    o.selfLink = 'foo';
    o.snapshotSchedulePolicy = buildResourcePolicySnapshotSchedulePolicy();
    o.status = 'foo';
  }
  buildCounterResourcePolicy--;
  return o;
}

void checkResourcePolicy(api.ResourcePolicy o) {
  buildCounterResourcePolicy++;
  if (buildCounterResourcePolicy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkResourcePolicyGroupPlacementPolicy(o.groupPlacementPolicy!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkResourcePolicyInstanceSchedulePolicy(o.instanceSchedulePolicy!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    checkResourcePolicyResourceStatus(o.resourceStatus!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkResourcePolicySnapshotSchedulePolicy(o.snapshotSchedulePolicy!);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicy--;
}

core.Map<core.String, api.ResourcePoliciesScopedList> buildUnnamed1238() => {
      'x': buildResourcePoliciesScopedList(),
      'y': buildResourcePoliciesScopedList(),
    };

void checkUnnamed1238(core.Map<core.String, api.ResourcePoliciesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePoliciesScopedList(o['x']!);
  checkResourcePoliciesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1239() => [
      'foo',
      'foo',
    ];

void checkUnnamed1239(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterResourcePolicyAggregatedListWarningData = 0;
api.ResourcePolicyAggregatedListWarningData
    buildResourcePolicyAggregatedListWarningData() {
  final o = api.ResourcePolicyAggregatedListWarningData();
  buildCounterResourcePolicyAggregatedListWarningData++;
  if (buildCounterResourcePolicyAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterResourcePolicyAggregatedListWarningData--;
  return o;
}

void checkResourcePolicyAggregatedListWarningData(
    api.ResourcePolicyAggregatedListWarningData o) {
  buildCounterResourcePolicyAggregatedListWarningData++;
  if (buildCounterResourcePolicyAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyAggregatedListWarningData--;
}

core.List<api.ResourcePolicyAggregatedListWarningData> buildUnnamed1240() => [
      buildResourcePolicyAggregatedListWarningData(),
      buildResourcePolicyAggregatedListWarningData(),
    ];

void checkUnnamed1240(
    core.List<api.ResourcePolicyAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePolicyAggregatedListWarningData(o[0]);
  checkResourcePolicyAggregatedListWarningData(o[1]);
}

core.int buildCounterResourcePolicyAggregatedListWarning = 0;
api.ResourcePolicyAggregatedListWarning
    buildResourcePolicyAggregatedListWarning() {
  final o = api.ResourcePolicyAggregatedListWarning();
  buildCounterResourcePolicyAggregatedListWarning++;
  if (buildCounterResourcePolicyAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1240();
    o.message = 'foo';
  }
  buildCounterResourcePolicyAggregatedListWarning--;
  return o;
}

void checkResourcePolicyAggregatedListWarning(
    api.ResourcePolicyAggregatedListWarning o) {
  buildCounterResourcePolicyAggregatedListWarning++;
  if (buildCounterResourcePolicyAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1240(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyAggregatedListWarning--;
}

core.int buildCounterResourcePolicyAggregatedList = 0;
api.ResourcePolicyAggregatedList buildResourcePolicyAggregatedList() {
  final o = api.ResourcePolicyAggregatedList();
  buildCounterResourcePolicyAggregatedList++;
  if (buildCounterResourcePolicyAggregatedList < 3) {
    o.etag = 'foo';
    o.id = 'foo';
    o.items = buildUnnamed1238();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1239();
    o.warning = buildResourcePolicyAggregatedListWarning();
  }
  buildCounterResourcePolicyAggregatedList--;
  return o;
}

void checkResourcePolicyAggregatedList(api.ResourcePolicyAggregatedList o) {
  buildCounterResourcePolicyAggregatedList++;
  if (buildCounterResourcePolicyAggregatedList < 3) {
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1238(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1239(o.unreachables!);
    checkResourcePolicyAggregatedListWarning(o.warning!);
  }
  buildCounterResourcePolicyAggregatedList--;
}

core.int buildCounterResourcePolicyDailyCycle = 0;
api.ResourcePolicyDailyCycle buildResourcePolicyDailyCycle() {
  final o = api.ResourcePolicyDailyCycle();
  buildCounterResourcePolicyDailyCycle++;
  if (buildCounterResourcePolicyDailyCycle < 3) {
    o.daysInCycle = 42;
    o.duration = 'foo';
    o.startTime = 'foo';
  }
  buildCounterResourcePolicyDailyCycle--;
  return o;
}

void checkResourcePolicyDailyCycle(api.ResourcePolicyDailyCycle o) {
  buildCounterResourcePolicyDailyCycle++;
  if (buildCounterResourcePolicyDailyCycle < 3) {
    unittest.expect(
      o.daysInCycle!,
      unittest.equals(42),
    );
    unittest.expect(
      o.duration!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyDailyCycle--;
}

core.int buildCounterResourcePolicyGroupPlacementPolicy = 0;
api.ResourcePolicyGroupPlacementPolicy
    buildResourcePolicyGroupPlacementPolicy() {
  final o = api.ResourcePolicyGroupPlacementPolicy();
  buildCounterResourcePolicyGroupPlacementPolicy++;
  if (buildCounterResourcePolicyGroupPlacementPolicy < 3) {
    o.availabilityDomainCount = 42;
    o.collocation = 'foo';
    o.vmCount = 42;
  }
  buildCounterResourcePolicyGroupPlacementPolicy--;
  return o;
}

void checkResourcePolicyGroupPlacementPolicy(
    api.ResourcePolicyGroupPlacementPolicy o) {
  buildCounterResourcePolicyGroupPlacementPolicy++;
  if (buildCounterResourcePolicyGroupPlacementPolicy < 3) {
    unittest.expect(
      o.availabilityDomainCount!,
      unittest.equals(42),
    );
    unittest.expect(
      o.collocation!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.vmCount!,
      unittest.equals(42),
    );
  }
  buildCounterResourcePolicyGroupPlacementPolicy--;
}

core.int buildCounterResourcePolicyHourlyCycle = 0;
api.ResourcePolicyHourlyCycle buildResourcePolicyHourlyCycle() {
  final o = api.ResourcePolicyHourlyCycle();
  buildCounterResourcePolicyHourlyCycle++;
  if (buildCounterResourcePolicyHourlyCycle < 3) {
    o.duration = 'foo';
    o.hoursInCycle = 42;
    o.startTime = 'foo';
  }
  buildCounterResourcePolicyHourlyCycle--;
  return o;
}

void checkResourcePolicyHourlyCycle(api.ResourcePolicyHourlyCycle o) {
  buildCounterResourcePolicyHourlyCycle++;
  if (buildCounterResourcePolicyHourlyCycle < 3) {
    unittest.expect(
      o.duration!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.hoursInCycle!,
      unittest.equals(42),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyHourlyCycle--;
}

core.int buildCounterResourcePolicyInstanceSchedulePolicy = 0;
api.ResourcePolicyInstanceSchedulePolicy
    buildResourcePolicyInstanceSchedulePolicy() {
  final o = api.ResourcePolicyInstanceSchedulePolicy();
  buildCounterResourcePolicyInstanceSchedulePolicy++;
  if (buildCounterResourcePolicyInstanceSchedulePolicy < 3) {
    o.expirationTime = 'foo';
    o.startTime = 'foo';
    o.timeZone = 'foo';
    o.vmStartSchedule = buildResourcePolicyInstanceSchedulePolicySchedule();
    o.vmStopSchedule = buildResourcePolicyInstanceSchedulePolicySchedule();
  }
  buildCounterResourcePolicyInstanceSchedulePolicy--;
  return o;
}

void checkResourcePolicyInstanceSchedulePolicy(
    api.ResourcePolicyInstanceSchedulePolicy o) {
  buildCounterResourcePolicyInstanceSchedulePolicy++;
  if (buildCounterResourcePolicyInstanceSchedulePolicy < 3) {
    unittest.expect(
      o.expirationTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.timeZone!,
      unittest.equals('foo'),
    );
    checkResourcePolicyInstanceSchedulePolicySchedule(o.vmStartSchedule!);
    checkResourcePolicyInstanceSchedulePolicySchedule(o.vmStopSchedule!);
  }
  buildCounterResourcePolicyInstanceSchedulePolicy--;
}

core.int buildCounterResourcePolicyInstanceSchedulePolicySchedule = 0;
api.ResourcePolicyInstanceSchedulePolicySchedule
    buildResourcePolicyInstanceSchedulePolicySchedule() {
  final o = api.ResourcePolicyInstanceSchedulePolicySchedule();
  buildCounterResourcePolicyInstanceSchedulePolicySchedule++;
  if (buildCounterResourcePolicyInstanceSchedulePolicySchedule < 3) {
    o.schedule = 'foo';
  }
  buildCounterResourcePolicyInstanceSchedulePolicySchedule--;
  return o;
}

void checkResourcePolicyInstanceSchedulePolicySchedule(
    api.ResourcePolicyInstanceSchedulePolicySchedule o) {
  buildCounterResourcePolicyInstanceSchedulePolicySchedule++;
  if (buildCounterResourcePolicyInstanceSchedulePolicySchedule < 3) {
    unittest.expect(
      o.schedule!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyInstanceSchedulePolicySchedule--;
}

core.List<api.ResourcePolicy> buildUnnamed1241() => [
      buildResourcePolicy(),
      buildResourcePolicy(),
    ];

void checkUnnamed1241(core.List<api.ResourcePolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePolicy(o[0]);
  checkResourcePolicy(o[1]);
}

core.int buildCounterResourcePolicyListWarningData = 0;
api.ResourcePolicyListWarningData buildResourcePolicyListWarningData() {
  final o = api.ResourcePolicyListWarningData();
  buildCounterResourcePolicyListWarningData++;
  if (buildCounterResourcePolicyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterResourcePolicyListWarningData--;
  return o;
}

void checkResourcePolicyListWarningData(api.ResourcePolicyListWarningData o) {
  buildCounterResourcePolicyListWarningData++;
  if (buildCounterResourcePolicyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyListWarningData--;
}

core.List<api.ResourcePolicyListWarningData> buildUnnamed1242() => [
      buildResourcePolicyListWarningData(),
      buildResourcePolicyListWarningData(),
    ];

void checkUnnamed1242(core.List<api.ResourcePolicyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePolicyListWarningData(o[0]);
  checkResourcePolicyListWarningData(o[1]);
}

core.int buildCounterResourcePolicyListWarning = 0;
api.ResourcePolicyListWarning buildResourcePolicyListWarning() {
  final o = api.ResourcePolicyListWarning();
  buildCounterResourcePolicyListWarning++;
  if (buildCounterResourcePolicyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1242();
    o.message = 'foo';
  }
  buildCounterResourcePolicyListWarning--;
  return o;
}

void checkResourcePolicyListWarning(api.ResourcePolicyListWarning o) {
  buildCounterResourcePolicyListWarning++;
  if (buildCounterResourcePolicyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1242(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyListWarning--;
}

core.int buildCounterResourcePolicyList = 0;
api.ResourcePolicyList buildResourcePolicyList() {
  final o = api.ResourcePolicyList();
  buildCounterResourcePolicyList++;
  if (buildCounterResourcePolicyList < 3) {
    o.etag = 'foo';
    o.id = 'foo';
    o.items = buildUnnamed1241();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildResourcePolicyListWarning();
  }
  buildCounterResourcePolicyList--;
  return o;
}

void checkResourcePolicyList(api.ResourcePolicyList o) {
  buildCounterResourcePolicyList++;
  if (buildCounterResourcePolicyList < 3) {
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1241(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkResourcePolicyListWarning(o.warning!);
  }
  buildCounterResourcePolicyList--;
}

core.int buildCounterResourcePolicyResourceStatus = 0;
api.ResourcePolicyResourceStatus buildResourcePolicyResourceStatus() {
  final o = api.ResourcePolicyResourceStatus();
  buildCounterResourcePolicyResourceStatus++;
  if (buildCounterResourcePolicyResourceStatus < 3) {
    o.instanceSchedulePolicy =
        buildResourcePolicyResourceStatusInstanceSchedulePolicyStatus();
  }
  buildCounterResourcePolicyResourceStatus--;
  return o;
}

void checkResourcePolicyResourceStatus(api.ResourcePolicyResourceStatus o) {
  buildCounterResourcePolicyResourceStatus++;
  if (buildCounterResourcePolicyResourceStatus < 3) {
    checkResourcePolicyResourceStatusInstanceSchedulePolicyStatus(
        o.instanceSchedulePolicy!);
  }
  buildCounterResourcePolicyResourceStatus--;
}

core.int buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus =
    0;
api.ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
    buildResourcePolicyResourceStatusInstanceSchedulePolicyStatus() {
  final o = api.ResourcePolicyResourceStatusInstanceSchedulePolicyStatus();
  buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus++;
  if (buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus <
      3) {
    o.lastRunStartTime = 'foo';
    o.nextRunStartTime = 'foo';
  }
  buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus--;
  return o;
}

void checkResourcePolicyResourceStatusInstanceSchedulePolicyStatus(
    api.ResourcePolicyResourceStatusInstanceSchedulePolicyStatus o) {
  buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus++;
  if (buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus <
      3) {
    unittest.expect(
      o.lastRunStartTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextRunStartTime!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyResourceStatusInstanceSchedulePolicyStatus--;
}

core.int buildCounterResourcePolicySnapshotSchedulePolicy = 0;
api.ResourcePolicySnapshotSchedulePolicy
    buildResourcePolicySnapshotSchedulePolicy() {
  final o = api.ResourcePolicySnapshotSchedulePolicy();
  buildCounterResourcePolicySnapshotSchedulePolicy++;
  if (buildCounterResourcePolicySnapshotSchedulePolicy < 3) {
    o.retentionPolicy =
        buildResourcePolicySnapshotSchedulePolicyRetentionPolicy();
    o.schedule = buildResourcePolicySnapshotSchedulePolicySchedule();
    o.snapshotProperties =
        buildResourcePolicySnapshotSchedulePolicySnapshotProperties();
  }
  buildCounterResourcePolicySnapshotSchedulePolicy--;
  return o;
}

void checkResourcePolicySnapshotSchedulePolicy(
    api.ResourcePolicySnapshotSchedulePolicy o) {
  buildCounterResourcePolicySnapshotSchedulePolicy++;
  if (buildCounterResourcePolicySnapshotSchedulePolicy < 3) {
    checkResourcePolicySnapshotSchedulePolicyRetentionPolicy(
        o.retentionPolicy!);
    checkResourcePolicySnapshotSchedulePolicySchedule(o.schedule!);
    checkResourcePolicySnapshotSchedulePolicySnapshotProperties(
        o.snapshotProperties!);
  }
  buildCounterResourcePolicySnapshotSchedulePolicy--;
}

core.int buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy = 0;
api.ResourcePolicySnapshotSchedulePolicyRetentionPolicy
    buildResourcePolicySnapshotSchedulePolicyRetentionPolicy() {
  final o = api.ResourcePolicySnapshotSchedulePolicyRetentionPolicy();
  buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy++;
  if (buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy < 3) {
    o.maxRetentionDays = 42;
    o.onSourceDiskDelete = 'foo';
  }
  buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy--;
  return o;
}

void checkResourcePolicySnapshotSchedulePolicyRetentionPolicy(
    api.ResourcePolicySnapshotSchedulePolicyRetentionPolicy o) {
  buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy++;
  if (buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy < 3) {
    unittest.expect(
      o.maxRetentionDays!,
      unittest.equals(42),
    );
    unittest.expect(
      o.onSourceDiskDelete!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicySnapshotSchedulePolicyRetentionPolicy--;
}

core.int buildCounterResourcePolicySnapshotSchedulePolicySchedule = 0;
api.ResourcePolicySnapshotSchedulePolicySchedule
    buildResourcePolicySnapshotSchedulePolicySchedule() {
  final o = api.ResourcePolicySnapshotSchedulePolicySchedule();
  buildCounterResourcePolicySnapshotSchedulePolicySchedule++;
  if (buildCounterResourcePolicySnapshotSchedulePolicySchedule < 3) {
    o.dailySchedule = buildResourcePolicyDailyCycle();
    o.hourlySchedule = buildResourcePolicyHourlyCycle();
    o.weeklySchedule = buildResourcePolicyWeeklyCycle();
  }
  buildCounterResourcePolicySnapshotSchedulePolicySchedule--;
  return o;
}

void checkResourcePolicySnapshotSchedulePolicySchedule(
    api.ResourcePolicySnapshotSchedulePolicySchedule o) {
  buildCounterResourcePolicySnapshotSchedulePolicySchedule++;
  if (buildCounterResourcePolicySnapshotSchedulePolicySchedule < 3) {
    checkResourcePolicyDailyCycle(o.dailySchedule!);
    checkResourcePolicyHourlyCycle(o.hourlySchedule!);
    checkResourcePolicyWeeklyCycle(o.weeklySchedule!);
  }
  buildCounterResourcePolicySnapshotSchedulePolicySchedule--;
}

core.Map<core.String, core.String> buildUnnamed1243() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1243(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1244() => [
      'foo',
      'foo',
    ];

void checkUnnamed1244(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties = 0;
api.ResourcePolicySnapshotSchedulePolicySnapshotProperties
    buildResourcePolicySnapshotSchedulePolicySnapshotProperties() {
  final o = api.ResourcePolicySnapshotSchedulePolicySnapshotProperties();
  buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties++;
  if (buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties < 3) {
    o.chainName = 'foo';
    o.guestFlush = true;
    o.labels = buildUnnamed1243();
    o.storageLocations = buildUnnamed1244();
  }
  buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties--;
  return o;
}

void checkResourcePolicySnapshotSchedulePolicySnapshotProperties(
    api.ResourcePolicySnapshotSchedulePolicySnapshotProperties o) {
  buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties++;
  if (buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties < 3) {
    unittest.expect(
      o.chainName!,
      unittest.equals('foo'),
    );
    unittest.expect(o.guestFlush!, unittest.isTrue);
    checkUnnamed1243(o.labels!);
    checkUnnamed1244(o.storageLocations!);
  }
  buildCounterResourcePolicySnapshotSchedulePolicySnapshotProperties--;
}

core.List<api.ResourcePolicyWeeklyCycleDayOfWeek> buildUnnamed1245() => [
      buildResourcePolicyWeeklyCycleDayOfWeek(),
      buildResourcePolicyWeeklyCycleDayOfWeek(),
    ];

void checkUnnamed1245(core.List<api.ResourcePolicyWeeklyCycleDayOfWeek> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkResourcePolicyWeeklyCycleDayOfWeek(o[0]);
  checkResourcePolicyWeeklyCycleDayOfWeek(o[1]);
}

core.int buildCounterResourcePolicyWeeklyCycle = 0;
api.ResourcePolicyWeeklyCycle buildResourcePolicyWeeklyCycle() {
  final o = api.ResourcePolicyWeeklyCycle();
  buildCounterResourcePolicyWeeklyCycle++;
  if (buildCounterResourcePolicyWeeklyCycle < 3) {
    o.dayOfWeeks = buildUnnamed1245();
  }
  buildCounterResourcePolicyWeeklyCycle--;
  return o;
}

void checkResourcePolicyWeeklyCycle(api.ResourcePolicyWeeklyCycle o) {
  buildCounterResourcePolicyWeeklyCycle++;
  if (buildCounterResourcePolicyWeeklyCycle < 3) {
    checkUnnamed1245(o.dayOfWeeks!);
  }
  buildCounterResourcePolicyWeeklyCycle--;
}

core.int buildCounterResourcePolicyWeeklyCycleDayOfWeek = 0;
api.ResourcePolicyWeeklyCycleDayOfWeek
    buildResourcePolicyWeeklyCycleDayOfWeek() {
  final o = api.ResourcePolicyWeeklyCycleDayOfWeek();
  buildCounterResourcePolicyWeeklyCycleDayOfWeek++;
  if (buildCounterResourcePolicyWeeklyCycleDayOfWeek < 3) {
    o.day = 'foo';
    o.duration = 'foo';
    o.startTime = 'foo';
  }
  buildCounterResourcePolicyWeeklyCycleDayOfWeek--;
  return o;
}

void checkResourcePolicyWeeklyCycleDayOfWeek(
    api.ResourcePolicyWeeklyCycleDayOfWeek o) {
  buildCounterResourcePolicyWeeklyCycleDayOfWeek++;
  if (buildCounterResourcePolicyWeeklyCycleDayOfWeek < 3) {
    unittest.expect(
      o.day!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.duration!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.startTime!,
      unittest.equals('foo'),
    );
  }
  buildCounterResourcePolicyWeeklyCycleDayOfWeek--;
}

core.List<core.String> buildUnnamed1246() => [
      'foo',
      'foo',
    ];

void checkUnnamed1246(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRouteWarningsData = 0;
api.RouteWarningsData buildRouteWarningsData() {
  final o = api.RouteWarningsData();
  buildCounterRouteWarningsData++;
  if (buildCounterRouteWarningsData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRouteWarningsData--;
  return o;
}

void checkRouteWarningsData(api.RouteWarningsData o) {
  buildCounterRouteWarningsData++;
  if (buildCounterRouteWarningsData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouteWarningsData--;
}

core.List<api.RouteWarningsData> buildUnnamed1247() => [
      buildRouteWarningsData(),
      buildRouteWarningsData(),
    ];

void checkUnnamed1247(core.List<api.RouteWarningsData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouteWarningsData(o[0]);
  checkRouteWarningsData(o[1]);
}

core.int buildCounterRouteWarnings = 0;
api.RouteWarnings buildRouteWarnings() {
  final o = api.RouteWarnings();
  buildCounterRouteWarnings++;
  if (buildCounterRouteWarnings < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1247();
    o.message = 'foo';
  }
  buildCounterRouteWarnings--;
  return o;
}

void checkRouteWarnings(api.RouteWarnings o) {
  buildCounterRouteWarnings++;
  if (buildCounterRouteWarnings < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1247(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouteWarnings--;
}

core.List<api.RouteWarnings> buildUnnamed1248() => [
      buildRouteWarnings(),
      buildRouteWarnings(),
    ];

void checkUnnamed1248(core.List<api.RouteWarnings> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouteWarnings(o[0]);
  checkRouteWarnings(o[1]);
}

core.int buildCounterRoute = 0;
api.Route buildRoute() {
  final o = api.Route();
  buildCounterRoute++;
  if (buildCounterRoute < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.destRange = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.network = 'foo';
    o.nextHopGateway = 'foo';
    o.nextHopIlb = 'foo';
    o.nextHopInstance = 'foo';
    o.nextHopIp = 'foo';
    o.nextHopNetwork = 'foo';
    o.nextHopPeering = 'foo';
    o.nextHopVpnTunnel = 'foo';
    o.priority = 42;
    o.selfLink = 'foo';
    o.tags = buildUnnamed1246();
    o.warnings = buildUnnamed1248();
  }
  buildCounterRoute--;
  return o;
}

void checkRoute(api.Route o) {
  buildCounterRoute++;
  if (buildCounterRoute < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.destRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopIlb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopInstance!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopIp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopNetwork!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopPeering!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextHopVpnTunnel!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1246(o.tags!);
    checkUnnamed1248(o.warnings!);
  }
  buildCounterRoute--;
}

core.List<api.Route> buildUnnamed1249() => [
      buildRoute(),
      buildRoute(),
    ];

void checkUnnamed1249(core.List<api.Route> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoute(o[0]);
  checkRoute(o[1]);
}

core.int buildCounterRouteListWarningData = 0;
api.RouteListWarningData buildRouteListWarningData() {
  final o = api.RouteListWarningData();
  buildCounterRouteListWarningData++;
  if (buildCounterRouteListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRouteListWarningData--;
  return o;
}

void checkRouteListWarningData(api.RouteListWarningData o) {
  buildCounterRouteListWarningData++;
  if (buildCounterRouteListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouteListWarningData--;
}

core.List<api.RouteListWarningData> buildUnnamed1250() => [
      buildRouteListWarningData(),
      buildRouteListWarningData(),
    ];

void checkUnnamed1250(core.List<api.RouteListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouteListWarningData(o[0]);
  checkRouteListWarningData(o[1]);
}

core.int buildCounterRouteListWarning = 0;
api.RouteListWarning buildRouteListWarning() {
  final o = api.RouteListWarning();
  buildCounterRouteListWarning++;
  if (buildCounterRouteListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1250();
    o.message = 'foo';
  }
  buildCounterRouteListWarning--;
  return o;
}

void checkRouteListWarning(api.RouteListWarning o) {
  buildCounterRouteListWarning++;
  if (buildCounterRouteListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1250(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouteListWarning--;
}

core.int buildCounterRouteList = 0;
api.RouteList buildRouteList() {
  final o = api.RouteList();
  buildCounterRouteList++;
  if (buildCounterRouteList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1249();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRouteListWarning();
  }
  buildCounterRouteList--;
  return o;
}

void checkRouteList(api.RouteList o) {
  buildCounterRouteList++;
  if (buildCounterRouteList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1249(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRouteListWarning(o.warning!);
  }
  buildCounterRouteList--;
}

core.List<api.RouterBgpPeer> buildUnnamed1251() => [
      buildRouterBgpPeer(),
      buildRouterBgpPeer(),
    ];

void checkUnnamed1251(core.List<api.RouterBgpPeer> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterBgpPeer(o[0]);
  checkRouterBgpPeer(o[1]);
}

core.List<api.RouterInterface> buildUnnamed1252() => [
      buildRouterInterface(),
      buildRouterInterface(),
    ];

void checkUnnamed1252(core.List<api.RouterInterface> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterInterface(o[0]);
  checkRouterInterface(o[1]);
}

core.List<api.RouterNat> buildUnnamed1253() => [
      buildRouterNat(),
      buildRouterNat(),
    ];

void checkUnnamed1253(core.List<api.RouterNat> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterNat(o[0]);
  checkRouterNat(o[1]);
}

core.int buildCounterRouter = 0;
api.Router buildRouter() {
  final o = api.Router();
  buildCounterRouter++;
  if (buildCounterRouter < 3) {
    o.bgp = buildRouterBgp();
    o.bgpPeers = buildUnnamed1251();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.encryptedInterconnectRouter = true;
    o.id = 'foo';
    o.interfaces = buildUnnamed1252();
    o.kind = 'foo';
    o.name = 'foo';
    o.nats = buildUnnamed1253();
    o.network = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
  }
  buildCounterRouter--;
  return o;
}

void checkRouter(api.Router o) {
  buildCounterRouter++;
  if (buildCounterRouter < 3) {
    checkRouterBgp(o.bgp!);
    checkUnnamed1251(o.bgpPeers!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.encryptedInterconnectRouter!, unittest.isTrue);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1252(o.interfaces!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1253(o.nats!);
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouter--;
}

core.int buildCounterRouterAdvertisedIpRange = 0;
api.RouterAdvertisedIpRange buildRouterAdvertisedIpRange() {
  final o = api.RouterAdvertisedIpRange();
  buildCounterRouterAdvertisedIpRange++;
  if (buildCounterRouterAdvertisedIpRange < 3) {
    o.description = 'foo';
    o.range = 'foo';
  }
  buildCounterRouterAdvertisedIpRange--;
  return o;
}

void checkRouterAdvertisedIpRange(api.RouterAdvertisedIpRange o) {
  buildCounterRouterAdvertisedIpRange++;
  if (buildCounterRouterAdvertisedIpRange < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.range!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterAdvertisedIpRange--;
}

core.Map<core.String, api.RoutersScopedList> buildUnnamed1254() => {
      'x': buildRoutersScopedList(),
      'y': buildRoutersScopedList(),
    };

void checkUnnamed1254(core.Map<core.String, api.RoutersScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoutersScopedList(o['x']!);
  checkRoutersScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1255() => [
      'foo',
      'foo',
    ];

void checkUnnamed1255(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRouterAggregatedListWarningData = 0;
api.RouterAggregatedListWarningData buildRouterAggregatedListWarningData() {
  final o = api.RouterAggregatedListWarningData();
  buildCounterRouterAggregatedListWarningData++;
  if (buildCounterRouterAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRouterAggregatedListWarningData--;
  return o;
}

void checkRouterAggregatedListWarningData(
    api.RouterAggregatedListWarningData o) {
  buildCounterRouterAggregatedListWarningData++;
  if (buildCounterRouterAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterAggregatedListWarningData--;
}

core.List<api.RouterAggregatedListWarningData> buildUnnamed1256() => [
      buildRouterAggregatedListWarningData(),
      buildRouterAggregatedListWarningData(),
    ];

void checkUnnamed1256(core.List<api.RouterAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterAggregatedListWarningData(o[0]);
  checkRouterAggregatedListWarningData(o[1]);
}

core.int buildCounterRouterAggregatedListWarning = 0;
api.RouterAggregatedListWarning buildRouterAggregatedListWarning() {
  final o = api.RouterAggregatedListWarning();
  buildCounterRouterAggregatedListWarning++;
  if (buildCounterRouterAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1256();
    o.message = 'foo';
  }
  buildCounterRouterAggregatedListWarning--;
  return o;
}

void checkRouterAggregatedListWarning(api.RouterAggregatedListWarning o) {
  buildCounterRouterAggregatedListWarning++;
  if (buildCounterRouterAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1256(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterAggregatedListWarning--;
}

core.int buildCounterRouterAggregatedList = 0;
api.RouterAggregatedList buildRouterAggregatedList() {
  final o = api.RouterAggregatedList();
  buildCounterRouterAggregatedList++;
  if (buildCounterRouterAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1254();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1255();
    o.warning = buildRouterAggregatedListWarning();
  }
  buildCounterRouterAggregatedList--;
  return o;
}

void checkRouterAggregatedList(api.RouterAggregatedList o) {
  buildCounterRouterAggregatedList++;
  if (buildCounterRouterAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1254(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1255(o.unreachables!);
    checkRouterAggregatedListWarning(o.warning!);
  }
  buildCounterRouterAggregatedList--;
}

core.List<core.String> buildUnnamed1257() => [
      'foo',
      'foo',
    ];

void checkUnnamed1257(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.RouterAdvertisedIpRange> buildUnnamed1258() => [
      buildRouterAdvertisedIpRange(),
      buildRouterAdvertisedIpRange(),
    ];

void checkUnnamed1258(core.List<api.RouterAdvertisedIpRange> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterAdvertisedIpRange(o[0]);
  checkRouterAdvertisedIpRange(o[1]);
}

core.int buildCounterRouterBgp = 0;
api.RouterBgp buildRouterBgp() {
  final o = api.RouterBgp();
  buildCounterRouterBgp++;
  if (buildCounterRouterBgp < 3) {
    o.advertiseMode = 'foo';
    o.advertisedGroups = buildUnnamed1257();
    o.advertisedIpRanges = buildUnnamed1258();
    o.asn = 42;
    o.keepaliveInterval = 42;
  }
  buildCounterRouterBgp--;
  return o;
}

void checkRouterBgp(api.RouterBgp o) {
  buildCounterRouterBgp++;
  if (buildCounterRouterBgp < 3) {
    unittest.expect(
      o.advertiseMode!,
      unittest.equals('foo'),
    );
    checkUnnamed1257(o.advertisedGroups!);
    checkUnnamed1258(o.advertisedIpRanges!);
    unittest.expect(
      o.asn!,
      unittest.equals(42),
    );
    unittest.expect(
      o.keepaliveInterval!,
      unittest.equals(42),
    );
  }
  buildCounterRouterBgp--;
}

core.List<core.String> buildUnnamed1259() => [
      'foo',
      'foo',
    ];

void checkUnnamed1259(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.RouterAdvertisedIpRange> buildUnnamed1260() => [
      buildRouterAdvertisedIpRange(),
      buildRouterAdvertisedIpRange(),
    ];

void checkUnnamed1260(core.List<api.RouterAdvertisedIpRange> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterAdvertisedIpRange(o[0]);
  checkRouterAdvertisedIpRange(o[1]);
}

core.int buildCounterRouterBgpPeer = 0;
api.RouterBgpPeer buildRouterBgpPeer() {
  final o = api.RouterBgpPeer();
  buildCounterRouterBgpPeer++;
  if (buildCounterRouterBgpPeer < 3) {
    o.advertiseMode = 'foo';
    o.advertisedGroups = buildUnnamed1259();
    o.advertisedIpRanges = buildUnnamed1260();
    o.advertisedRoutePriority = 42;
    o.enable = 'foo';
    o.interfaceName = 'foo';
    o.ipAddress = 'foo';
    o.managementType = 'foo';
    o.name = 'foo';
    o.peerAsn = 42;
    o.peerIpAddress = 'foo';
  }
  buildCounterRouterBgpPeer--;
  return o;
}

void checkRouterBgpPeer(api.RouterBgpPeer o) {
  buildCounterRouterBgpPeer++;
  if (buildCounterRouterBgpPeer < 3) {
    unittest.expect(
      o.advertiseMode!,
      unittest.equals('foo'),
    );
    checkUnnamed1259(o.advertisedGroups!);
    checkUnnamed1260(o.advertisedIpRanges!);
    unittest.expect(
      o.advertisedRoutePriority!,
      unittest.equals(42),
    );
    unittest.expect(
      o.enable!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.interfaceName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.managementType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerAsn!,
      unittest.equals(42),
    );
    unittest.expect(
      o.peerIpAddress!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterBgpPeer--;
}

core.int buildCounterRouterInterface = 0;
api.RouterInterface buildRouterInterface() {
  final o = api.RouterInterface();
  buildCounterRouterInterface++;
  if (buildCounterRouterInterface < 3) {
    o.ipRange = 'foo';
    o.linkedInterconnectAttachment = 'foo';
    o.linkedVpnTunnel = 'foo';
    o.managementType = 'foo';
    o.name = 'foo';
  }
  buildCounterRouterInterface--;
  return o;
}

void checkRouterInterface(api.RouterInterface o) {
  buildCounterRouterInterface++;
  if (buildCounterRouterInterface < 3) {
    unittest.expect(
      o.ipRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.linkedInterconnectAttachment!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.linkedVpnTunnel!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.managementType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterInterface--;
}

core.List<api.Router> buildUnnamed1261() => [
      buildRouter(),
      buildRouter(),
    ];

void checkUnnamed1261(core.List<api.Router> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouter(o[0]);
  checkRouter(o[1]);
}

core.int buildCounterRouterListWarningData = 0;
api.RouterListWarningData buildRouterListWarningData() {
  final o = api.RouterListWarningData();
  buildCounterRouterListWarningData++;
  if (buildCounterRouterListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRouterListWarningData--;
  return o;
}

void checkRouterListWarningData(api.RouterListWarningData o) {
  buildCounterRouterListWarningData++;
  if (buildCounterRouterListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterListWarningData--;
}

core.List<api.RouterListWarningData> buildUnnamed1262() => [
      buildRouterListWarningData(),
      buildRouterListWarningData(),
    ];

void checkUnnamed1262(core.List<api.RouterListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterListWarningData(o[0]);
  checkRouterListWarningData(o[1]);
}

core.int buildCounterRouterListWarning = 0;
api.RouterListWarning buildRouterListWarning() {
  final o = api.RouterListWarning();
  buildCounterRouterListWarning++;
  if (buildCounterRouterListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1262();
    o.message = 'foo';
  }
  buildCounterRouterListWarning--;
  return o;
}

void checkRouterListWarning(api.RouterListWarning o) {
  buildCounterRouterListWarning++;
  if (buildCounterRouterListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1262(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterListWarning--;
}

core.int buildCounterRouterList = 0;
api.RouterList buildRouterList() {
  final o = api.RouterList();
  buildCounterRouterList++;
  if (buildCounterRouterList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1261();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildRouterListWarning();
  }
  buildCounterRouterList--;
  return o;
}

void checkRouterList(api.RouterList o) {
  buildCounterRouterList++;
  if (buildCounterRouterList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1261(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkRouterListWarning(o.warning!);
  }
  buildCounterRouterList--;
}

core.List<core.String> buildUnnamed1263() => [
      'foo',
      'foo',
    ];

void checkUnnamed1263(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1264() => [
      'foo',
      'foo',
    ];

void checkUnnamed1264(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.RouterNatSubnetworkToNat> buildUnnamed1265() => [
      buildRouterNatSubnetworkToNat(),
      buildRouterNatSubnetworkToNat(),
    ];

void checkUnnamed1265(core.List<api.RouterNatSubnetworkToNat> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterNatSubnetworkToNat(o[0]);
  checkRouterNatSubnetworkToNat(o[1]);
}

core.int buildCounterRouterNat = 0;
api.RouterNat buildRouterNat() {
  final o = api.RouterNat();
  buildCounterRouterNat++;
  if (buildCounterRouterNat < 3) {
    o.drainNatIps = buildUnnamed1263();
    o.enableEndpointIndependentMapping = true;
    o.icmpIdleTimeoutSec = 42;
    o.logConfig = buildRouterNatLogConfig();
    o.minPortsPerVm = 42;
    o.name = 'foo';
    o.natIpAllocateOption = 'foo';
    o.natIps = buildUnnamed1264();
    o.sourceSubnetworkIpRangesToNat = 'foo';
    o.subnetworks = buildUnnamed1265();
    o.tcpEstablishedIdleTimeoutSec = 42;
    o.tcpTransitoryIdleTimeoutSec = 42;
    o.udpIdleTimeoutSec = 42;
  }
  buildCounterRouterNat--;
  return o;
}

void checkRouterNat(api.RouterNat o) {
  buildCounterRouterNat++;
  if (buildCounterRouterNat < 3) {
    checkUnnamed1263(o.drainNatIps!);
    unittest.expect(o.enableEndpointIndependentMapping!, unittest.isTrue);
    unittest.expect(
      o.icmpIdleTimeoutSec!,
      unittest.equals(42),
    );
    checkRouterNatLogConfig(o.logConfig!);
    unittest.expect(
      o.minPortsPerVm!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.natIpAllocateOption!,
      unittest.equals('foo'),
    );
    checkUnnamed1264(o.natIps!);
    unittest.expect(
      o.sourceSubnetworkIpRangesToNat!,
      unittest.equals('foo'),
    );
    checkUnnamed1265(o.subnetworks!);
    unittest.expect(
      o.tcpEstablishedIdleTimeoutSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.tcpTransitoryIdleTimeoutSec!,
      unittest.equals(42),
    );
    unittest.expect(
      o.udpIdleTimeoutSec!,
      unittest.equals(42),
    );
  }
  buildCounterRouterNat--;
}

core.int buildCounterRouterNatLogConfig = 0;
api.RouterNatLogConfig buildRouterNatLogConfig() {
  final o = api.RouterNatLogConfig();
  buildCounterRouterNatLogConfig++;
  if (buildCounterRouterNatLogConfig < 3) {
    o.enable = true;
    o.filter = 'foo';
  }
  buildCounterRouterNatLogConfig--;
  return o;
}

void checkRouterNatLogConfig(api.RouterNatLogConfig o) {
  buildCounterRouterNatLogConfig++;
  if (buildCounterRouterNatLogConfig < 3) {
    unittest.expect(o.enable!, unittest.isTrue);
    unittest.expect(
      o.filter!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterNatLogConfig--;
}

core.List<core.String> buildUnnamed1266() => [
      'foo',
      'foo',
    ];

void checkUnnamed1266(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1267() => [
      'foo',
      'foo',
    ];

void checkUnnamed1267(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRouterNatSubnetworkToNat = 0;
api.RouterNatSubnetworkToNat buildRouterNatSubnetworkToNat() {
  final o = api.RouterNatSubnetworkToNat();
  buildCounterRouterNatSubnetworkToNat++;
  if (buildCounterRouterNatSubnetworkToNat < 3) {
    o.name = 'foo';
    o.secondaryIpRangeNames = buildUnnamed1266();
    o.sourceIpRangesToNat = buildUnnamed1267();
  }
  buildCounterRouterNatSubnetworkToNat--;
  return o;
}

void checkRouterNatSubnetworkToNat(api.RouterNatSubnetworkToNat o) {
  buildCounterRouterNatSubnetworkToNat++;
  if (buildCounterRouterNatSubnetworkToNat < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1266(o.secondaryIpRangeNames!);
    checkUnnamed1267(o.sourceIpRangesToNat!);
  }
  buildCounterRouterNatSubnetworkToNat--;
}

core.List<api.Route> buildUnnamed1268() => [
      buildRoute(),
      buildRoute(),
    ];

void checkUnnamed1268(core.List<api.Route> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoute(o[0]);
  checkRoute(o[1]);
}

core.List<api.Route> buildUnnamed1269() => [
      buildRoute(),
      buildRoute(),
    ];

void checkUnnamed1269(core.List<api.Route> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoute(o[0]);
  checkRoute(o[1]);
}

core.List<api.RouterStatusBgpPeerStatus> buildUnnamed1270() => [
      buildRouterStatusBgpPeerStatus(),
      buildRouterStatusBgpPeerStatus(),
    ];

void checkUnnamed1270(core.List<api.RouterStatusBgpPeerStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterStatusBgpPeerStatus(o[0]);
  checkRouterStatusBgpPeerStatus(o[1]);
}

core.List<api.RouterStatusNatStatus> buildUnnamed1271() => [
      buildRouterStatusNatStatus(),
      buildRouterStatusNatStatus(),
    ];

void checkUnnamed1271(core.List<api.RouterStatusNatStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouterStatusNatStatus(o[0]);
  checkRouterStatusNatStatus(o[1]);
}

core.int buildCounterRouterStatus = 0;
api.RouterStatus buildRouterStatus() {
  final o = api.RouterStatus();
  buildCounterRouterStatus++;
  if (buildCounterRouterStatus < 3) {
    o.bestRoutes = buildUnnamed1268();
    o.bestRoutesForRouter = buildUnnamed1269();
    o.bgpPeerStatus = buildUnnamed1270();
    o.natStatus = buildUnnamed1271();
    o.network = 'foo';
  }
  buildCounterRouterStatus--;
  return o;
}

void checkRouterStatus(api.RouterStatus o) {
  buildCounterRouterStatus++;
  if (buildCounterRouterStatus < 3) {
    checkUnnamed1268(o.bestRoutes!);
    checkUnnamed1269(o.bestRoutesForRouter!);
    checkUnnamed1270(o.bgpPeerStatus!);
    checkUnnamed1271(o.natStatus!);
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterStatus--;
}

core.List<api.Route> buildUnnamed1272() => [
      buildRoute(),
      buildRoute(),
    ];

void checkUnnamed1272(core.List<api.Route> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoute(o[0]);
  checkRoute(o[1]);
}

core.int buildCounterRouterStatusBgpPeerStatus = 0;
api.RouterStatusBgpPeerStatus buildRouterStatusBgpPeerStatus() {
  final o = api.RouterStatusBgpPeerStatus();
  buildCounterRouterStatusBgpPeerStatus++;
  if (buildCounterRouterStatusBgpPeerStatus < 3) {
    o.advertisedRoutes = buildUnnamed1272();
    o.ipAddress = 'foo';
    o.linkedVpnTunnel = 'foo';
    o.name = 'foo';
    o.numLearnedRoutes = 42;
    o.peerIpAddress = 'foo';
    o.state = 'foo';
    o.status = 'foo';
    o.uptime = 'foo';
    o.uptimeSeconds = 'foo';
  }
  buildCounterRouterStatusBgpPeerStatus--;
  return o;
}

void checkRouterStatusBgpPeerStatus(api.RouterStatusBgpPeerStatus o) {
  buildCounterRouterStatusBgpPeerStatus++;
  if (buildCounterRouterStatusBgpPeerStatus < 3) {
    checkUnnamed1272(o.advertisedRoutes!);
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.linkedVpnTunnel!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.numLearnedRoutes!,
      unittest.equals(42),
    );
    unittest.expect(
      o.peerIpAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.uptime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.uptimeSeconds!,
      unittest.equals('foo'),
    );
  }
  buildCounterRouterStatusBgpPeerStatus--;
}

core.List<core.String> buildUnnamed1273() => [
      'foo',
      'foo',
    ];

void checkUnnamed1273(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1274() => [
      'foo',
      'foo',
    ];

void checkUnnamed1274(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1275() => [
      'foo',
      'foo',
    ];

void checkUnnamed1275(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1276() => [
      'foo',
      'foo',
    ];

void checkUnnamed1276(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1277() => [
      'foo',
      'foo',
    ];

void checkUnnamed1277(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRouterStatusNatStatus = 0;
api.RouterStatusNatStatus buildRouterStatusNatStatus() {
  final o = api.RouterStatusNatStatus();
  buildCounterRouterStatusNatStatus++;
  if (buildCounterRouterStatusNatStatus < 3) {
    o.autoAllocatedNatIps = buildUnnamed1273();
    o.drainAutoAllocatedNatIps = buildUnnamed1274();
    o.drainUserAllocatedNatIps = buildUnnamed1275();
    o.minExtraNatIpsNeeded = 42;
    o.name = 'foo';
    o.numVmEndpointsWithNatMappings = 42;
    o.userAllocatedNatIpResources = buildUnnamed1276();
    o.userAllocatedNatIps = buildUnnamed1277();
  }
  buildCounterRouterStatusNatStatus--;
  return o;
}

void checkRouterStatusNatStatus(api.RouterStatusNatStatus o) {
  buildCounterRouterStatusNatStatus++;
  if (buildCounterRouterStatusNatStatus < 3) {
    checkUnnamed1273(o.autoAllocatedNatIps!);
    checkUnnamed1274(o.drainAutoAllocatedNatIps!);
    checkUnnamed1275(o.drainUserAllocatedNatIps!);
    unittest.expect(
      o.minExtraNatIpsNeeded!,
      unittest.equals(42),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.numVmEndpointsWithNatMappings!,
      unittest.equals(42),
    );
    checkUnnamed1276(o.userAllocatedNatIpResources!);
    checkUnnamed1277(o.userAllocatedNatIps!);
  }
  buildCounterRouterStatusNatStatus--;
}

core.int buildCounterRouterStatusResponse = 0;
api.RouterStatusResponse buildRouterStatusResponse() {
  final o = api.RouterStatusResponse();
  buildCounterRouterStatusResponse++;
  if (buildCounterRouterStatusResponse < 3) {
    o.kind = 'foo';
    o.result = buildRouterStatus();
  }
  buildCounterRouterStatusResponse--;
  return o;
}

void checkRouterStatusResponse(api.RouterStatusResponse o) {
  buildCounterRouterStatusResponse++;
  if (buildCounterRouterStatusResponse < 3) {
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkRouterStatus(o.result!);
  }
  buildCounterRouterStatusResponse--;
}

core.int buildCounterRoutersPreviewResponse = 0;
api.RoutersPreviewResponse buildRoutersPreviewResponse() {
  final o = api.RoutersPreviewResponse();
  buildCounterRoutersPreviewResponse++;
  if (buildCounterRoutersPreviewResponse < 3) {
    o.resource = buildRouter();
  }
  buildCounterRoutersPreviewResponse--;
  return o;
}

void checkRoutersPreviewResponse(api.RoutersPreviewResponse o) {
  buildCounterRoutersPreviewResponse++;
  if (buildCounterRoutersPreviewResponse < 3) {
    checkRouter(o.resource!);
  }
  buildCounterRoutersPreviewResponse--;
}

core.List<api.Router> buildUnnamed1278() => [
      buildRouter(),
      buildRouter(),
    ];

void checkUnnamed1278(core.List<api.Router> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRouter(o[0]);
  checkRouter(o[1]);
}

core.int buildCounterRoutersScopedListWarningData = 0;
api.RoutersScopedListWarningData buildRoutersScopedListWarningData() {
  final o = api.RoutersScopedListWarningData();
  buildCounterRoutersScopedListWarningData++;
  if (buildCounterRoutersScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterRoutersScopedListWarningData--;
  return o;
}

void checkRoutersScopedListWarningData(api.RoutersScopedListWarningData o) {
  buildCounterRoutersScopedListWarningData++;
  if (buildCounterRoutersScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterRoutersScopedListWarningData--;
}

core.List<api.RoutersScopedListWarningData> buildUnnamed1279() => [
      buildRoutersScopedListWarningData(),
      buildRoutersScopedListWarningData(),
    ];

void checkUnnamed1279(core.List<api.RoutersScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkRoutersScopedListWarningData(o[0]);
  checkRoutersScopedListWarningData(o[1]);
}

core.int buildCounterRoutersScopedListWarning = 0;
api.RoutersScopedListWarning buildRoutersScopedListWarning() {
  final o = api.RoutersScopedListWarning();
  buildCounterRoutersScopedListWarning++;
  if (buildCounterRoutersScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1279();
    o.message = 'foo';
  }
  buildCounterRoutersScopedListWarning--;
  return o;
}

void checkRoutersScopedListWarning(api.RoutersScopedListWarning o) {
  buildCounterRoutersScopedListWarning++;
  if (buildCounterRoutersScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1279(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterRoutersScopedListWarning--;
}

core.int buildCounterRoutersScopedList = 0;
api.RoutersScopedList buildRoutersScopedList() {
  final o = api.RoutersScopedList();
  buildCounterRoutersScopedList++;
  if (buildCounterRoutersScopedList < 3) {
    o.routers = buildUnnamed1278();
    o.warning = buildRoutersScopedListWarning();
  }
  buildCounterRoutersScopedList--;
  return o;
}

void checkRoutersScopedList(api.RoutersScopedList o) {
  buildCounterRoutersScopedList++;
  if (buildCounterRoutersScopedList < 3) {
    checkUnnamed1278(o.routers!);
    checkRoutersScopedListWarning(o.warning!);
  }
  buildCounterRoutersScopedList--;
}

core.List<api.Condition> buildUnnamed1280() => [
      buildCondition(),
      buildCondition(),
    ];

void checkUnnamed1280(core.List<api.Condition> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkCondition(o[0]);
  checkCondition(o[1]);
}

core.List<core.String> buildUnnamed1281() => [
      'foo',
      'foo',
    ];

void checkUnnamed1281(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.LogConfig> buildUnnamed1282() => [
      buildLogConfig(),
      buildLogConfig(),
    ];

void checkUnnamed1282(core.List<api.LogConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkLogConfig(o[0]);
  checkLogConfig(o[1]);
}

core.List<core.String> buildUnnamed1283() => [
      'foo',
      'foo',
    ];

void checkUnnamed1283(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1284() => [
      'foo',
      'foo',
    ];

void checkUnnamed1284(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterRule = 0;
api.Rule buildRule() {
  final o = api.Rule();
  buildCounterRule++;
  if (buildCounterRule < 3) {
    o.action = 'foo';
    o.conditions = buildUnnamed1280();
    o.description = 'foo';
    o.ins = buildUnnamed1281();
    o.logConfigs = buildUnnamed1282();
    o.notIns = buildUnnamed1283();
    o.permissions = buildUnnamed1284();
  }
  buildCounterRule--;
  return o;
}

void checkRule(api.Rule o) {
  buildCounterRule++;
  if (buildCounterRule < 3) {
    unittest.expect(
      o.action!,
      unittest.equals('foo'),
    );
    checkUnnamed1280(o.conditions!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1281(o.ins!);
    checkUnnamed1282(o.logConfigs!);
    checkUnnamed1283(o.notIns!);
    checkUnnamed1284(o.permissions!);
  }
  buildCounterRule--;
}

core.int buildCounterSSLHealthCheck = 0;
api.SSLHealthCheck buildSSLHealthCheck() {
  final o = api.SSLHealthCheck();
  buildCounterSSLHealthCheck++;
  if (buildCounterSSLHealthCheck < 3) {
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
    o.proxyHeader = 'foo';
    o.request = 'foo';
    o.response = 'foo';
  }
  buildCounterSSLHealthCheck--;
  return o;
}

void checkSSLHealthCheck(api.SSLHealthCheck o) {
  buildCounterSSLHealthCheck++;
  if (buildCounterSSLHealthCheck < 3) {
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.request!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.response!,
      unittest.equals('foo'),
    );
  }
  buildCounterSSLHealthCheck--;
}

core.int buildCounterScalingScheduleStatus = 0;
api.ScalingScheduleStatus buildScalingScheduleStatus() {
  final o = api.ScalingScheduleStatus();
  buildCounterScalingScheduleStatus++;
  if (buildCounterScalingScheduleStatus < 3) {
    o.lastStartTime = 'foo';
    o.nextStartTime = 'foo';
    o.state = 'foo';
  }
  buildCounterScalingScheduleStatus--;
  return o;
}

void checkScalingScheduleStatus(api.ScalingScheduleStatus o) {
  buildCounterScalingScheduleStatus++;
  if (buildCounterScalingScheduleStatus < 3) {
    unittest.expect(
      o.lastStartTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextStartTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterScalingScheduleStatus--;
}

core.List<api.SchedulingNodeAffinity> buildUnnamed1285() => [
      buildSchedulingNodeAffinity(),
      buildSchedulingNodeAffinity(),
    ];

void checkUnnamed1285(core.List<api.SchedulingNodeAffinity> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSchedulingNodeAffinity(o[0]);
  checkSchedulingNodeAffinity(o[1]);
}

core.int buildCounterScheduling = 0;
api.Scheduling buildScheduling() {
  final o = api.Scheduling();
  buildCounterScheduling++;
  if (buildCounterScheduling < 3) {
    o.automaticRestart = true;
    o.locationHint = 'foo';
    o.minNodeCpus = 42;
    o.nodeAffinities = buildUnnamed1285();
    o.onHostMaintenance = 'foo';
    o.preemptible = true;
  }
  buildCounterScheduling--;
  return o;
}

void checkScheduling(api.Scheduling o) {
  buildCounterScheduling++;
  if (buildCounterScheduling < 3) {
    unittest.expect(o.automaticRestart!, unittest.isTrue);
    unittest.expect(
      o.locationHint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.minNodeCpus!,
      unittest.equals(42),
    );
    checkUnnamed1285(o.nodeAffinities!);
    unittest.expect(
      o.onHostMaintenance!,
      unittest.equals('foo'),
    );
    unittest.expect(o.preemptible!, unittest.isTrue);
  }
  buildCounterScheduling--;
}

core.List<core.String> buildUnnamed1286() => [
      'foo',
      'foo',
    ];

void checkUnnamed1286(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSchedulingNodeAffinity = 0;
api.SchedulingNodeAffinity buildSchedulingNodeAffinity() {
  final o = api.SchedulingNodeAffinity();
  buildCounterSchedulingNodeAffinity++;
  if (buildCounterSchedulingNodeAffinity < 3) {
    o.key = 'foo';
    o.operator = 'foo';
    o.values = buildUnnamed1286();
  }
  buildCounterSchedulingNodeAffinity--;
  return o;
}

void checkSchedulingNodeAffinity(api.SchedulingNodeAffinity o) {
  buildCounterSchedulingNodeAffinity++;
  if (buildCounterSchedulingNodeAffinity < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.operator!,
      unittest.equals('foo'),
    );
    checkUnnamed1286(o.values!);
  }
  buildCounterSchedulingNodeAffinity--;
}

core.int buildCounterScreenshot = 0;
api.Screenshot buildScreenshot() {
  final o = api.Screenshot();
  buildCounterScreenshot++;
  if (buildCounterScreenshot < 3) {
    o.contents = 'foo';
    o.kind = 'foo';
  }
  buildCounterScreenshot--;
  return o;
}

void checkScreenshot(api.Screenshot o) {
  buildCounterScreenshot++;
  if (buildCounterScreenshot < 3) {
    unittest.expect(
      o.contents!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
  }
  buildCounterScreenshot--;
}

core.int buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse =
    0;
api.SecurityPoliciesListPreconfiguredExpressionSetsResponse
    buildSecurityPoliciesListPreconfiguredExpressionSetsResponse() {
  final o = api.SecurityPoliciesListPreconfiguredExpressionSetsResponse();
  buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse++;
  if (buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse < 3) {
    o.preconfiguredExpressionSets = buildSecurityPoliciesWafConfig();
  }
  buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse--;
  return o;
}

void checkSecurityPoliciesListPreconfiguredExpressionSetsResponse(
    api.SecurityPoliciesListPreconfiguredExpressionSetsResponse o) {
  buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse++;
  if (buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse < 3) {
    checkSecurityPoliciesWafConfig(o.preconfiguredExpressionSets!);
  }
  buildCounterSecurityPoliciesListPreconfiguredExpressionSetsResponse--;
}

core.int buildCounterSecurityPoliciesWafConfig = 0;
api.SecurityPoliciesWafConfig buildSecurityPoliciesWafConfig() {
  final o = api.SecurityPoliciesWafConfig();
  buildCounterSecurityPoliciesWafConfig++;
  if (buildCounterSecurityPoliciesWafConfig < 3) {
    o.wafRules = buildPreconfiguredWafSet();
  }
  buildCounterSecurityPoliciesWafConfig--;
  return o;
}

void checkSecurityPoliciesWafConfig(api.SecurityPoliciesWafConfig o) {
  buildCounterSecurityPoliciesWafConfig++;
  if (buildCounterSecurityPoliciesWafConfig < 3) {
    checkPreconfiguredWafSet(o.wafRules!);
  }
  buildCounterSecurityPoliciesWafConfig--;
}

core.List<api.SecurityPolicyRule> buildUnnamed1287() => [
      buildSecurityPolicyRule(),
      buildSecurityPolicyRule(),
    ];

void checkUnnamed1287(core.List<api.SecurityPolicyRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSecurityPolicyRule(o[0]);
  checkSecurityPolicyRule(o[1]);
}

core.int buildCounterSecurityPolicy = 0;
api.SecurityPolicy buildSecurityPolicy() {
  final o = api.SecurityPolicy();
  buildCounterSecurityPolicy++;
  if (buildCounterSecurityPolicy < 3) {
    o.adaptiveProtectionConfig = buildSecurityPolicyAdaptiveProtectionConfig();
    o.advancedOptionsConfig = buildSecurityPolicyAdvancedOptionsConfig();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.rules = buildUnnamed1287();
    o.selfLink = 'foo';
  }
  buildCounterSecurityPolicy--;
  return o;
}

void checkSecurityPolicy(api.SecurityPolicy o) {
  buildCounterSecurityPolicy++;
  if (buildCounterSecurityPolicy < 3) {
    checkSecurityPolicyAdaptiveProtectionConfig(o.adaptiveProtectionConfig!);
    checkSecurityPolicyAdvancedOptionsConfig(o.advancedOptionsConfig!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1287(o.rules!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicy--;
}

core.int buildCounterSecurityPolicyAdaptiveProtectionConfig = 0;
api.SecurityPolicyAdaptiveProtectionConfig
    buildSecurityPolicyAdaptiveProtectionConfig() {
  final o = api.SecurityPolicyAdaptiveProtectionConfig();
  buildCounterSecurityPolicyAdaptiveProtectionConfig++;
  if (buildCounterSecurityPolicyAdaptiveProtectionConfig < 3) {
    o.layer7DdosDefenseConfig =
        buildSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig();
  }
  buildCounterSecurityPolicyAdaptiveProtectionConfig--;
  return o;
}

void checkSecurityPolicyAdaptiveProtectionConfig(
    api.SecurityPolicyAdaptiveProtectionConfig o) {
  buildCounterSecurityPolicyAdaptiveProtectionConfig++;
  if (buildCounterSecurityPolicyAdaptiveProtectionConfig < 3) {
    checkSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig(
        o.layer7DdosDefenseConfig!);
  }
  buildCounterSecurityPolicyAdaptiveProtectionConfig--;
}

core.int
    buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig =
    0;
api.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
    buildSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig() {
  final o = api.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig();
  buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig++;
  if (buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig <
      3) {
    o.enable = true;
    o.ruleVisibility = 'foo';
  }
  buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig--;
  return o;
}

void checkSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig(
    api.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig o) {
  buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig++;
  if (buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig <
      3) {
    unittest.expect(o.enable!, unittest.isTrue);
    unittest.expect(
      o.ruleVisibility!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig--;
}

core.int buildCounterSecurityPolicyAdvancedOptionsConfig = 0;
api.SecurityPolicyAdvancedOptionsConfig
    buildSecurityPolicyAdvancedOptionsConfig() {
  final o = api.SecurityPolicyAdvancedOptionsConfig();
  buildCounterSecurityPolicyAdvancedOptionsConfig++;
  if (buildCounterSecurityPolicyAdvancedOptionsConfig < 3) {
    o.jsonParsing = 'foo';
    o.logLevel = 'foo';
  }
  buildCounterSecurityPolicyAdvancedOptionsConfig--;
  return o;
}

void checkSecurityPolicyAdvancedOptionsConfig(
    api.SecurityPolicyAdvancedOptionsConfig o) {
  buildCounterSecurityPolicyAdvancedOptionsConfig++;
  if (buildCounterSecurityPolicyAdvancedOptionsConfig < 3) {
    unittest.expect(
      o.jsonParsing!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.logLevel!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyAdvancedOptionsConfig--;
}

core.List<api.SecurityPolicy> buildUnnamed1288() => [
      buildSecurityPolicy(),
      buildSecurityPolicy(),
    ];

void checkUnnamed1288(core.List<api.SecurityPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSecurityPolicy(o[0]);
  checkSecurityPolicy(o[1]);
}

core.int buildCounterSecurityPolicyListWarningData = 0;
api.SecurityPolicyListWarningData buildSecurityPolicyListWarningData() {
  final o = api.SecurityPolicyListWarningData();
  buildCounterSecurityPolicyListWarningData++;
  if (buildCounterSecurityPolicyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSecurityPolicyListWarningData--;
  return o;
}

void checkSecurityPolicyListWarningData(api.SecurityPolicyListWarningData o) {
  buildCounterSecurityPolicyListWarningData++;
  if (buildCounterSecurityPolicyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyListWarningData--;
}

core.List<api.SecurityPolicyListWarningData> buildUnnamed1289() => [
      buildSecurityPolicyListWarningData(),
      buildSecurityPolicyListWarningData(),
    ];

void checkUnnamed1289(core.List<api.SecurityPolicyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSecurityPolicyListWarningData(o[0]);
  checkSecurityPolicyListWarningData(o[1]);
}

core.int buildCounterSecurityPolicyListWarning = 0;
api.SecurityPolicyListWarning buildSecurityPolicyListWarning() {
  final o = api.SecurityPolicyListWarning();
  buildCounterSecurityPolicyListWarning++;
  if (buildCounterSecurityPolicyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1289();
    o.message = 'foo';
  }
  buildCounterSecurityPolicyListWarning--;
  return o;
}

void checkSecurityPolicyListWarning(api.SecurityPolicyListWarning o) {
  buildCounterSecurityPolicyListWarning++;
  if (buildCounterSecurityPolicyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1289(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyListWarning--;
}

core.int buildCounterSecurityPolicyList = 0;
api.SecurityPolicyList buildSecurityPolicyList() {
  final o = api.SecurityPolicyList();
  buildCounterSecurityPolicyList++;
  if (buildCounterSecurityPolicyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1288();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.warning = buildSecurityPolicyListWarning();
  }
  buildCounterSecurityPolicyList--;
  return o;
}

void checkSecurityPolicyList(api.SecurityPolicyList o) {
  buildCounterSecurityPolicyList++;
  if (buildCounterSecurityPolicyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1288(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkSecurityPolicyListWarning(o.warning!);
  }
  buildCounterSecurityPolicyList--;
}

core.int buildCounterSecurityPolicyReference = 0;
api.SecurityPolicyReference buildSecurityPolicyReference() {
  final o = api.SecurityPolicyReference();
  buildCounterSecurityPolicyReference++;
  if (buildCounterSecurityPolicyReference < 3) {
    o.securityPolicy = 'foo';
  }
  buildCounterSecurityPolicyReference--;
  return o;
}

void checkSecurityPolicyReference(api.SecurityPolicyReference o) {
  buildCounterSecurityPolicyReference++;
  if (buildCounterSecurityPolicyReference < 3) {
    unittest.expect(
      o.securityPolicy!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyReference--;
}

core.int buildCounterSecurityPolicyRule = 0;
api.SecurityPolicyRule buildSecurityPolicyRule() {
  final o = api.SecurityPolicyRule();
  buildCounterSecurityPolicyRule++;
  if (buildCounterSecurityPolicyRule < 3) {
    o.action = 'foo';
    o.description = 'foo';
    o.kind = 'foo';
    o.match = buildSecurityPolicyRuleMatcher();
    o.preview = true;
    o.priority = 42;
  }
  buildCounterSecurityPolicyRule--;
  return o;
}

void checkSecurityPolicyRule(api.SecurityPolicyRule o) {
  buildCounterSecurityPolicyRule++;
  if (buildCounterSecurityPolicyRule < 3) {
    unittest.expect(
      o.action!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkSecurityPolicyRuleMatcher(o.match!);
    unittest.expect(o.preview!, unittest.isTrue);
    unittest.expect(
      o.priority!,
      unittest.equals(42),
    );
  }
  buildCounterSecurityPolicyRule--;
}

core.int buildCounterSecurityPolicyRuleMatcher = 0;
api.SecurityPolicyRuleMatcher buildSecurityPolicyRuleMatcher() {
  final o = api.SecurityPolicyRuleMatcher();
  buildCounterSecurityPolicyRuleMatcher++;
  if (buildCounterSecurityPolicyRuleMatcher < 3) {
    o.config = buildSecurityPolicyRuleMatcherConfig();
    o.expr = buildExpr();
    o.versionedExpr = 'foo';
  }
  buildCounterSecurityPolicyRuleMatcher--;
  return o;
}

void checkSecurityPolicyRuleMatcher(api.SecurityPolicyRuleMatcher o) {
  buildCounterSecurityPolicyRuleMatcher++;
  if (buildCounterSecurityPolicyRuleMatcher < 3) {
    checkSecurityPolicyRuleMatcherConfig(o.config!);
    checkExpr(o.expr!);
    unittest.expect(
      o.versionedExpr!,
      unittest.equals('foo'),
    );
  }
  buildCounterSecurityPolicyRuleMatcher--;
}

core.List<core.String> buildUnnamed1290() => [
      'foo',
      'foo',
    ];

void checkUnnamed1290(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSecurityPolicyRuleMatcherConfig = 0;
api.SecurityPolicyRuleMatcherConfig buildSecurityPolicyRuleMatcherConfig() {
  final o = api.SecurityPolicyRuleMatcherConfig();
  buildCounterSecurityPolicyRuleMatcherConfig++;
  if (buildCounterSecurityPolicyRuleMatcherConfig < 3) {
    o.srcIpRanges = buildUnnamed1290();
  }
  buildCounterSecurityPolicyRuleMatcherConfig--;
  return o;
}

void checkSecurityPolicyRuleMatcherConfig(
    api.SecurityPolicyRuleMatcherConfig o) {
  buildCounterSecurityPolicyRuleMatcherConfig++;
  if (buildCounterSecurityPolicyRuleMatcherConfig < 3) {
    checkUnnamed1290(o.srcIpRanges!);
  }
  buildCounterSecurityPolicyRuleMatcherConfig--;
}

core.List<core.String> buildUnnamed1291() => [
      'foo',
      'foo',
    ];

void checkUnnamed1291(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSecuritySettings = 0;
api.SecuritySettings buildSecuritySettings() {
  final o = api.SecuritySettings();
  buildCounterSecuritySettings++;
  if (buildCounterSecuritySettings < 3) {
    o.clientTlsPolicy = 'foo';
    o.subjectAltNames = buildUnnamed1291();
  }
  buildCounterSecuritySettings--;
  return o;
}

void checkSecuritySettings(api.SecuritySettings o) {
  buildCounterSecuritySettings++;
  if (buildCounterSecuritySettings < 3) {
    unittest.expect(
      o.clientTlsPolicy!,
      unittest.equals('foo'),
    );
    checkUnnamed1291(o.subjectAltNames!);
  }
  buildCounterSecuritySettings--;
}

core.int buildCounterSerialPortOutput = 0;
api.SerialPortOutput buildSerialPortOutput() {
  final o = api.SerialPortOutput();
  buildCounterSerialPortOutput++;
  if (buildCounterSerialPortOutput < 3) {
    o.contents = 'foo';
    o.kind = 'foo';
    o.next = 'foo';
    o.selfLink = 'foo';
    o.start = 'foo';
  }
  buildCounterSerialPortOutput--;
  return o;
}

void checkSerialPortOutput(api.SerialPortOutput o) {
  buildCounterSerialPortOutput++;
  if (buildCounterSerialPortOutput < 3) {
    unittest.expect(
      o.contents!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.next!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.start!,
      unittest.equals('foo'),
    );
  }
  buildCounterSerialPortOutput--;
}

core.int buildCounterServerBinding = 0;
api.ServerBinding buildServerBinding() {
  final o = api.ServerBinding();
  buildCounterServerBinding++;
  if (buildCounterServerBinding < 3) {
    o.type = 'foo';
  }
  buildCounterServerBinding--;
  return o;
}

void checkServerBinding(api.ServerBinding o) {
  buildCounterServerBinding++;
  if (buildCounterServerBinding < 3) {
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterServerBinding--;
}

core.List<core.String> buildUnnamed1292() => [
      'foo',
      'foo',
    ];

void checkUnnamed1292(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterServiceAccount = 0;
api.ServiceAccount buildServiceAccount() {
  final o = api.ServiceAccount();
  buildCounterServiceAccount++;
  if (buildCounterServiceAccount < 3) {
    o.email = 'foo';
    o.scopes = buildUnnamed1292();
  }
  buildCounterServiceAccount--;
  return o;
}

void checkServiceAccount(api.ServiceAccount o) {
  buildCounterServiceAccount++;
  if (buildCounterServiceAccount < 3) {
    unittest.expect(
      o.email!,
      unittest.equals('foo'),
    );
    checkUnnamed1292(o.scopes!);
  }
  buildCounterServiceAccount--;
}

core.List<api.ServiceAttachmentConnectedEndpoint> buildUnnamed1293() => [
      buildServiceAttachmentConnectedEndpoint(),
      buildServiceAttachmentConnectedEndpoint(),
    ];

void checkUnnamed1293(core.List<api.ServiceAttachmentConnectedEndpoint> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentConnectedEndpoint(o[0]);
  checkServiceAttachmentConnectedEndpoint(o[1]);
}

core.List<api.ServiceAttachmentConsumerProjectLimit> buildUnnamed1294() => [
      buildServiceAttachmentConsumerProjectLimit(),
      buildServiceAttachmentConsumerProjectLimit(),
    ];

void checkUnnamed1294(core.List<api.ServiceAttachmentConsumerProjectLimit> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentConsumerProjectLimit(o[0]);
  checkServiceAttachmentConsumerProjectLimit(o[1]);
}

core.List<core.String> buildUnnamed1295() => [
      'foo',
      'foo',
    ];

void checkUnnamed1295(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1296() => [
      'foo',
      'foo',
    ];

void checkUnnamed1296(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterServiceAttachment = 0;
api.ServiceAttachment buildServiceAttachment() {
  final o = api.ServiceAttachment();
  buildCounterServiceAttachment++;
  if (buildCounterServiceAttachment < 3) {
    o.connectedEndpoints = buildUnnamed1293();
    o.connectionPreference = 'foo';
    o.consumerAcceptLists = buildUnnamed1294();
    o.consumerRejectLists = buildUnnamed1295();
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.enableProxyProtocol = true;
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.natSubnets = buildUnnamed1296();
    o.producerForwardingRule = 'foo';
    o.pscServiceAttachmentId = buildUint128();
    o.region = 'foo';
    o.selfLink = 'foo';
    o.targetService = 'foo';
  }
  buildCounterServiceAttachment--;
  return o;
}

void checkServiceAttachment(api.ServiceAttachment o) {
  buildCounterServiceAttachment++;
  if (buildCounterServiceAttachment < 3) {
    checkUnnamed1293(o.connectedEndpoints!);
    unittest.expect(
      o.connectionPreference!,
      unittest.equals('foo'),
    );
    checkUnnamed1294(o.consumerAcceptLists!);
    checkUnnamed1295(o.consumerRejectLists!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.enableProxyProtocol!, unittest.isTrue);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1296(o.natSubnets!);
    unittest.expect(
      o.producerForwardingRule!,
      unittest.equals('foo'),
    );
    checkUint128(o.pscServiceAttachmentId!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetService!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachment--;
}

core.Map<core.String, api.ServiceAttachmentsScopedList> buildUnnamed1297() => {
      'x': buildServiceAttachmentsScopedList(),
      'y': buildServiceAttachmentsScopedList(),
    };

void checkUnnamed1297(
    core.Map<core.String, api.ServiceAttachmentsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentsScopedList(o['x']!);
  checkServiceAttachmentsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1298() => [
      'foo',
      'foo',
    ];

void checkUnnamed1298(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterServiceAttachmentAggregatedListWarningData = 0;
api.ServiceAttachmentAggregatedListWarningData
    buildServiceAttachmentAggregatedListWarningData() {
  final o = api.ServiceAttachmentAggregatedListWarningData();
  buildCounterServiceAttachmentAggregatedListWarningData++;
  if (buildCounterServiceAttachmentAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterServiceAttachmentAggregatedListWarningData--;
  return o;
}

void checkServiceAttachmentAggregatedListWarningData(
    api.ServiceAttachmentAggregatedListWarningData o) {
  buildCounterServiceAttachmentAggregatedListWarningData++;
  if (buildCounterServiceAttachmentAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentAggregatedListWarningData--;
}

core.List<api.ServiceAttachmentAggregatedListWarningData> buildUnnamed1299() =>
    [
      buildServiceAttachmentAggregatedListWarningData(),
      buildServiceAttachmentAggregatedListWarningData(),
    ];

void checkUnnamed1299(
    core.List<api.ServiceAttachmentAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentAggregatedListWarningData(o[0]);
  checkServiceAttachmentAggregatedListWarningData(o[1]);
}

core.int buildCounterServiceAttachmentAggregatedListWarning = 0;
api.ServiceAttachmentAggregatedListWarning
    buildServiceAttachmentAggregatedListWarning() {
  final o = api.ServiceAttachmentAggregatedListWarning();
  buildCounterServiceAttachmentAggregatedListWarning++;
  if (buildCounterServiceAttachmentAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1299();
    o.message = 'foo';
  }
  buildCounterServiceAttachmentAggregatedListWarning--;
  return o;
}

void checkServiceAttachmentAggregatedListWarning(
    api.ServiceAttachmentAggregatedListWarning o) {
  buildCounterServiceAttachmentAggregatedListWarning++;
  if (buildCounterServiceAttachmentAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1299(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentAggregatedListWarning--;
}

core.int buildCounterServiceAttachmentAggregatedList = 0;
api.ServiceAttachmentAggregatedList buildServiceAttachmentAggregatedList() {
  final o = api.ServiceAttachmentAggregatedList();
  buildCounterServiceAttachmentAggregatedList++;
  if (buildCounterServiceAttachmentAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1297();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1298();
    o.warning = buildServiceAttachmentAggregatedListWarning();
  }
  buildCounterServiceAttachmentAggregatedList--;
  return o;
}

void checkServiceAttachmentAggregatedList(
    api.ServiceAttachmentAggregatedList o) {
  buildCounterServiceAttachmentAggregatedList++;
  if (buildCounterServiceAttachmentAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1297(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1298(o.unreachables!);
    checkServiceAttachmentAggregatedListWarning(o.warning!);
  }
  buildCounterServiceAttachmentAggregatedList--;
}

core.int buildCounterServiceAttachmentConnectedEndpoint = 0;
api.ServiceAttachmentConnectedEndpoint
    buildServiceAttachmentConnectedEndpoint() {
  final o = api.ServiceAttachmentConnectedEndpoint();
  buildCounterServiceAttachmentConnectedEndpoint++;
  if (buildCounterServiceAttachmentConnectedEndpoint < 3) {
    o.endpoint = 'foo';
    o.pscConnectionId = 'foo';
    o.status = 'foo';
  }
  buildCounterServiceAttachmentConnectedEndpoint--;
  return o;
}

void checkServiceAttachmentConnectedEndpoint(
    api.ServiceAttachmentConnectedEndpoint o) {
  buildCounterServiceAttachmentConnectedEndpoint++;
  if (buildCounterServiceAttachmentConnectedEndpoint < 3) {
    unittest.expect(
      o.endpoint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.pscConnectionId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentConnectedEndpoint--;
}

core.int buildCounterServiceAttachmentConsumerProjectLimit = 0;
api.ServiceAttachmentConsumerProjectLimit
    buildServiceAttachmentConsumerProjectLimit() {
  final o = api.ServiceAttachmentConsumerProjectLimit();
  buildCounterServiceAttachmentConsumerProjectLimit++;
  if (buildCounterServiceAttachmentConsumerProjectLimit < 3) {
    o.connectionLimit = 42;
    o.projectIdOrNum = 'foo';
  }
  buildCounterServiceAttachmentConsumerProjectLimit--;
  return o;
}

void checkServiceAttachmentConsumerProjectLimit(
    api.ServiceAttachmentConsumerProjectLimit o) {
  buildCounterServiceAttachmentConsumerProjectLimit++;
  if (buildCounterServiceAttachmentConsumerProjectLimit < 3) {
    unittest.expect(
      o.connectionLimit!,
      unittest.equals(42),
    );
    unittest.expect(
      o.projectIdOrNum!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentConsumerProjectLimit--;
}

core.List<api.ServiceAttachment> buildUnnamed1300() => [
      buildServiceAttachment(),
      buildServiceAttachment(),
    ];

void checkUnnamed1300(core.List<api.ServiceAttachment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachment(o[0]);
  checkServiceAttachment(o[1]);
}

core.int buildCounterServiceAttachmentListWarningData = 0;
api.ServiceAttachmentListWarningData buildServiceAttachmentListWarningData() {
  final o = api.ServiceAttachmentListWarningData();
  buildCounterServiceAttachmentListWarningData++;
  if (buildCounterServiceAttachmentListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterServiceAttachmentListWarningData--;
  return o;
}

void checkServiceAttachmentListWarningData(
    api.ServiceAttachmentListWarningData o) {
  buildCounterServiceAttachmentListWarningData++;
  if (buildCounterServiceAttachmentListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentListWarningData--;
}

core.List<api.ServiceAttachmentListWarningData> buildUnnamed1301() => [
      buildServiceAttachmentListWarningData(),
      buildServiceAttachmentListWarningData(),
    ];

void checkUnnamed1301(core.List<api.ServiceAttachmentListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentListWarningData(o[0]);
  checkServiceAttachmentListWarningData(o[1]);
}

core.int buildCounterServiceAttachmentListWarning = 0;
api.ServiceAttachmentListWarning buildServiceAttachmentListWarning() {
  final o = api.ServiceAttachmentListWarning();
  buildCounterServiceAttachmentListWarning++;
  if (buildCounterServiceAttachmentListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1301();
    o.message = 'foo';
  }
  buildCounterServiceAttachmentListWarning--;
  return o;
}

void checkServiceAttachmentListWarning(api.ServiceAttachmentListWarning o) {
  buildCounterServiceAttachmentListWarning++;
  if (buildCounterServiceAttachmentListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1301(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentListWarning--;
}

core.int buildCounterServiceAttachmentList = 0;
api.ServiceAttachmentList buildServiceAttachmentList() {
  final o = api.ServiceAttachmentList();
  buildCounterServiceAttachmentList++;
  if (buildCounterServiceAttachmentList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1300();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildServiceAttachmentListWarning();
  }
  buildCounterServiceAttachmentList--;
  return o;
}

void checkServiceAttachmentList(api.ServiceAttachmentList o) {
  buildCounterServiceAttachmentList++;
  if (buildCounterServiceAttachmentList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1300(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkServiceAttachmentListWarning(o.warning!);
  }
  buildCounterServiceAttachmentList--;
}

core.List<api.ServiceAttachment> buildUnnamed1302() => [
      buildServiceAttachment(),
      buildServiceAttachment(),
    ];

void checkUnnamed1302(core.List<api.ServiceAttachment> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachment(o[0]);
  checkServiceAttachment(o[1]);
}

core.int buildCounterServiceAttachmentsScopedListWarningData = 0;
api.ServiceAttachmentsScopedListWarningData
    buildServiceAttachmentsScopedListWarningData() {
  final o = api.ServiceAttachmentsScopedListWarningData();
  buildCounterServiceAttachmentsScopedListWarningData++;
  if (buildCounterServiceAttachmentsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterServiceAttachmentsScopedListWarningData--;
  return o;
}

void checkServiceAttachmentsScopedListWarningData(
    api.ServiceAttachmentsScopedListWarningData o) {
  buildCounterServiceAttachmentsScopedListWarningData++;
  if (buildCounterServiceAttachmentsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentsScopedListWarningData--;
}

core.List<api.ServiceAttachmentsScopedListWarningData> buildUnnamed1303() => [
      buildServiceAttachmentsScopedListWarningData(),
      buildServiceAttachmentsScopedListWarningData(),
    ];

void checkUnnamed1303(
    core.List<api.ServiceAttachmentsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkServiceAttachmentsScopedListWarningData(o[0]);
  checkServiceAttachmentsScopedListWarningData(o[1]);
}

core.int buildCounterServiceAttachmentsScopedListWarning = 0;
api.ServiceAttachmentsScopedListWarning
    buildServiceAttachmentsScopedListWarning() {
  final o = api.ServiceAttachmentsScopedListWarning();
  buildCounterServiceAttachmentsScopedListWarning++;
  if (buildCounterServiceAttachmentsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1303();
    o.message = 'foo';
  }
  buildCounterServiceAttachmentsScopedListWarning--;
  return o;
}

void checkServiceAttachmentsScopedListWarning(
    api.ServiceAttachmentsScopedListWarning o) {
  buildCounterServiceAttachmentsScopedListWarning++;
  if (buildCounterServiceAttachmentsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1303(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterServiceAttachmentsScopedListWarning--;
}

core.int buildCounterServiceAttachmentsScopedList = 0;
api.ServiceAttachmentsScopedList buildServiceAttachmentsScopedList() {
  final o = api.ServiceAttachmentsScopedList();
  buildCounterServiceAttachmentsScopedList++;
  if (buildCounterServiceAttachmentsScopedList < 3) {
    o.serviceAttachments = buildUnnamed1302();
    o.warning = buildServiceAttachmentsScopedListWarning();
  }
  buildCounterServiceAttachmentsScopedList--;
  return o;
}

void checkServiceAttachmentsScopedList(api.ServiceAttachmentsScopedList o) {
  buildCounterServiceAttachmentsScopedList++;
  if (buildCounterServiceAttachmentsScopedList < 3) {
    checkUnnamed1302(o.serviceAttachments!);
    checkServiceAttachmentsScopedListWarning(o.warning!);
  }
  buildCounterServiceAttachmentsScopedList--;
}

core.int buildCounterShieldedInstanceConfig = 0;
api.ShieldedInstanceConfig buildShieldedInstanceConfig() {
  final o = api.ShieldedInstanceConfig();
  buildCounterShieldedInstanceConfig++;
  if (buildCounterShieldedInstanceConfig < 3) {
    o.enableIntegrityMonitoring = true;
    o.enableSecureBoot = true;
    o.enableVtpm = true;
  }
  buildCounterShieldedInstanceConfig--;
  return o;
}

void checkShieldedInstanceConfig(api.ShieldedInstanceConfig o) {
  buildCounterShieldedInstanceConfig++;
  if (buildCounterShieldedInstanceConfig < 3) {
    unittest.expect(o.enableIntegrityMonitoring!, unittest.isTrue);
    unittest.expect(o.enableSecureBoot!, unittest.isTrue);
    unittest.expect(o.enableVtpm!, unittest.isTrue);
  }
  buildCounterShieldedInstanceConfig--;
}

core.int buildCounterShieldedInstanceIdentity = 0;
api.ShieldedInstanceIdentity buildShieldedInstanceIdentity() {
  final o = api.ShieldedInstanceIdentity();
  buildCounterShieldedInstanceIdentity++;
  if (buildCounterShieldedInstanceIdentity < 3) {
    o.encryptionKey = buildShieldedInstanceIdentityEntry();
    o.kind = 'foo';
    o.signingKey = buildShieldedInstanceIdentityEntry();
  }
  buildCounterShieldedInstanceIdentity--;
  return o;
}

void checkShieldedInstanceIdentity(api.ShieldedInstanceIdentity o) {
  buildCounterShieldedInstanceIdentity++;
  if (buildCounterShieldedInstanceIdentity < 3) {
    checkShieldedInstanceIdentityEntry(o.encryptionKey!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkShieldedInstanceIdentityEntry(o.signingKey!);
  }
  buildCounterShieldedInstanceIdentity--;
}

core.int buildCounterShieldedInstanceIdentityEntry = 0;
api.ShieldedInstanceIdentityEntry buildShieldedInstanceIdentityEntry() {
  final o = api.ShieldedInstanceIdentityEntry();
  buildCounterShieldedInstanceIdentityEntry++;
  if (buildCounterShieldedInstanceIdentityEntry < 3) {
    o.ekCert = 'foo';
    o.ekPub = 'foo';
  }
  buildCounterShieldedInstanceIdentityEntry--;
  return o;
}

void checkShieldedInstanceIdentityEntry(api.ShieldedInstanceIdentityEntry o) {
  buildCounterShieldedInstanceIdentityEntry++;
  if (buildCounterShieldedInstanceIdentityEntry < 3) {
    unittest.expect(
      o.ekCert!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ekPub!,
      unittest.equals('foo'),
    );
  }
  buildCounterShieldedInstanceIdentityEntry--;
}

core.int buildCounterShieldedInstanceIntegrityPolicy = 0;
api.ShieldedInstanceIntegrityPolicy buildShieldedInstanceIntegrityPolicy() {
  final o = api.ShieldedInstanceIntegrityPolicy();
  buildCounterShieldedInstanceIntegrityPolicy++;
  if (buildCounterShieldedInstanceIntegrityPolicy < 3) {
    o.updateAutoLearnPolicy = true;
  }
  buildCounterShieldedInstanceIntegrityPolicy--;
  return o;
}

void checkShieldedInstanceIntegrityPolicy(
    api.ShieldedInstanceIntegrityPolicy o) {
  buildCounterShieldedInstanceIntegrityPolicy++;
  if (buildCounterShieldedInstanceIntegrityPolicy < 3) {
    unittest.expect(o.updateAutoLearnPolicy!, unittest.isTrue);
  }
  buildCounterShieldedInstanceIntegrityPolicy--;
}

core.int buildCounterSignedUrlKey = 0;
api.SignedUrlKey buildSignedUrlKey() {
  final o = api.SignedUrlKey();
  buildCounterSignedUrlKey++;
  if (buildCounterSignedUrlKey < 3) {
    o.keyName = 'foo';
    o.keyValue = 'foo';
  }
  buildCounterSignedUrlKey--;
  return o;
}

void checkSignedUrlKey(api.SignedUrlKey o) {
  buildCounterSignedUrlKey++;
  if (buildCounterSignedUrlKey < 3) {
    unittest.expect(
      o.keyName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.keyValue!,
      unittest.equals('foo'),
    );
  }
  buildCounterSignedUrlKey--;
}

core.Map<core.String, core.String> buildUnnamed1304() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1304(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1305() => [
      'foo',
      'foo',
    ];

void checkUnnamed1305(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1306() => [
      'foo',
      'foo',
    ];

void checkUnnamed1306(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1307() => [
      'foo',
      'foo',
    ];

void checkUnnamed1307(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSnapshot = 0;
api.Snapshot buildSnapshot() {
  final o = api.Snapshot();
  buildCounterSnapshot++;
  if (buildCounterSnapshot < 3) {
    o.autoCreated = true;
    o.chainName = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.diskSizeGb = 'foo';
    o.downloadBytes = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed1304();
    o.licenseCodes = buildUnnamed1305();
    o.licenses = buildUnnamed1306();
    o.locationHint = 'foo';
    o.name = 'foo';
    o.satisfiesPzs = true;
    o.selfLink = 'foo';
    o.snapshotEncryptionKey = buildCustomerEncryptionKey();
    o.sourceDisk = 'foo';
    o.sourceDiskEncryptionKey = buildCustomerEncryptionKey();
    o.sourceDiskId = 'foo';
    o.status = 'foo';
    o.storageBytes = 'foo';
    o.storageBytesStatus = 'foo';
    o.storageLocations = buildUnnamed1307();
  }
  buildCounterSnapshot--;
  return o;
}

void checkSnapshot(api.Snapshot o) {
  buildCounterSnapshot++;
  if (buildCounterSnapshot < 3) {
    unittest.expect(o.autoCreated!, unittest.isTrue);
    unittest.expect(
      o.chainName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.diskSizeGb!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.downloadBytes!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1304(o.labels!);
    checkUnnamed1305(o.licenseCodes!);
    checkUnnamed1306(o.licenses!);
    unittest.expect(
      o.locationHint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.satisfiesPzs!, unittest.isTrue);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.snapshotEncryptionKey!);
    unittest.expect(
      o.sourceDisk!,
      unittest.equals('foo'),
    );
    checkCustomerEncryptionKey(o.sourceDiskEncryptionKey!);
    unittest.expect(
      o.sourceDiskId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.storageBytes!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.storageBytesStatus!,
      unittest.equals('foo'),
    );
    checkUnnamed1307(o.storageLocations!);
  }
  buildCounterSnapshot--;
}

core.List<api.Snapshot> buildUnnamed1308() => [
      buildSnapshot(),
      buildSnapshot(),
    ];

void checkUnnamed1308(core.List<api.Snapshot> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSnapshot(o[0]);
  checkSnapshot(o[1]);
}

core.int buildCounterSnapshotListWarningData = 0;
api.SnapshotListWarningData buildSnapshotListWarningData() {
  final o = api.SnapshotListWarningData();
  buildCounterSnapshotListWarningData++;
  if (buildCounterSnapshotListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSnapshotListWarningData--;
  return o;
}

void checkSnapshotListWarningData(api.SnapshotListWarningData o) {
  buildCounterSnapshotListWarningData++;
  if (buildCounterSnapshotListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSnapshotListWarningData--;
}

core.List<api.SnapshotListWarningData> buildUnnamed1309() => [
      buildSnapshotListWarningData(),
      buildSnapshotListWarningData(),
    ];

void checkUnnamed1309(core.List<api.SnapshotListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSnapshotListWarningData(o[0]);
  checkSnapshotListWarningData(o[1]);
}

core.int buildCounterSnapshotListWarning = 0;
api.SnapshotListWarning buildSnapshotListWarning() {
  final o = api.SnapshotListWarning();
  buildCounterSnapshotListWarning++;
  if (buildCounterSnapshotListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1309();
    o.message = 'foo';
  }
  buildCounterSnapshotListWarning--;
  return o;
}

void checkSnapshotListWarning(api.SnapshotListWarning o) {
  buildCounterSnapshotListWarning++;
  if (buildCounterSnapshotListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1309(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSnapshotListWarning--;
}

core.int buildCounterSnapshotList = 0;
api.SnapshotList buildSnapshotList() {
  final o = api.SnapshotList();
  buildCounterSnapshotList++;
  if (buildCounterSnapshotList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1308();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildSnapshotListWarning();
  }
  buildCounterSnapshotList--;
  return o;
}

void checkSnapshotList(api.SnapshotList o) {
  buildCounterSnapshotList++;
  if (buildCounterSnapshotList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1308(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSnapshotListWarning(o.warning!);
  }
  buildCounterSnapshotList--;
}

core.List<api.DiskInstantiationConfig> buildUnnamed1310() => [
      buildDiskInstantiationConfig(),
      buildDiskInstantiationConfig(),
    ];

void checkUnnamed1310(core.List<api.DiskInstantiationConfig> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkDiskInstantiationConfig(o[0]);
  checkDiskInstantiationConfig(o[1]);
}

core.int buildCounterSourceInstanceParams = 0;
api.SourceInstanceParams buildSourceInstanceParams() {
  final o = api.SourceInstanceParams();
  buildCounterSourceInstanceParams++;
  if (buildCounterSourceInstanceParams < 3) {
    o.diskConfigs = buildUnnamed1310();
  }
  buildCounterSourceInstanceParams--;
  return o;
}

void checkSourceInstanceParams(api.SourceInstanceParams o) {
  buildCounterSourceInstanceParams++;
  if (buildCounterSourceInstanceParams < 3) {
    checkUnnamed1310(o.diskConfigs!);
  }
  buildCounterSourceInstanceParams--;
}

core.List<core.String> buildUnnamed1311() => [
      'foo',
      'foo',
    ];

void checkUnnamed1311(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSslCertificate = 0;
api.SslCertificate buildSslCertificate() {
  final o = api.SslCertificate();
  buildCounterSslCertificate++;
  if (buildCounterSslCertificate < 3) {
    o.certificate = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.expireTime = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.managed = buildSslCertificateManagedSslCertificate();
    o.name = 'foo';
    o.privateKey = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.selfManaged = buildSslCertificateSelfManagedSslCertificate();
    o.subjectAlternativeNames = buildUnnamed1311();
    o.type = 'foo';
  }
  buildCounterSslCertificate--;
  return o;
}

void checkSslCertificate(api.SslCertificate o) {
  buildCounterSslCertificate++;
  if (buildCounterSslCertificate < 3) {
    unittest.expect(
      o.certificate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expireTime!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkSslCertificateManagedSslCertificate(o.managed!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.privateKey!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSslCertificateSelfManagedSslCertificate(o.selfManaged!);
    checkUnnamed1311(o.subjectAlternativeNames!);
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificate--;
}

core.Map<core.String, api.SslCertificatesScopedList> buildUnnamed1312() => {
      'x': buildSslCertificatesScopedList(),
      'y': buildSslCertificatesScopedList(),
    };

void checkUnnamed1312(core.Map<core.String, api.SslCertificatesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificatesScopedList(o['x']!);
  checkSslCertificatesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1313() => [
      'foo',
      'foo',
    ];

void checkUnnamed1313(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSslCertificateAggregatedListWarningData = 0;
api.SslCertificateAggregatedListWarningData
    buildSslCertificateAggregatedListWarningData() {
  final o = api.SslCertificateAggregatedListWarningData();
  buildCounterSslCertificateAggregatedListWarningData++;
  if (buildCounterSslCertificateAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSslCertificateAggregatedListWarningData--;
  return o;
}

void checkSslCertificateAggregatedListWarningData(
    api.SslCertificateAggregatedListWarningData o) {
  buildCounterSslCertificateAggregatedListWarningData++;
  if (buildCounterSslCertificateAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateAggregatedListWarningData--;
}

core.List<api.SslCertificateAggregatedListWarningData> buildUnnamed1314() => [
      buildSslCertificateAggregatedListWarningData(),
      buildSslCertificateAggregatedListWarningData(),
    ];

void checkUnnamed1314(
    core.List<api.SslCertificateAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificateAggregatedListWarningData(o[0]);
  checkSslCertificateAggregatedListWarningData(o[1]);
}

core.int buildCounterSslCertificateAggregatedListWarning = 0;
api.SslCertificateAggregatedListWarning
    buildSslCertificateAggregatedListWarning() {
  final o = api.SslCertificateAggregatedListWarning();
  buildCounterSslCertificateAggregatedListWarning++;
  if (buildCounterSslCertificateAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1314();
    o.message = 'foo';
  }
  buildCounterSslCertificateAggregatedListWarning--;
  return o;
}

void checkSslCertificateAggregatedListWarning(
    api.SslCertificateAggregatedListWarning o) {
  buildCounterSslCertificateAggregatedListWarning++;
  if (buildCounterSslCertificateAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1314(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateAggregatedListWarning--;
}

core.int buildCounterSslCertificateAggregatedList = 0;
api.SslCertificateAggregatedList buildSslCertificateAggregatedList() {
  final o = api.SslCertificateAggregatedList();
  buildCounterSslCertificateAggregatedList++;
  if (buildCounterSslCertificateAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1312();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1313();
    o.warning = buildSslCertificateAggregatedListWarning();
  }
  buildCounterSslCertificateAggregatedList--;
  return o;
}

void checkSslCertificateAggregatedList(api.SslCertificateAggregatedList o) {
  buildCounterSslCertificateAggregatedList++;
  if (buildCounterSslCertificateAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1312(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1313(o.unreachables!);
    checkSslCertificateAggregatedListWarning(o.warning!);
  }
  buildCounterSslCertificateAggregatedList--;
}

core.List<api.SslCertificate> buildUnnamed1315() => [
      buildSslCertificate(),
      buildSslCertificate(),
    ];

void checkUnnamed1315(core.List<api.SslCertificate> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificate(o[0]);
  checkSslCertificate(o[1]);
}

core.int buildCounterSslCertificateListWarningData = 0;
api.SslCertificateListWarningData buildSslCertificateListWarningData() {
  final o = api.SslCertificateListWarningData();
  buildCounterSslCertificateListWarningData++;
  if (buildCounterSslCertificateListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSslCertificateListWarningData--;
  return o;
}

void checkSslCertificateListWarningData(api.SslCertificateListWarningData o) {
  buildCounterSslCertificateListWarningData++;
  if (buildCounterSslCertificateListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateListWarningData--;
}

core.List<api.SslCertificateListWarningData> buildUnnamed1316() => [
      buildSslCertificateListWarningData(),
      buildSslCertificateListWarningData(),
    ];

void checkUnnamed1316(core.List<api.SslCertificateListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificateListWarningData(o[0]);
  checkSslCertificateListWarningData(o[1]);
}

core.int buildCounterSslCertificateListWarning = 0;
api.SslCertificateListWarning buildSslCertificateListWarning() {
  final o = api.SslCertificateListWarning();
  buildCounterSslCertificateListWarning++;
  if (buildCounterSslCertificateListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1316();
    o.message = 'foo';
  }
  buildCounterSslCertificateListWarning--;
  return o;
}

void checkSslCertificateListWarning(api.SslCertificateListWarning o) {
  buildCounterSslCertificateListWarning++;
  if (buildCounterSslCertificateListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1316(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateListWarning--;
}

core.int buildCounterSslCertificateList = 0;
api.SslCertificateList buildSslCertificateList() {
  final o = api.SslCertificateList();
  buildCounterSslCertificateList++;
  if (buildCounterSslCertificateList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1315();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildSslCertificateListWarning();
  }
  buildCounterSslCertificateList--;
  return o;
}

void checkSslCertificateList(api.SslCertificateList o) {
  buildCounterSslCertificateList++;
  if (buildCounterSslCertificateList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1315(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSslCertificateListWarning(o.warning!);
  }
  buildCounterSslCertificateList--;
}

core.Map<core.String, core.String> buildUnnamed1317() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1317(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1318() => [
      'foo',
      'foo',
    ];

void checkUnnamed1318(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSslCertificateManagedSslCertificate = 0;
api.SslCertificateManagedSslCertificate
    buildSslCertificateManagedSslCertificate() {
  final o = api.SslCertificateManagedSslCertificate();
  buildCounterSslCertificateManagedSslCertificate++;
  if (buildCounterSslCertificateManagedSslCertificate < 3) {
    o.domainStatus = buildUnnamed1317();
    o.domains = buildUnnamed1318();
    o.status = 'foo';
  }
  buildCounterSslCertificateManagedSslCertificate--;
  return o;
}

void checkSslCertificateManagedSslCertificate(
    api.SslCertificateManagedSslCertificate o) {
  buildCounterSslCertificateManagedSslCertificate++;
  if (buildCounterSslCertificateManagedSslCertificate < 3) {
    checkUnnamed1317(o.domainStatus!);
    checkUnnamed1318(o.domains!);
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateManagedSslCertificate--;
}

core.int buildCounterSslCertificateSelfManagedSslCertificate = 0;
api.SslCertificateSelfManagedSslCertificate
    buildSslCertificateSelfManagedSslCertificate() {
  final o = api.SslCertificateSelfManagedSslCertificate();
  buildCounterSslCertificateSelfManagedSslCertificate++;
  if (buildCounterSslCertificateSelfManagedSslCertificate < 3) {
    o.certificate = 'foo';
    o.privateKey = 'foo';
  }
  buildCounterSslCertificateSelfManagedSslCertificate--;
  return o;
}

void checkSslCertificateSelfManagedSslCertificate(
    api.SslCertificateSelfManagedSslCertificate o) {
  buildCounterSslCertificateSelfManagedSslCertificate++;
  if (buildCounterSslCertificateSelfManagedSslCertificate < 3) {
    unittest.expect(
      o.certificate!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.privateKey!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificateSelfManagedSslCertificate--;
}

core.List<api.SslCertificate> buildUnnamed1319() => [
      buildSslCertificate(),
      buildSslCertificate(),
    ];

void checkUnnamed1319(core.List<api.SslCertificate> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificate(o[0]);
  checkSslCertificate(o[1]);
}

core.int buildCounterSslCertificatesScopedListWarningData = 0;
api.SslCertificatesScopedListWarningData
    buildSslCertificatesScopedListWarningData() {
  final o = api.SslCertificatesScopedListWarningData();
  buildCounterSslCertificatesScopedListWarningData++;
  if (buildCounterSslCertificatesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSslCertificatesScopedListWarningData--;
  return o;
}

void checkSslCertificatesScopedListWarningData(
    api.SslCertificatesScopedListWarningData o) {
  buildCounterSslCertificatesScopedListWarningData++;
  if (buildCounterSslCertificatesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificatesScopedListWarningData--;
}

core.List<api.SslCertificatesScopedListWarningData> buildUnnamed1320() => [
      buildSslCertificatesScopedListWarningData(),
      buildSslCertificatesScopedListWarningData(),
    ];

void checkUnnamed1320(core.List<api.SslCertificatesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslCertificatesScopedListWarningData(o[0]);
  checkSslCertificatesScopedListWarningData(o[1]);
}

core.int buildCounterSslCertificatesScopedListWarning = 0;
api.SslCertificatesScopedListWarning buildSslCertificatesScopedListWarning() {
  final o = api.SslCertificatesScopedListWarning();
  buildCounterSslCertificatesScopedListWarning++;
  if (buildCounterSslCertificatesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1320();
    o.message = 'foo';
  }
  buildCounterSslCertificatesScopedListWarning--;
  return o;
}

void checkSslCertificatesScopedListWarning(
    api.SslCertificatesScopedListWarning o) {
  buildCounterSslCertificatesScopedListWarning++;
  if (buildCounterSslCertificatesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1320(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslCertificatesScopedListWarning--;
}

core.int buildCounterSslCertificatesScopedList = 0;
api.SslCertificatesScopedList buildSslCertificatesScopedList() {
  final o = api.SslCertificatesScopedList();
  buildCounterSslCertificatesScopedList++;
  if (buildCounterSslCertificatesScopedList < 3) {
    o.sslCertificates = buildUnnamed1319();
    o.warning = buildSslCertificatesScopedListWarning();
  }
  buildCounterSslCertificatesScopedList--;
  return o;
}

void checkSslCertificatesScopedList(api.SslCertificatesScopedList o) {
  buildCounterSslCertificatesScopedList++;
  if (buildCounterSslCertificatesScopedList < 3) {
    checkUnnamed1319(o.sslCertificates!);
    checkSslCertificatesScopedListWarning(o.warning!);
  }
  buildCounterSslCertificatesScopedList--;
}

core.List<api.SslPolicy> buildUnnamed1321() => [
      buildSslPolicy(),
      buildSslPolicy(),
    ];

void checkUnnamed1321(core.List<api.SslPolicy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslPolicy(o[0]);
  checkSslPolicy(o[1]);
}

core.int buildCounterSslPoliciesListWarningData = 0;
api.SslPoliciesListWarningData buildSslPoliciesListWarningData() {
  final o = api.SslPoliciesListWarningData();
  buildCounterSslPoliciesListWarningData++;
  if (buildCounterSslPoliciesListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSslPoliciesListWarningData--;
  return o;
}

void checkSslPoliciesListWarningData(api.SslPoliciesListWarningData o) {
  buildCounterSslPoliciesListWarningData++;
  if (buildCounterSslPoliciesListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslPoliciesListWarningData--;
}

core.List<api.SslPoliciesListWarningData> buildUnnamed1322() => [
      buildSslPoliciesListWarningData(),
      buildSslPoliciesListWarningData(),
    ];

void checkUnnamed1322(core.List<api.SslPoliciesListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslPoliciesListWarningData(o[0]);
  checkSslPoliciesListWarningData(o[1]);
}

core.int buildCounterSslPoliciesListWarning = 0;
api.SslPoliciesListWarning buildSslPoliciesListWarning() {
  final o = api.SslPoliciesListWarning();
  buildCounterSslPoliciesListWarning++;
  if (buildCounterSslPoliciesListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1322();
    o.message = 'foo';
  }
  buildCounterSslPoliciesListWarning--;
  return o;
}

void checkSslPoliciesListWarning(api.SslPoliciesListWarning o) {
  buildCounterSslPoliciesListWarning++;
  if (buildCounterSslPoliciesListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1322(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslPoliciesListWarning--;
}

core.int buildCounterSslPoliciesList = 0;
api.SslPoliciesList buildSslPoliciesList() {
  final o = api.SslPoliciesList();
  buildCounterSslPoliciesList++;
  if (buildCounterSslPoliciesList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1321();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildSslPoliciesListWarning();
  }
  buildCounterSslPoliciesList--;
  return o;
}

void checkSslPoliciesList(api.SslPoliciesList o) {
  buildCounterSslPoliciesList++;
  if (buildCounterSslPoliciesList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1321(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSslPoliciesListWarning(o.warning!);
  }
  buildCounterSslPoliciesList--;
}

core.List<core.String> buildUnnamed1323() => [
      'foo',
      'foo',
    ];

void checkUnnamed1323(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSslPoliciesListAvailableFeaturesResponse = 0;
api.SslPoliciesListAvailableFeaturesResponse
    buildSslPoliciesListAvailableFeaturesResponse() {
  final o = api.SslPoliciesListAvailableFeaturesResponse();
  buildCounterSslPoliciesListAvailableFeaturesResponse++;
  if (buildCounterSslPoliciesListAvailableFeaturesResponse < 3) {
    o.features = buildUnnamed1323();
  }
  buildCounterSslPoliciesListAvailableFeaturesResponse--;
  return o;
}

void checkSslPoliciesListAvailableFeaturesResponse(
    api.SslPoliciesListAvailableFeaturesResponse o) {
  buildCounterSslPoliciesListAvailableFeaturesResponse++;
  if (buildCounterSslPoliciesListAvailableFeaturesResponse < 3) {
    checkUnnamed1323(o.features!);
  }
  buildCounterSslPoliciesListAvailableFeaturesResponse--;
}

core.List<core.String> buildUnnamed1324() => [
      'foo',
      'foo',
    ];

void checkUnnamed1324(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1325() => [
      'foo',
      'foo',
    ];

void checkUnnamed1325(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSslPolicyWarningsData = 0;
api.SslPolicyWarningsData buildSslPolicyWarningsData() {
  final o = api.SslPolicyWarningsData();
  buildCounterSslPolicyWarningsData++;
  if (buildCounterSslPolicyWarningsData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSslPolicyWarningsData--;
  return o;
}

void checkSslPolicyWarningsData(api.SslPolicyWarningsData o) {
  buildCounterSslPolicyWarningsData++;
  if (buildCounterSslPolicyWarningsData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslPolicyWarningsData--;
}

core.List<api.SslPolicyWarningsData> buildUnnamed1326() => [
      buildSslPolicyWarningsData(),
      buildSslPolicyWarningsData(),
    ];

void checkUnnamed1326(core.List<api.SslPolicyWarningsData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslPolicyWarningsData(o[0]);
  checkSslPolicyWarningsData(o[1]);
}

core.int buildCounterSslPolicyWarnings = 0;
api.SslPolicyWarnings buildSslPolicyWarnings() {
  final o = api.SslPolicyWarnings();
  buildCounterSslPolicyWarnings++;
  if (buildCounterSslPolicyWarnings < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1326();
    o.message = 'foo';
  }
  buildCounterSslPolicyWarnings--;
  return o;
}

void checkSslPolicyWarnings(api.SslPolicyWarnings o) {
  buildCounterSslPolicyWarnings++;
  if (buildCounterSslPolicyWarnings < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1326(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslPolicyWarnings--;
}

core.List<api.SslPolicyWarnings> buildUnnamed1327() => [
      buildSslPolicyWarnings(),
      buildSslPolicyWarnings(),
    ];

void checkUnnamed1327(core.List<api.SslPolicyWarnings> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSslPolicyWarnings(o[0]);
  checkSslPolicyWarnings(o[1]);
}

core.int buildCounterSslPolicy = 0;
api.SslPolicy buildSslPolicy() {
  final o = api.SslPolicy();
  buildCounterSslPolicy++;
  if (buildCounterSslPolicy < 3) {
    o.creationTimestamp = 'foo';
    o.customFeatures = buildUnnamed1324();
    o.description = 'foo';
    o.enabledFeatures = buildUnnamed1325();
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.minTlsVersion = 'foo';
    o.name = 'foo';
    o.profile = 'foo';
    o.selfLink = 'foo';
    o.warnings = buildUnnamed1327();
  }
  buildCounterSslPolicy--;
  return o;
}

void checkSslPolicy(api.SslPolicy o) {
  buildCounterSslPolicy++;
  if (buildCounterSslPolicy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkUnnamed1324(o.customFeatures!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1325(o.enabledFeatures!);
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.minTlsVersion!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.profile!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1327(o.warnings!);
  }
  buildCounterSslPolicy--;
}

core.int buildCounterSslPolicyReference = 0;
api.SslPolicyReference buildSslPolicyReference() {
  final o = api.SslPolicyReference();
  buildCounterSslPolicyReference++;
  if (buildCounterSslPolicyReference < 3) {
    o.sslPolicy = 'foo';
  }
  buildCounterSslPolicyReference--;
  return o;
}

void checkSslPolicyReference(api.SslPolicyReference o) {
  buildCounterSslPolicyReference++;
  if (buildCounterSslPolicyReference < 3) {
    unittest.expect(
      o.sslPolicy!,
      unittest.equals('foo'),
    );
  }
  buildCounterSslPolicyReference--;
}

core.int buildCounterStatefulPolicy = 0;
api.StatefulPolicy buildStatefulPolicy() {
  final o = api.StatefulPolicy();
  buildCounterStatefulPolicy++;
  if (buildCounterStatefulPolicy < 3) {
    o.preservedState = buildStatefulPolicyPreservedState();
  }
  buildCounterStatefulPolicy--;
  return o;
}

void checkStatefulPolicy(api.StatefulPolicy o) {
  buildCounterStatefulPolicy++;
  if (buildCounterStatefulPolicy < 3) {
    checkStatefulPolicyPreservedState(o.preservedState!);
  }
  buildCounterStatefulPolicy--;
}

core.Map<core.String, api.StatefulPolicyPreservedStateDiskDevice>
    buildUnnamed1328() => {
          'x': buildStatefulPolicyPreservedStateDiskDevice(),
          'y': buildStatefulPolicyPreservedStateDiskDevice(),
        };

void checkUnnamed1328(
    core.Map<core.String, api.StatefulPolicyPreservedStateDiskDevice> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkStatefulPolicyPreservedStateDiskDevice(o['x']!);
  checkStatefulPolicyPreservedStateDiskDevice(o['y']!);
}

core.int buildCounterStatefulPolicyPreservedState = 0;
api.StatefulPolicyPreservedState buildStatefulPolicyPreservedState() {
  final o = api.StatefulPolicyPreservedState();
  buildCounterStatefulPolicyPreservedState++;
  if (buildCounterStatefulPolicyPreservedState < 3) {
    o.disks = buildUnnamed1328();
  }
  buildCounterStatefulPolicyPreservedState--;
  return o;
}

void checkStatefulPolicyPreservedState(api.StatefulPolicyPreservedState o) {
  buildCounterStatefulPolicyPreservedState++;
  if (buildCounterStatefulPolicyPreservedState < 3) {
    checkUnnamed1328(o.disks!);
  }
  buildCounterStatefulPolicyPreservedState--;
}

core.int buildCounterStatefulPolicyPreservedStateDiskDevice = 0;
api.StatefulPolicyPreservedStateDiskDevice
    buildStatefulPolicyPreservedStateDiskDevice() {
  final o = api.StatefulPolicyPreservedStateDiskDevice();
  buildCounterStatefulPolicyPreservedStateDiskDevice++;
  if (buildCounterStatefulPolicyPreservedStateDiskDevice < 3) {
    o.autoDelete = 'foo';
  }
  buildCounterStatefulPolicyPreservedStateDiskDevice--;
  return o;
}

void checkStatefulPolicyPreservedStateDiskDevice(
    api.StatefulPolicyPreservedStateDiskDevice o) {
  buildCounterStatefulPolicyPreservedStateDiskDevice++;
  if (buildCounterStatefulPolicyPreservedStateDiskDevice < 3) {
    unittest.expect(
      o.autoDelete!,
      unittest.equals('foo'),
    );
  }
  buildCounterStatefulPolicyPreservedStateDiskDevice--;
}

core.List<api.SubnetworkSecondaryRange> buildUnnamed1329() => [
      buildSubnetworkSecondaryRange(),
      buildSubnetworkSecondaryRange(),
    ];

void checkUnnamed1329(core.List<api.SubnetworkSecondaryRange> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetworkSecondaryRange(o[0]);
  checkSubnetworkSecondaryRange(o[1]);
}

core.int buildCounterSubnetwork = 0;
api.Subnetwork buildSubnetwork() {
  final o = api.Subnetwork();
  buildCounterSubnetwork++;
  if (buildCounterSubnetwork < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.enableFlowLogs = true;
    o.externalIpv6Prefix = 'foo';
    o.fingerprint = 'foo';
    o.gatewayAddress = 'foo';
    o.id = 'foo';
    o.ipCidrRange = 'foo';
    o.ipv6AccessType = 'foo';
    o.ipv6CidrRange = 'foo';
    o.kind = 'foo';
    o.logConfig = buildSubnetworkLogConfig();
    o.name = 'foo';
    o.network = 'foo';
    o.privateIpGoogleAccess = true;
    o.privateIpv6GoogleAccess = 'foo';
    o.purpose = 'foo';
    o.region = 'foo';
    o.role = 'foo';
    o.secondaryIpRanges = buildUnnamed1329();
    o.selfLink = 'foo';
    o.stackType = 'foo';
    o.state = 'foo';
  }
  buildCounterSubnetwork--;
  return o;
}

void checkSubnetwork(api.Subnetwork o) {
  buildCounterSubnetwork++;
  if (buildCounterSubnetwork < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(o.enableFlowLogs!, unittest.isTrue);
    unittest.expect(
      o.externalIpv6Prefix!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.gatewayAddress!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipv6AccessType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipv6CidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkSubnetworkLogConfig(o.logConfig!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(o.privateIpGoogleAccess!, unittest.isTrue);
    unittest.expect(
      o.privateIpv6GoogleAccess!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.purpose!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.role!,
      unittest.equals('foo'),
    );
    checkUnnamed1329(o.secondaryIpRanges!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.stackType!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetwork--;
}

core.Map<core.String, api.SubnetworksScopedList> buildUnnamed1330() => {
      'x': buildSubnetworksScopedList(),
      'y': buildSubnetworksScopedList(),
    };

void checkUnnamed1330(core.Map<core.String, api.SubnetworksScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetworksScopedList(o['x']!);
  checkSubnetworksScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1331() => [
      'foo',
      'foo',
    ];

void checkUnnamed1331(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSubnetworkAggregatedListWarningData = 0;
api.SubnetworkAggregatedListWarningData
    buildSubnetworkAggregatedListWarningData() {
  final o = api.SubnetworkAggregatedListWarningData();
  buildCounterSubnetworkAggregatedListWarningData++;
  if (buildCounterSubnetworkAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSubnetworkAggregatedListWarningData--;
  return o;
}

void checkSubnetworkAggregatedListWarningData(
    api.SubnetworkAggregatedListWarningData o) {
  buildCounterSubnetworkAggregatedListWarningData++;
  if (buildCounterSubnetworkAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworkAggregatedListWarningData--;
}

core.List<api.SubnetworkAggregatedListWarningData> buildUnnamed1332() => [
      buildSubnetworkAggregatedListWarningData(),
      buildSubnetworkAggregatedListWarningData(),
    ];

void checkUnnamed1332(core.List<api.SubnetworkAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetworkAggregatedListWarningData(o[0]);
  checkSubnetworkAggregatedListWarningData(o[1]);
}

core.int buildCounterSubnetworkAggregatedListWarning = 0;
api.SubnetworkAggregatedListWarning buildSubnetworkAggregatedListWarning() {
  final o = api.SubnetworkAggregatedListWarning();
  buildCounterSubnetworkAggregatedListWarning++;
  if (buildCounterSubnetworkAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1332();
    o.message = 'foo';
  }
  buildCounterSubnetworkAggregatedListWarning--;
  return o;
}

void checkSubnetworkAggregatedListWarning(
    api.SubnetworkAggregatedListWarning o) {
  buildCounterSubnetworkAggregatedListWarning++;
  if (buildCounterSubnetworkAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1332(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworkAggregatedListWarning--;
}

core.int buildCounterSubnetworkAggregatedList = 0;
api.SubnetworkAggregatedList buildSubnetworkAggregatedList() {
  final o = api.SubnetworkAggregatedList();
  buildCounterSubnetworkAggregatedList++;
  if (buildCounterSubnetworkAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1330();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1331();
    o.warning = buildSubnetworkAggregatedListWarning();
  }
  buildCounterSubnetworkAggregatedList--;
  return o;
}

void checkSubnetworkAggregatedList(api.SubnetworkAggregatedList o) {
  buildCounterSubnetworkAggregatedList++;
  if (buildCounterSubnetworkAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1330(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1331(o.unreachables!);
    checkSubnetworkAggregatedListWarning(o.warning!);
  }
  buildCounterSubnetworkAggregatedList--;
}

core.List<api.Subnetwork> buildUnnamed1333() => [
      buildSubnetwork(),
      buildSubnetwork(),
    ];

void checkUnnamed1333(core.List<api.Subnetwork> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetwork(o[0]);
  checkSubnetwork(o[1]);
}

core.int buildCounterSubnetworkListWarningData = 0;
api.SubnetworkListWarningData buildSubnetworkListWarningData() {
  final o = api.SubnetworkListWarningData();
  buildCounterSubnetworkListWarningData++;
  if (buildCounterSubnetworkListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSubnetworkListWarningData--;
  return o;
}

void checkSubnetworkListWarningData(api.SubnetworkListWarningData o) {
  buildCounterSubnetworkListWarningData++;
  if (buildCounterSubnetworkListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworkListWarningData--;
}

core.List<api.SubnetworkListWarningData> buildUnnamed1334() => [
      buildSubnetworkListWarningData(),
      buildSubnetworkListWarningData(),
    ];

void checkUnnamed1334(core.List<api.SubnetworkListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetworkListWarningData(o[0]);
  checkSubnetworkListWarningData(o[1]);
}

core.int buildCounterSubnetworkListWarning = 0;
api.SubnetworkListWarning buildSubnetworkListWarning() {
  final o = api.SubnetworkListWarning();
  buildCounterSubnetworkListWarning++;
  if (buildCounterSubnetworkListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1334();
    o.message = 'foo';
  }
  buildCounterSubnetworkListWarning--;
  return o;
}

void checkSubnetworkListWarning(api.SubnetworkListWarning o) {
  buildCounterSubnetworkListWarning++;
  if (buildCounterSubnetworkListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1334(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworkListWarning--;
}

core.int buildCounterSubnetworkList = 0;
api.SubnetworkList buildSubnetworkList() {
  final o = api.SubnetworkList();
  buildCounterSubnetworkList++;
  if (buildCounterSubnetworkList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1333();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildSubnetworkListWarning();
  }
  buildCounterSubnetworkList--;
  return o;
}

void checkSubnetworkList(api.SubnetworkList o) {
  buildCounterSubnetworkList++;
  if (buildCounterSubnetworkList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1333(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkSubnetworkListWarning(o.warning!);
  }
  buildCounterSubnetworkList--;
}

core.List<core.String> buildUnnamed1335() => [
      'foo',
      'foo',
    ];

void checkUnnamed1335(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterSubnetworkLogConfig = 0;
api.SubnetworkLogConfig buildSubnetworkLogConfig() {
  final o = api.SubnetworkLogConfig();
  buildCounterSubnetworkLogConfig++;
  if (buildCounterSubnetworkLogConfig < 3) {
    o.aggregationInterval = 'foo';
    o.enable = true;
    o.filterExpr = 'foo';
    o.flowSampling = 42.0;
    o.metadata = 'foo';
    o.metadataFields = buildUnnamed1335();
  }
  buildCounterSubnetworkLogConfig--;
  return o;
}

void checkSubnetworkLogConfig(api.SubnetworkLogConfig o) {
  buildCounterSubnetworkLogConfig++;
  if (buildCounterSubnetworkLogConfig < 3) {
    unittest.expect(
      o.aggregationInterval!,
      unittest.equals('foo'),
    );
    unittest.expect(o.enable!, unittest.isTrue);
    unittest.expect(
      o.filterExpr!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.flowSampling!,
      unittest.equals(42.0),
    );
    unittest.expect(
      o.metadata!,
      unittest.equals('foo'),
    );
    checkUnnamed1335(o.metadataFields!);
  }
  buildCounterSubnetworkLogConfig--;
}

core.int buildCounterSubnetworkSecondaryRange = 0;
api.SubnetworkSecondaryRange buildSubnetworkSecondaryRange() {
  final o = api.SubnetworkSecondaryRange();
  buildCounterSubnetworkSecondaryRange++;
  if (buildCounterSubnetworkSecondaryRange < 3) {
    o.ipCidrRange = 'foo';
    o.rangeName = 'foo';
  }
  buildCounterSubnetworkSecondaryRange--;
  return o;
}

void checkSubnetworkSecondaryRange(api.SubnetworkSecondaryRange o) {
  buildCounterSubnetworkSecondaryRange++;
  if (buildCounterSubnetworkSecondaryRange < 3) {
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.rangeName!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworkSecondaryRange--;
}

core.int buildCounterSubnetworksExpandIpCidrRangeRequest = 0;
api.SubnetworksExpandIpCidrRangeRequest
    buildSubnetworksExpandIpCidrRangeRequest() {
  final o = api.SubnetworksExpandIpCidrRangeRequest();
  buildCounterSubnetworksExpandIpCidrRangeRequest++;
  if (buildCounterSubnetworksExpandIpCidrRangeRequest < 3) {
    o.ipCidrRange = 'foo';
  }
  buildCounterSubnetworksExpandIpCidrRangeRequest--;
  return o;
}

void checkSubnetworksExpandIpCidrRangeRequest(
    api.SubnetworksExpandIpCidrRangeRequest o) {
  buildCounterSubnetworksExpandIpCidrRangeRequest++;
  if (buildCounterSubnetworksExpandIpCidrRangeRequest < 3) {
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworksExpandIpCidrRangeRequest--;
}

core.List<api.Subnetwork> buildUnnamed1336() => [
      buildSubnetwork(),
      buildSubnetwork(),
    ];

void checkUnnamed1336(core.List<api.Subnetwork> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetwork(o[0]);
  checkSubnetwork(o[1]);
}

core.int buildCounterSubnetworksScopedListWarningData = 0;
api.SubnetworksScopedListWarningData buildSubnetworksScopedListWarningData() {
  final o = api.SubnetworksScopedListWarningData();
  buildCounterSubnetworksScopedListWarningData++;
  if (buildCounterSubnetworksScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterSubnetworksScopedListWarningData--;
  return o;
}

void checkSubnetworksScopedListWarningData(
    api.SubnetworksScopedListWarningData o) {
  buildCounterSubnetworksScopedListWarningData++;
  if (buildCounterSubnetworksScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworksScopedListWarningData--;
}

core.List<api.SubnetworksScopedListWarningData> buildUnnamed1337() => [
      buildSubnetworksScopedListWarningData(),
      buildSubnetworksScopedListWarningData(),
    ];

void checkUnnamed1337(core.List<api.SubnetworksScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkSubnetworksScopedListWarningData(o[0]);
  checkSubnetworksScopedListWarningData(o[1]);
}

core.int buildCounterSubnetworksScopedListWarning = 0;
api.SubnetworksScopedListWarning buildSubnetworksScopedListWarning() {
  final o = api.SubnetworksScopedListWarning();
  buildCounterSubnetworksScopedListWarning++;
  if (buildCounterSubnetworksScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1337();
    o.message = 'foo';
  }
  buildCounterSubnetworksScopedListWarning--;
  return o;
}

void checkSubnetworksScopedListWarning(api.SubnetworksScopedListWarning o) {
  buildCounterSubnetworksScopedListWarning++;
  if (buildCounterSubnetworksScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1337(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterSubnetworksScopedListWarning--;
}

core.int buildCounterSubnetworksScopedList = 0;
api.SubnetworksScopedList buildSubnetworksScopedList() {
  final o = api.SubnetworksScopedList();
  buildCounterSubnetworksScopedList++;
  if (buildCounterSubnetworksScopedList < 3) {
    o.subnetworks = buildUnnamed1336();
    o.warning = buildSubnetworksScopedListWarning();
  }
  buildCounterSubnetworksScopedList--;
  return o;
}

void checkSubnetworksScopedList(api.SubnetworksScopedList o) {
  buildCounterSubnetworksScopedList++;
  if (buildCounterSubnetworksScopedList < 3) {
    checkUnnamed1336(o.subnetworks!);
    checkSubnetworksScopedListWarning(o.warning!);
  }
  buildCounterSubnetworksScopedList--;
}

core.int buildCounterSubnetworksSetPrivateIpGoogleAccessRequest = 0;
api.SubnetworksSetPrivateIpGoogleAccessRequest
    buildSubnetworksSetPrivateIpGoogleAccessRequest() {
  final o = api.SubnetworksSetPrivateIpGoogleAccessRequest();
  buildCounterSubnetworksSetPrivateIpGoogleAccessRequest++;
  if (buildCounterSubnetworksSetPrivateIpGoogleAccessRequest < 3) {
    o.privateIpGoogleAccess = true;
  }
  buildCounterSubnetworksSetPrivateIpGoogleAccessRequest--;
  return o;
}

void checkSubnetworksSetPrivateIpGoogleAccessRequest(
    api.SubnetworksSetPrivateIpGoogleAccessRequest o) {
  buildCounterSubnetworksSetPrivateIpGoogleAccessRequest++;
  if (buildCounterSubnetworksSetPrivateIpGoogleAccessRequest < 3) {
    unittest.expect(o.privateIpGoogleAccess!, unittest.isTrue);
  }
  buildCounterSubnetworksSetPrivateIpGoogleAccessRequest--;
}

core.int buildCounterTCPHealthCheck = 0;
api.TCPHealthCheck buildTCPHealthCheck() {
  final o = api.TCPHealthCheck();
  buildCounterTCPHealthCheck++;
  if (buildCounterTCPHealthCheck < 3) {
    o.port = 42;
    o.portName = 'foo';
    o.portSpecification = 'foo';
    o.proxyHeader = 'foo';
    o.request = 'foo';
    o.response = 'foo';
  }
  buildCounterTCPHealthCheck--;
  return o;
}

void checkTCPHealthCheck(api.TCPHealthCheck o) {
  buildCounterTCPHealthCheck++;
  if (buildCounterTCPHealthCheck < 3) {
    unittest.expect(
      o.port!,
      unittest.equals(42),
    );
    unittest.expect(
      o.portName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.portSpecification!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.request!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.response!,
      unittest.equals('foo'),
    );
  }
  buildCounterTCPHealthCheck--;
}

core.List<core.String> buildUnnamed1338() => [
      'foo',
      'foo',
    ];

void checkUnnamed1338(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTags = 0;
api.Tags buildTags() {
  final o = api.Tags();
  buildCounterTags++;
  if (buildCounterTags < 3) {
    o.fingerprint = 'foo';
    o.items = buildUnnamed1338();
  }
  buildCounterTags--;
  return o;
}

void checkTags(api.Tags o) {
  buildCounterTags++;
  if (buildCounterTags < 3) {
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1338(o.items!);
  }
  buildCounterTags--;
}

core.int buildCounterTargetGrpcProxy = 0;
api.TargetGrpcProxy buildTargetGrpcProxy() {
  final o = api.TargetGrpcProxy();
  buildCounterTargetGrpcProxy++;
  if (buildCounterTargetGrpcProxy < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.selfLink = 'foo';
    o.selfLinkWithId = 'foo';
    o.urlMap = 'foo';
    o.validateForProxyless = true;
  }
  buildCounterTargetGrpcProxy--;
  return o;
}

void checkTargetGrpcProxy(api.TargetGrpcProxy o) {
  buildCounterTargetGrpcProxy++;
  if (buildCounterTargetGrpcProxy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLinkWithId!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMap!,
      unittest.equals('foo'),
    );
    unittest.expect(o.validateForProxyless!, unittest.isTrue);
  }
  buildCounterTargetGrpcProxy--;
}

core.List<api.TargetGrpcProxy> buildUnnamed1339() => [
      buildTargetGrpcProxy(),
      buildTargetGrpcProxy(),
    ];

void checkUnnamed1339(core.List<api.TargetGrpcProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetGrpcProxy(o[0]);
  checkTargetGrpcProxy(o[1]);
}

core.int buildCounterTargetGrpcProxyListWarningData = 0;
api.TargetGrpcProxyListWarningData buildTargetGrpcProxyListWarningData() {
  final o = api.TargetGrpcProxyListWarningData();
  buildCounterTargetGrpcProxyListWarningData++;
  if (buildCounterTargetGrpcProxyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetGrpcProxyListWarningData--;
  return o;
}

void checkTargetGrpcProxyListWarningData(api.TargetGrpcProxyListWarningData o) {
  buildCounterTargetGrpcProxyListWarningData++;
  if (buildCounterTargetGrpcProxyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetGrpcProxyListWarningData--;
}

core.List<api.TargetGrpcProxyListWarningData> buildUnnamed1340() => [
      buildTargetGrpcProxyListWarningData(),
      buildTargetGrpcProxyListWarningData(),
    ];

void checkUnnamed1340(core.List<api.TargetGrpcProxyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetGrpcProxyListWarningData(o[0]);
  checkTargetGrpcProxyListWarningData(o[1]);
}

core.int buildCounterTargetGrpcProxyListWarning = 0;
api.TargetGrpcProxyListWarning buildTargetGrpcProxyListWarning() {
  final o = api.TargetGrpcProxyListWarning();
  buildCounterTargetGrpcProxyListWarning++;
  if (buildCounterTargetGrpcProxyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1340();
    o.message = 'foo';
  }
  buildCounterTargetGrpcProxyListWarning--;
  return o;
}

void checkTargetGrpcProxyListWarning(api.TargetGrpcProxyListWarning o) {
  buildCounterTargetGrpcProxyListWarning++;
  if (buildCounterTargetGrpcProxyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1340(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetGrpcProxyListWarning--;
}

core.int buildCounterTargetGrpcProxyList = 0;
api.TargetGrpcProxyList buildTargetGrpcProxyList() {
  final o = api.TargetGrpcProxyList();
  buildCounterTargetGrpcProxyList++;
  if (buildCounterTargetGrpcProxyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1339();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetGrpcProxyListWarning();
  }
  buildCounterTargetGrpcProxyList--;
  return o;
}

void checkTargetGrpcProxyList(api.TargetGrpcProxyList o) {
  buildCounterTargetGrpcProxyList++;
  if (buildCounterTargetGrpcProxyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1339(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetGrpcProxyListWarning(o.warning!);
  }
  buildCounterTargetGrpcProxyList--;
}

core.List<api.TargetHttpProxy> buildUnnamed1341() => [
      buildTargetHttpProxy(),
      buildTargetHttpProxy(),
    ];

void checkUnnamed1341(core.List<api.TargetHttpProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpProxy(o[0]);
  checkTargetHttpProxy(o[1]);
}

core.int buildCounterTargetHttpProxiesScopedListWarningData = 0;
api.TargetHttpProxiesScopedListWarningData
    buildTargetHttpProxiesScopedListWarningData() {
  final o = api.TargetHttpProxiesScopedListWarningData();
  buildCounterTargetHttpProxiesScopedListWarningData++;
  if (buildCounterTargetHttpProxiesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetHttpProxiesScopedListWarningData--;
  return o;
}

void checkTargetHttpProxiesScopedListWarningData(
    api.TargetHttpProxiesScopedListWarningData o) {
  buildCounterTargetHttpProxiesScopedListWarningData++;
  if (buildCounterTargetHttpProxiesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpProxiesScopedListWarningData--;
}

core.List<api.TargetHttpProxiesScopedListWarningData> buildUnnamed1342() => [
      buildTargetHttpProxiesScopedListWarningData(),
      buildTargetHttpProxiesScopedListWarningData(),
    ];

void checkUnnamed1342(core.List<api.TargetHttpProxiesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpProxiesScopedListWarningData(o[0]);
  checkTargetHttpProxiesScopedListWarningData(o[1]);
}

core.int buildCounterTargetHttpProxiesScopedListWarning = 0;
api.TargetHttpProxiesScopedListWarning
    buildTargetHttpProxiesScopedListWarning() {
  final o = api.TargetHttpProxiesScopedListWarning();
  buildCounterTargetHttpProxiesScopedListWarning++;
  if (buildCounterTargetHttpProxiesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1342();
    o.message = 'foo';
  }
  buildCounterTargetHttpProxiesScopedListWarning--;
  return o;
}

void checkTargetHttpProxiesScopedListWarning(
    api.TargetHttpProxiesScopedListWarning o) {
  buildCounterTargetHttpProxiesScopedListWarning++;
  if (buildCounterTargetHttpProxiesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1342(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpProxiesScopedListWarning--;
}

core.int buildCounterTargetHttpProxiesScopedList = 0;
api.TargetHttpProxiesScopedList buildTargetHttpProxiesScopedList() {
  final o = api.TargetHttpProxiesScopedList();
  buildCounterTargetHttpProxiesScopedList++;
  if (buildCounterTargetHttpProxiesScopedList < 3) {
    o.targetHttpProxies = buildUnnamed1341();
    o.warning = buildTargetHttpProxiesScopedListWarning();
  }
  buildCounterTargetHttpProxiesScopedList--;
  return o;
}

void checkTargetHttpProxiesScopedList(api.TargetHttpProxiesScopedList o) {
  buildCounterTargetHttpProxiesScopedList++;
  if (buildCounterTargetHttpProxiesScopedList < 3) {
    checkUnnamed1341(o.targetHttpProxies!);
    checkTargetHttpProxiesScopedListWarning(o.warning!);
  }
  buildCounterTargetHttpProxiesScopedList--;
}

core.int buildCounterTargetHttpProxy = 0;
api.TargetHttpProxy buildTargetHttpProxy() {
  final o = api.TargetHttpProxy();
  buildCounterTargetHttpProxy++;
  if (buildCounterTargetHttpProxy < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.proxyBind = true;
    o.region = 'foo';
    o.selfLink = 'foo';
    o.urlMap = 'foo';
  }
  buildCounterTargetHttpProxy--;
  return o;
}

void checkTargetHttpProxy(api.TargetHttpProxy o) {
  buildCounterTargetHttpProxy++;
  if (buildCounterTargetHttpProxy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.proxyBind!, unittest.isTrue);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMap!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpProxy--;
}

core.Map<core.String, api.TargetHttpProxiesScopedList> buildUnnamed1343() => {
      'x': buildTargetHttpProxiesScopedList(),
      'y': buildTargetHttpProxiesScopedList(),
    };

void checkUnnamed1343(
    core.Map<core.String, api.TargetHttpProxiesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpProxiesScopedList(o['x']!);
  checkTargetHttpProxiesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1344() => [
      'foo',
      'foo',
    ];

void checkUnnamed1344(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetHttpProxyAggregatedList = 0;
api.TargetHttpProxyAggregatedList buildTargetHttpProxyAggregatedList() {
  final o = api.TargetHttpProxyAggregatedList();
  buildCounterTargetHttpProxyAggregatedList++;
  if (buildCounterTargetHttpProxyAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1343();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1344();
  }
  buildCounterTargetHttpProxyAggregatedList--;
  return o;
}

void checkTargetHttpProxyAggregatedList(api.TargetHttpProxyAggregatedList o) {
  buildCounterTargetHttpProxyAggregatedList++;
  if (buildCounterTargetHttpProxyAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1343(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1344(o.unreachables!);
  }
  buildCounterTargetHttpProxyAggregatedList--;
}

core.List<api.TargetHttpProxy> buildUnnamed1345() => [
      buildTargetHttpProxy(),
      buildTargetHttpProxy(),
    ];

void checkUnnamed1345(core.List<api.TargetHttpProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpProxy(o[0]);
  checkTargetHttpProxy(o[1]);
}

core.int buildCounterTargetHttpProxyListWarningData = 0;
api.TargetHttpProxyListWarningData buildTargetHttpProxyListWarningData() {
  final o = api.TargetHttpProxyListWarningData();
  buildCounterTargetHttpProxyListWarningData++;
  if (buildCounterTargetHttpProxyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetHttpProxyListWarningData--;
  return o;
}

void checkTargetHttpProxyListWarningData(api.TargetHttpProxyListWarningData o) {
  buildCounterTargetHttpProxyListWarningData++;
  if (buildCounterTargetHttpProxyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpProxyListWarningData--;
}

core.List<api.TargetHttpProxyListWarningData> buildUnnamed1346() => [
      buildTargetHttpProxyListWarningData(),
      buildTargetHttpProxyListWarningData(),
    ];

void checkUnnamed1346(core.List<api.TargetHttpProxyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpProxyListWarningData(o[0]);
  checkTargetHttpProxyListWarningData(o[1]);
}

core.int buildCounterTargetHttpProxyListWarning = 0;
api.TargetHttpProxyListWarning buildTargetHttpProxyListWarning() {
  final o = api.TargetHttpProxyListWarning();
  buildCounterTargetHttpProxyListWarning++;
  if (buildCounterTargetHttpProxyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1346();
    o.message = 'foo';
  }
  buildCounterTargetHttpProxyListWarning--;
  return o;
}

void checkTargetHttpProxyListWarning(api.TargetHttpProxyListWarning o) {
  buildCounterTargetHttpProxyListWarning++;
  if (buildCounterTargetHttpProxyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1346(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpProxyListWarning--;
}

core.int buildCounterTargetHttpProxyList = 0;
api.TargetHttpProxyList buildTargetHttpProxyList() {
  final o = api.TargetHttpProxyList();
  buildCounterTargetHttpProxyList++;
  if (buildCounterTargetHttpProxyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1345();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetHttpProxyListWarning();
  }
  buildCounterTargetHttpProxyList--;
  return o;
}

void checkTargetHttpProxyList(api.TargetHttpProxyList o) {
  buildCounterTargetHttpProxyList++;
  if (buildCounterTargetHttpProxyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1345(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetHttpProxyListWarning(o.warning!);
  }
  buildCounterTargetHttpProxyList--;
}

core.List<api.TargetHttpsProxy> buildUnnamed1347() => [
      buildTargetHttpsProxy(),
      buildTargetHttpsProxy(),
    ];

void checkUnnamed1347(core.List<api.TargetHttpsProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxy(o[0]);
  checkTargetHttpsProxy(o[1]);
}

core.int buildCounterTargetHttpsProxiesScopedListWarningData = 0;
api.TargetHttpsProxiesScopedListWarningData
    buildTargetHttpsProxiesScopedListWarningData() {
  final o = api.TargetHttpsProxiesScopedListWarningData();
  buildCounterTargetHttpsProxiesScopedListWarningData++;
  if (buildCounterTargetHttpsProxiesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetHttpsProxiesScopedListWarningData--;
  return o;
}

void checkTargetHttpsProxiesScopedListWarningData(
    api.TargetHttpsProxiesScopedListWarningData o) {
  buildCounterTargetHttpsProxiesScopedListWarningData++;
  if (buildCounterTargetHttpsProxiesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxiesScopedListWarningData--;
}

core.List<api.TargetHttpsProxiesScopedListWarningData> buildUnnamed1348() => [
      buildTargetHttpsProxiesScopedListWarningData(),
      buildTargetHttpsProxiesScopedListWarningData(),
    ];

void checkUnnamed1348(
    core.List<api.TargetHttpsProxiesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxiesScopedListWarningData(o[0]);
  checkTargetHttpsProxiesScopedListWarningData(o[1]);
}

core.int buildCounterTargetHttpsProxiesScopedListWarning = 0;
api.TargetHttpsProxiesScopedListWarning
    buildTargetHttpsProxiesScopedListWarning() {
  final o = api.TargetHttpsProxiesScopedListWarning();
  buildCounterTargetHttpsProxiesScopedListWarning++;
  if (buildCounterTargetHttpsProxiesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1348();
    o.message = 'foo';
  }
  buildCounterTargetHttpsProxiesScopedListWarning--;
  return o;
}

void checkTargetHttpsProxiesScopedListWarning(
    api.TargetHttpsProxiesScopedListWarning o) {
  buildCounterTargetHttpsProxiesScopedListWarning++;
  if (buildCounterTargetHttpsProxiesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1348(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxiesScopedListWarning--;
}

core.int buildCounterTargetHttpsProxiesScopedList = 0;
api.TargetHttpsProxiesScopedList buildTargetHttpsProxiesScopedList() {
  final o = api.TargetHttpsProxiesScopedList();
  buildCounterTargetHttpsProxiesScopedList++;
  if (buildCounterTargetHttpsProxiesScopedList < 3) {
    o.targetHttpsProxies = buildUnnamed1347();
    o.warning = buildTargetHttpsProxiesScopedListWarning();
  }
  buildCounterTargetHttpsProxiesScopedList--;
  return o;
}

void checkTargetHttpsProxiesScopedList(api.TargetHttpsProxiesScopedList o) {
  buildCounterTargetHttpsProxiesScopedList++;
  if (buildCounterTargetHttpsProxiesScopedList < 3) {
    checkUnnamed1347(o.targetHttpsProxies!);
    checkTargetHttpsProxiesScopedListWarning(o.warning!);
  }
  buildCounterTargetHttpsProxiesScopedList--;
}

core.int buildCounterTargetHttpsProxiesSetQuicOverrideRequest = 0;
api.TargetHttpsProxiesSetQuicOverrideRequest
    buildTargetHttpsProxiesSetQuicOverrideRequest() {
  final o = api.TargetHttpsProxiesSetQuicOverrideRequest();
  buildCounterTargetHttpsProxiesSetQuicOverrideRequest++;
  if (buildCounterTargetHttpsProxiesSetQuicOverrideRequest < 3) {
    o.quicOverride = 'foo';
  }
  buildCounterTargetHttpsProxiesSetQuicOverrideRequest--;
  return o;
}

void checkTargetHttpsProxiesSetQuicOverrideRequest(
    api.TargetHttpsProxiesSetQuicOverrideRequest o) {
  buildCounterTargetHttpsProxiesSetQuicOverrideRequest++;
  if (buildCounterTargetHttpsProxiesSetQuicOverrideRequest < 3) {
    unittest.expect(
      o.quicOverride!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxiesSetQuicOverrideRequest--;
}

core.List<core.String> buildUnnamed1349() => [
      'foo',
      'foo',
    ];

void checkUnnamed1349(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetHttpsProxiesSetSslCertificatesRequest = 0;
api.TargetHttpsProxiesSetSslCertificatesRequest
    buildTargetHttpsProxiesSetSslCertificatesRequest() {
  final o = api.TargetHttpsProxiesSetSslCertificatesRequest();
  buildCounterTargetHttpsProxiesSetSslCertificatesRequest++;
  if (buildCounterTargetHttpsProxiesSetSslCertificatesRequest < 3) {
    o.sslCertificates = buildUnnamed1349();
  }
  buildCounterTargetHttpsProxiesSetSslCertificatesRequest--;
  return o;
}

void checkTargetHttpsProxiesSetSslCertificatesRequest(
    api.TargetHttpsProxiesSetSslCertificatesRequest o) {
  buildCounterTargetHttpsProxiesSetSslCertificatesRequest++;
  if (buildCounterTargetHttpsProxiesSetSslCertificatesRequest < 3) {
    checkUnnamed1349(o.sslCertificates!);
  }
  buildCounterTargetHttpsProxiesSetSslCertificatesRequest--;
}

core.List<core.String> buildUnnamed1350() => [
      'foo',
      'foo',
    ];

void checkUnnamed1350(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetHttpsProxy = 0;
api.TargetHttpsProxy buildTargetHttpsProxy() {
  final o = api.TargetHttpsProxy();
  buildCounterTargetHttpsProxy++;
  if (buildCounterTargetHttpsProxy < 3) {
    o.authorizationPolicy = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.proxyBind = true;
    o.quicOverride = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.serverTlsPolicy = 'foo';
    o.sslCertificates = buildUnnamed1350();
    o.sslPolicy = 'foo';
    o.urlMap = 'foo';
  }
  buildCounterTargetHttpsProxy--;
  return o;
}

void checkTargetHttpsProxy(api.TargetHttpsProxy o) {
  buildCounterTargetHttpsProxy++;
  if (buildCounterTargetHttpsProxy < 3) {
    unittest.expect(
      o.authorizationPolicy!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.proxyBind!, unittest.isTrue);
    unittest.expect(
      o.quicOverride!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.serverTlsPolicy!,
      unittest.equals('foo'),
    );
    checkUnnamed1350(o.sslCertificates!);
    unittest.expect(
      o.sslPolicy!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.urlMap!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxy--;
}

core.Map<core.String, api.TargetHttpsProxiesScopedList> buildUnnamed1351() => {
      'x': buildTargetHttpsProxiesScopedList(),
      'y': buildTargetHttpsProxiesScopedList(),
    };

void checkUnnamed1351(
    core.Map<core.String, api.TargetHttpsProxiesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxiesScopedList(o['x']!);
  checkTargetHttpsProxiesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1352() => [
      'foo',
      'foo',
    ];

void checkUnnamed1352(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetHttpsProxyAggregatedListWarningData = 0;
api.TargetHttpsProxyAggregatedListWarningData
    buildTargetHttpsProxyAggregatedListWarningData() {
  final o = api.TargetHttpsProxyAggregatedListWarningData();
  buildCounterTargetHttpsProxyAggregatedListWarningData++;
  if (buildCounterTargetHttpsProxyAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetHttpsProxyAggregatedListWarningData--;
  return o;
}

void checkTargetHttpsProxyAggregatedListWarningData(
    api.TargetHttpsProxyAggregatedListWarningData o) {
  buildCounterTargetHttpsProxyAggregatedListWarningData++;
  if (buildCounterTargetHttpsProxyAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxyAggregatedListWarningData--;
}

core.List<api.TargetHttpsProxyAggregatedListWarningData> buildUnnamed1353() => [
      buildTargetHttpsProxyAggregatedListWarningData(),
      buildTargetHttpsProxyAggregatedListWarningData(),
    ];

void checkUnnamed1353(
    core.List<api.TargetHttpsProxyAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxyAggregatedListWarningData(o[0]);
  checkTargetHttpsProxyAggregatedListWarningData(o[1]);
}

core.int buildCounterTargetHttpsProxyAggregatedListWarning = 0;
api.TargetHttpsProxyAggregatedListWarning
    buildTargetHttpsProxyAggregatedListWarning() {
  final o = api.TargetHttpsProxyAggregatedListWarning();
  buildCounterTargetHttpsProxyAggregatedListWarning++;
  if (buildCounterTargetHttpsProxyAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1353();
    o.message = 'foo';
  }
  buildCounterTargetHttpsProxyAggregatedListWarning--;
  return o;
}

void checkTargetHttpsProxyAggregatedListWarning(
    api.TargetHttpsProxyAggregatedListWarning o) {
  buildCounterTargetHttpsProxyAggregatedListWarning++;
  if (buildCounterTargetHttpsProxyAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1353(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxyAggregatedListWarning--;
}

core.int buildCounterTargetHttpsProxyAggregatedList = 0;
api.TargetHttpsProxyAggregatedList buildTargetHttpsProxyAggregatedList() {
  final o = api.TargetHttpsProxyAggregatedList();
  buildCounterTargetHttpsProxyAggregatedList++;
  if (buildCounterTargetHttpsProxyAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1351();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1352();
    o.warning = buildTargetHttpsProxyAggregatedListWarning();
  }
  buildCounterTargetHttpsProxyAggregatedList--;
  return o;
}

void checkTargetHttpsProxyAggregatedList(api.TargetHttpsProxyAggregatedList o) {
  buildCounterTargetHttpsProxyAggregatedList++;
  if (buildCounterTargetHttpsProxyAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1351(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1352(o.unreachables!);
    checkTargetHttpsProxyAggregatedListWarning(o.warning!);
  }
  buildCounterTargetHttpsProxyAggregatedList--;
}

core.List<api.TargetHttpsProxy> buildUnnamed1354() => [
      buildTargetHttpsProxy(),
      buildTargetHttpsProxy(),
    ];

void checkUnnamed1354(core.List<api.TargetHttpsProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxy(o[0]);
  checkTargetHttpsProxy(o[1]);
}

core.int buildCounterTargetHttpsProxyListWarningData = 0;
api.TargetHttpsProxyListWarningData buildTargetHttpsProxyListWarningData() {
  final o = api.TargetHttpsProxyListWarningData();
  buildCounterTargetHttpsProxyListWarningData++;
  if (buildCounterTargetHttpsProxyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetHttpsProxyListWarningData--;
  return o;
}

void checkTargetHttpsProxyListWarningData(
    api.TargetHttpsProxyListWarningData o) {
  buildCounterTargetHttpsProxyListWarningData++;
  if (buildCounterTargetHttpsProxyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxyListWarningData--;
}

core.List<api.TargetHttpsProxyListWarningData> buildUnnamed1355() => [
      buildTargetHttpsProxyListWarningData(),
      buildTargetHttpsProxyListWarningData(),
    ];

void checkUnnamed1355(core.List<api.TargetHttpsProxyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetHttpsProxyListWarningData(o[0]);
  checkTargetHttpsProxyListWarningData(o[1]);
}

core.int buildCounterTargetHttpsProxyListWarning = 0;
api.TargetHttpsProxyListWarning buildTargetHttpsProxyListWarning() {
  final o = api.TargetHttpsProxyListWarning();
  buildCounterTargetHttpsProxyListWarning++;
  if (buildCounterTargetHttpsProxyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1355();
    o.message = 'foo';
  }
  buildCounterTargetHttpsProxyListWarning--;
  return o;
}

void checkTargetHttpsProxyListWarning(api.TargetHttpsProxyListWarning o) {
  buildCounterTargetHttpsProxyListWarning++;
  if (buildCounterTargetHttpsProxyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1355(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetHttpsProxyListWarning--;
}

core.int buildCounterTargetHttpsProxyList = 0;
api.TargetHttpsProxyList buildTargetHttpsProxyList() {
  final o = api.TargetHttpsProxyList();
  buildCounterTargetHttpsProxyList++;
  if (buildCounterTargetHttpsProxyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1354();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetHttpsProxyListWarning();
  }
  buildCounterTargetHttpsProxyList--;
  return o;
}

void checkTargetHttpsProxyList(api.TargetHttpsProxyList o) {
  buildCounterTargetHttpsProxyList++;
  if (buildCounterTargetHttpsProxyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1354(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetHttpsProxyListWarning(o.warning!);
  }
  buildCounterTargetHttpsProxyList--;
}

core.int buildCounterTargetInstance = 0;
api.TargetInstance buildTargetInstance() {
  final o = api.TargetInstance();
  buildCounterTargetInstance++;
  if (buildCounterTargetInstance < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.instance = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.natPolicy = 'foo';
    o.selfLink = 'foo';
    o.zone = 'foo';
  }
  buildCounterTargetInstance--;
  return o;
}

void checkTargetInstance(api.TargetInstance o) {
  buildCounterTargetInstance++;
  if (buildCounterTargetInstance < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.instance!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.natPolicy!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.zone!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstance--;
}

core.Map<core.String, api.TargetInstancesScopedList> buildUnnamed1356() => {
      'x': buildTargetInstancesScopedList(),
      'y': buildTargetInstancesScopedList(),
    };

void checkUnnamed1356(core.Map<core.String, api.TargetInstancesScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstancesScopedList(o['x']!);
  checkTargetInstancesScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1357() => [
      'foo',
      'foo',
    ];

void checkUnnamed1357(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetInstanceAggregatedListWarningData = 0;
api.TargetInstanceAggregatedListWarningData
    buildTargetInstanceAggregatedListWarningData() {
  final o = api.TargetInstanceAggregatedListWarningData();
  buildCounterTargetInstanceAggregatedListWarningData++;
  if (buildCounterTargetInstanceAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetInstanceAggregatedListWarningData--;
  return o;
}

void checkTargetInstanceAggregatedListWarningData(
    api.TargetInstanceAggregatedListWarningData o) {
  buildCounterTargetInstanceAggregatedListWarningData++;
  if (buildCounterTargetInstanceAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstanceAggregatedListWarningData--;
}

core.List<api.TargetInstanceAggregatedListWarningData> buildUnnamed1358() => [
      buildTargetInstanceAggregatedListWarningData(),
      buildTargetInstanceAggregatedListWarningData(),
    ];

void checkUnnamed1358(
    core.List<api.TargetInstanceAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstanceAggregatedListWarningData(o[0]);
  checkTargetInstanceAggregatedListWarningData(o[1]);
}

core.int buildCounterTargetInstanceAggregatedListWarning = 0;
api.TargetInstanceAggregatedListWarning
    buildTargetInstanceAggregatedListWarning() {
  final o = api.TargetInstanceAggregatedListWarning();
  buildCounterTargetInstanceAggregatedListWarning++;
  if (buildCounterTargetInstanceAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1358();
    o.message = 'foo';
  }
  buildCounterTargetInstanceAggregatedListWarning--;
  return o;
}

void checkTargetInstanceAggregatedListWarning(
    api.TargetInstanceAggregatedListWarning o) {
  buildCounterTargetInstanceAggregatedListWarning++;
  if (buildCounterTargetInstanceAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1358(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstanceAggregatedListWarning--;
}

core.int buildCounterTargetInstanceAggregatedList = 0;
api.TargetInstanceAggregatedList buildTargetInstanceAggregatedList() {
  final o = api.TargetInstanceAggregatedList();
  buildCounterTargetInstanceAggregatedList++;
  if (buildCounterTargetInstanceAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1356();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1357();
    o.warning = buildTargetInstanceAggregatedListWarning();
  }
  buildCounterTargetInstanceAggregatedList--;
  return o;
}

void checkTargetInstanceAggregatedList(api.TargetInstanceAggregatedList o) {
  buildCounterTargetInstanceAggregatedList++;
  if (buildCounterTargetInstanceAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1356(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1357(o.unreachables!);
    checkTargetInstanceAggregatedListWarning(o.warning!);
  }
  buildCounterTargetInstanceAggregatedList--;
}

core.List<api.TargetInstance> buildUnnamed1359() => [
      buildTargetInstance(),
      buildTargetInstance(),
    ];

void checkUnnamed1359(core.List<api.TargetInstance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstance(o[0]);
  checkTargetInstance(o[1]);
}

core.int buildCounterTargetInstanceListWarningData = 0;
api.TargetInstanceListWarningData buildTargetInstanceListWarningData() {
  final o = api.TargetInstanceListWarningData();
  buildCounterTargetInstanceListWarningData++;
  if (buildCounterTargetInstanceListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetInstanceListWarningData--;
  return o;
}

void checkTargetInstanceListWarningData(api.TargetInstanceListWarningData o) {
  buildCounterTargetInstanceListWarningData++;
  if (buildCounterTargetInstanceListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstanceListWarningData--;
}

core.List<api.TargetInstanceListWarningData> buildUnnamed1360() => [
      buildTargetInstanceListWarningData(),
      buildTargetInstanceListWarningData(),
    ];

void checkUnnamed1360(core.List<api.TargetInstanceListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstanceListWarningData(o[0]);
  checkTargetInstanceListWarningData(o[1]);
}

core.int buildCounterTargetInstanceListWarning = 0;
api.TargetInstanceListWarning buildTargetInstanceListWarning() {
  final o = api.TargetInstanceListWarning();
  buildCounterTargetInstanceListWarning++;
  if (buildCounterTargetInstanceListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1360();
    o.message = 'foo';
  }
  buildCounterTargetInstanceListWarning--;
  return o;
}

void checkTargetInstanceListWarning(api.TargetInstanceListWarning o) {
  buildCounterTargetInstanceListWarning++;
  if (buildCounterTargetInstanceListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1360(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstanceListWarning--;
}

core.int buildCounterTargetInstanceList = 0;
api.TargetInstanceList buildTargetInstanceList() {
  final o = api.TargetInstanceList();
  buildCounterTargetInstanceList++;
  if (buildCounterTargetInstanceList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1359();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetInstanceListWarning();
  }
  buildCounterTargetInstanceList--;
  return o;
}

void checkTargetInstanceList(api.TargetInstanceList o) {
  buildCounterTargetInstanceList++;
  if (buildCounterTargetInstanceList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1359(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetInstanceListWarning(o.warning!);
  }
  buildCounterTargetInstanceList--;
}

core.List<api.TargetInstance> buildUnnamed1361() => [
      buildTargetInstance(),
      buildTargetInstance(),
    ];

void checkUnnamed1361(core.List<api.TargetInstance> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstance(o[0]);
  checkTargetInstance(o[1]);
}

core.int buildCounterTargetInstancesScopedListWarningData = 0;
api.TargetInstancesScopedListWarningData
    buildTargetInstancesScopedListWarningData() {
  final o = api.TargetInstancesScopedListWarningData();
  buildCounterTargetInstancesScopedListWarningData++;
  if (buildCounterTargetInstancesScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetInstancesScopedListWarningData--;
  return o;
}

void checkTargetInstancesScopedListWarningData(
    api.TargetInstancesScopedListWarningData o) {
  buildCounterTargetInstancesScopedListWarningData++;
  if (buildCounterTargetInstancesScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstancesScopedListWarningData--;
}

core.List<api.TargetInstancesScopedListWarningData> buildUnnamed1362() => [
      buildTargetInstancesScopedListWarningData(),
      buildTargetInstancesScopedListWarningData(),
    ];

void checkUnnamed1362(core.List<api.TargetInstancesScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetInstancesScopedListWarningData(o[0]);
  checkTargetInstancesScopedListWarningData(o[1]);
}

core.int buildCounterTargetInstancesScopedListWarning = 0;
api.TargetInstancesScopedListWarning buildTargetInstancesScopedListWarning() {
  final o = api.TargetInstancesScopedListWarning();
  buildCounterTargetInstancesScopedListWarning++;
  if (buildCounterTargetInstancesScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1362();
    o.message = 'foo';
  }
  buildCounterTargetInstancesScopedListWarning--;
  return o;
}

void checkTargetInstancesScopedListWarning(
    api.TargetInstancesScopedListWarning o) {
  buildCounterTargetInstancesScopedListWarning++;
  if (buildCounterTargetInstancesScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1362(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetInstancesScopedListWarning--;
}

core.int buildCounterTargetInstancesScopedList = 0;
api.TargetInstancesScopedList buildTargetInstancesScopedList() {
  final o = api.TargetInstancesScopedList();
  buildCounterTargetInstancesScopedList++;
  if (buildCounterTargetInstancesScopedList < 3) {
    o.targetInstances = buildUnnamed1361();
    o.warning = buildTargetInstancesScopedListWarning();
  }
  buildCounterTargetInstancesScopedList--;
  return o;
}

void checkTargetInstancesScopedList(api.TargetInstancesScopedList o) {
  buildCounterTargetInstancesScopedList++;
  if (buildCounterTargetInstancesScopedList < 3) {
    checkUnnamed1361(o.targetInstances!);
    checkTargetInstancesScopedListWarning(o.warning!);
  }
  buildCounterTargetInstancesScopedList--;
}

core.List<core.String> buildUnnamed1363() => [
      'foo',
      'foo',
    ];

void checkUnnamed1363(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1364() => [
      'foo',
      'foo',
    ];

void checkUnnamed1364(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetPool = 0;
api.TargetPool buildTargetPool() {
  final o = api.TargetPool();
  buildCounterTargetPool++;
  if (buildCounterTargetPool < 3) {
    o.backupPool = 'foo';
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.failoverRatio = 42.0;
    o.healthChecks = buildUnnamed1363();
    o.id = 'foo';
    o.instances = buildUnnamed1364();
    o.kind = 'foo';
    o.name = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.sessionAffinity = 'foo';
  }
  buildCounterTargetPool--;
  return o;
}

void checkTargetPool(api.TargetPool o) {
  buildCounterTargetPool++;
  if (buildCounterTargetPool < 3) {
    unittest.expect(
      o.backupPool!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.failoverRatio!,
      unittest.equals(42.0),
    );
    checkUnnamed1363(o.healthChecks!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1364(o.instances!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sessionAffinity!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPool--;
}

core.Map<core.String, api.TargetPoolsScopedList> buildUnnamed1365() => {
      'x': buildTargetPoolsScopedList(),
      'y': buildTargetPoolsScopedList(),
    };

void checkUnnamed1365(core.Map<core.String, api.TargetPoolsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPoolsScopedList(o['x']!);
  checkTargetPoolsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1366() => [
      'foo',
      'foo',
    ];

void checkUnnamed1366(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetPoolAggregatedListWarningData = 0;
api.TargetPoolAggregatedListWarningData
    buildTargetPoolAggregatedListWarningData() {
  final o = api.TargetPoolAggregatedListWarningData();
  buildCounterTargetPoolAggregatedListWarningData++;
  if (buildCounterTargetPoolAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetPoolAggregatedListWarningData--;
  return o;
}

void checkTargetPoolAggregatedListWarningData(
    api.TargetPoolAggregatedListWarningData o) {
  buildCounterTargetPoolAggregatedListWarningData++;
  if (buildCounterTargetPoolAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolAggregatedListWarningData--;
}

core.List<api.TargetPoolAggregatedListWarningData> buildUnnamed1367() => [
      buildTargetPoolAggregatedListWarningData(),
      buildTargetPoolAggregatedListWarningData(),
    ];

void checkUnnamed1367(core.List<api.TargetPoolAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPoolAggregatedListWarningData(o[0]);
  checkTargetPoolAggregatedListWarningData(o[1]);
}

core.int buildCounterTargetPoolAggregatedListWarning = 0;
api.TargetPoolAggregatedListWarning buildTargetPoolAggregatedListWarning() {
  final o = api.TargetPoolAggregatedListWarning();
  buildCounterTargetPoolAggregatedListWarning++;
  if (buildCounterTargetPoolAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1367();
    o.message = 'foo';
  }
  buildCounterTargetPoolAggregatedListWarning--;
  return o;
}

void checkTargetPoolAggregatedListWarning(
    api.TargetPoolAggregatedListWarning o) {
  buildCounterTargetPoolAggregatedListWarning++;
  if (buildCounterTargetPoolAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1367(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolAggregatedListWarning--;
}

core.int buildCounterTargetPoolAggregatedList = 0;
api.TargetPoolAggregatedList buildTargetPoolAggregatedList() {
  final o = api.TargetPoolAggregatedList();
  buildCounterTargetPoolAggregatedList++;
  if (buildCounterTargetPoolAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1365();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1366();
    o.warning = buildTargetPoolAggregatedListWarning();
  }
  buildCounterTargetPoolAggregatedList--;
  return o;
}

void checkTargetPoolAggregatedList(api.TargetPoolAggregatedList o) {
  buildCounterTargetPoolAggregatedList++;
  if (buildCounterTargetPoolAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1365(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1366(o.unreachables!);
    checkTargetPoolAggregatedListWarning(o.warning!);
  }
  buildCounterTargetPoolAggregatedList--;
}

core.List<api.HealthStatus> buildUnnamed1368() => [
      buildHealthStatus(),
      buildHealthStatus(),
    ];

void checkUnnamed1368(core.List<api.HealthStatus> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthStatus(o[0]);
  checkHealthStatus(o[1]);
}

core.int buildCounterTargetPoolInstanceHealth = 0;
api.TargetPoolInstanceHealth buildTargetPoolInstanceHealth() {
  final o = api.TargetPoolInstanceHealth();
  buildCounterTargetPoolInstanceHealth++;
  if (buildCounterTargetPoolInstanceHealth < 3) {
    o.healthStatus = buildUnnamed1368();
    o.kind = 'foo';
  }
  buildCounterTargetPoolInstanceHealth--;
  return o;
}

void checkTargetPoolInstanceHealth(api.TargetPoolInstanceHealth o) {
  buildCounterTargetPoolInstanceHealth++;
  if (buildCounterTargetPoolInstanceHealth < 3) {
    checkUnnamed1368(o.healthStatus!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolInstanceHealth--;
}

core.List<api.TargetPool> buildUnnamed1369() => [
      buildTargetPool(),
      buildTargetPool(),
    ];

void checkUnnamed1369(core.List<api.TargetPool> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPool(o[0]);
  checkTargetPool(o[1]);
}

core.int buildCounterTargetPoolListWarningData = 0;
api.TargetPoolListWarningData buildTargetPoolListWarningData() {
  final o = api.TargetPoolListWarningData();
  buildCounterTargetPoolListWarningData++;
  if (buildCounterTargetPoolListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetPoolListWarningData--;
  return o;
}

void checkTargetPoolListWarningData(api.TargetPoolListWarningData o) {
  buildCounterTargetPoolListWarningData++;
  if (buildCounterTargetPoolListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolListWarningData--;
}

core.List<api.TargetPoolListWarningData> buildUnnamed1370() => [
      buildTargetPoolListWarningData(),
      buildTargetPoolListWarningData(),
    ];

void checkUnnamed1370(core.List<api.TargetPoolListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPoolListWarningData(o[0]);
  checkTargetPoolListWarningData(o[1]);
}

core.int buildCounterTargetPoolListWarning = 0;
api.TargetPoolListWarning buildTargetPoolListWarning() {
  final o = api.TargetPoolListWarning();
  buildCounterTargetPoolListWarning++;
  if (buildCounterTargetPoolListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1370();
    o.message = 'foo';
  }
  buildCounterTargetPoolListWarning--;
  return o;
}

void checkTargetPoolListWarning(api.TargetPoolListWarning o) {
  buildCounterTargetPoolListWarning++;
  if (buildCounterTargetPoolListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1370(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolListWarning--;
}

core.int buildCounterTargetPoolList = 0;
api.TargetPoolList buildTargetPoolList() {
  final o = api.TargetPoolList();
  buildCounterTargetPoolList++;
  if (buildCounterTargetPoolList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1369();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetPoolListWarning();
  }
  buildCounterTargetPoolList--;
  return o;
}

void checkTargetPoolList(api.TargetPoolList o) {
  buildCounterTargetPoolList++;
  if (buildCounterTargetPoolList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1369(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetPoolListWarning(o.warning!);
  }
  buildCounterTargetPoolList--;
}

core.List<api.HealthCheckReference> buildUnnamed1371() => [
      buildHealthCheckReference(),
      buildHealthCheckReference(),
    ];

void checkUnnamed1371(core.List<api.HealthCheckReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheckReference(o[0]);
  checkHealthCheckReference(o[1]);
}

core.int buildCounterTargetPoolsAddHealthCheckRequest = 0;
api.TargetPoolsAddHealthCheckRequest buildTargetPoolsAddHealthCheckRequest() {
  final o = api.TargetPoolsAddHealthCheckRequest();
  buildCounterTargetPoolsAddHealthCheckRequest++;
  if (buildCounterTargetPoolsAddHealthCheckRequest < 3) {
    o.healthChecks = buildUnnamed1371();
  }
  buildCounterTargetPoolsAddHealthCheckRequest--;
  return o;
}

void checkTargetPoolsAddHealthCheckRequest(
    api.TargetPoolsAddHealthCheckRequest o) {
  buildCounterTargetPoolsAddHealthCheckRequest++;
  if (buildCounterTargetPoolsAddHealthCheckRequest < 3) {
    checkUnnamed1371(o.healthChecks!);
  }
  buildCounterTargetPoolsAddHealthCheckRequest--;
}

core.List<api.InstanceReference> buildUnnamed1372() => [
      buildInstanceReference(),
      buildInstanceReference(),
    ];

void checkUnnamed1372(core.List<api.InstanceReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceReference(o[0]);
  checkInstanceReference(o[1]);
}

core.int buildCounterTargetPoolsAddInstanceRequest = 0;
api.TargetPoolsAddInstanceRequest buildTargetPoolsAddInstanceRequest() {
  final o = api.TargetPoolsAddInstanceRequest();
  buildCounterTargetPoolsAddInstanceRequest++;
  if (buildCounterTargetPoolsAddInstanceRequest < 3) {
    o.instances = buildUnnamed1372();
  }
  buildCounterTargetPoolsAddInstanceRequest--;
  return o;
}

void checkTargetPoolsAddInstanceRequest(api.TargetPoolsAddInstanceRequest o) {
  buildCounterTargetPoolsAddInstanceRequest++;
  if (buildCounterTargetPoolsAddInstanceRequest < 3) {
    checkUnnamed1372(o.instances!);
  }
  buildCounterTargetPoolsAddInstanceRequest--;
}

core.List<api.HealthCheckReference> buildUnnamed1373() => [
      buildHealthCheckReference(),
      buildHealthCheckReference(),
    ];

void checkUnnamed1373(core.List<api.HealthCheckReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHealthCheckReference(o[0]);
  checkHealthCheckReference(o[1]);
}

core.int buildCounterTargetPoolsRemoveHealthCheckRequest = 0;
api.TargetPoolsRemoveHealthCheckRequest
    buildTargetPoolsRemoveHealthCheckRequest() {
  final o = api.TargetPoolsRemoveHealthCheckRequest();
  buildCounterTargetPoolsRemoveHealthCheckRequest++;
  if (buildCounterTargetPoolsRemoveHealthCheckRequest < 3) {
    o.healthChecks = buildUnnamed1373();
  }
  buildCounterTargetPoolsRemoveHealthCheckRequest--;
  return o;
}

void checkTargetPoolsRemoveHealthCheckRequest(
    api.TargetPoolsRemoveHealthCheckRequest o) {
  buildCounterTargetPoolsRemoveHealthCheckRequest++;
  if (buildCounterTargetPoolsRemoveHealthCheckRequest < 3) {
    checkUnnamed1373(o.healthChecks!);
  }
  buildCounterTargetPoolsRemoveHealthCheckRequest--;
}

core.List<api.InstanceReference> buildUnnamed1374() => [
      buildInstanceReference(),
      buildInstanceReference(),
    ];

void checkUnnamed1374(core.List<api.InstanceReference> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkInstanceReference(o[0]);
  checkInstanceReference(o[1]);
}

core.int buildCounterTargetPoolsRemoveInstanceRequest = 0;
api.TargetPoolsRemoveInstanceRequest buildTargetPoolsRemoveInstanceRequest() {
  final o = api.TargetPoolsRemoveInstanceRequest();
  buildCounterTargetPoolsRemoveInstanceRequest++;
  if (buildCounterTargetPoolsRemoveInstanceRequest < 3) {
    o.instances = buildUnnamed1374();
  }
  buildCounterTargetPoolsRemoveInstanceRequest--;
  return o;
}

void checkTargetPoolsRemoveInstanceRequest(
    api.TargetPoolsRemoveInstanceRequest o) {
  buildCounterTargetPoolsRemoveInstanceRequest++;
  if (buildCounterTargetPoolsRemoveInstanceRequest < 3) {
    checkUnnamed1374(o.instances!);
  }
  buildCounterTargetPoolsRemoveInstanceRequest--;
}

core.List<api.TargetPool> buildUnnamed1375() => [
      buildTargetPool(),
      buildTargetPool(),
    ];

void checkUnnamed1375(core.List<api.TargetPool> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPool(o[0]);
  checkTargetPool(o[1]);
}

core.int buildCounterTargetPoolsScopedListWarningData = 0;
api.TargetPoolsScopedListWarningData buildTargetPoolsScopedListWarningData() {
  final o = api.TargetPoolsScopedListWarningData();
  buildCounterTargetPoolsScopedListWarningData++;
  if (buildCounterTargetPoolsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetPoolsScopedListWarningData--;
  return o;
}

void checkTargetPoolsScopedListWarningData(
    api.TargetPoolsScopedListWarningData o) {
  buildCounterTargetPoolsScopedListWarningData++;
  if (buildCounterTargetPoolsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolsScopedListWarningData--;
}

core.List<api.TargetPoolsScopedListWarningData> buildUnnamed1376() => [
      buildTargetPoolsScopedListWarningData(),
      buildTargetPoolsScopedListWarningData(),
    ];

void checkUnnamed1376(core.List<api.TargetPoolsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetPoolsScopedListWarningData(o[0]);
  checkTargetPoolsScopedListWarningData(o[1]);
}

core.int buildCounterTargetPoolsScopedListWarning = 0;
api.TargetPoolsScopedListWarning buildTargetPoolsScopedListWarning() {
  final o = api.TargetPoolsScopedListWarning();
  buildCounterTargetPoolsScopedListWarning++;
  if (buildCounterTargetPoolsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1376();
    o.message = 'foo';
  }
  buildCounterTargetPoolsScopedListWarning--;
  return o;
}

void checkTargetPoolsScopedListWarning(api.TargetPoolsScopedListWarning o) {
  buildCounterTargetPoolsScopedListWarning++;
  if (buildCounterTargetPoolsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1376(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetPoolsScopedListWarning--;
}

core.int buildCounterTargetPoolsScopedList = 0;
api.TargetPoolsScopedList buildTargetPoolsScopedList() {
  final o = api.TargetPoolsScopedList();
  buildCounterTargetPoolsScopedList++;
  if (buildCounterTargetPoolsScopedList < 3) {
    o.targetPools = buildUnnamed1375();
    o.warning = buildTargetPoolsScopedListWarning();
  }
  buildCounterTargetPoolsScopedList--;
  return o;
}

void checkTargetPoolsScopedList(api.TargetPoolsScopedList o) {
  buildCounterTargetPoolsScopedList++;
  if (buildCounterTargetPoolsScopedList < 3) {
    checkUnnamed1375(o.targetPools!);
    checkTargetPoolsScopedListWarning(o.warning!);
  }
  buildCounterTargetPoolsScopedList--;
}

core.int buildCounterTargetReference = 0;
api.TargetReference buildTargetReference() {
  final o = api.TargetReference();
  buildCounterTargetReference++;
  if (buildCounterTargetReference < 3) {
    o.target = 'foo';
  }
  buildCounterTargetReference--;
  return o;
}

void checkTargetReference(api.TargetReference o) {
  buildCounterTargetReference++;
  if (buildCounterTargetReference < 3) {
    unittest.expect(
      o.target!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetReference--;
}

core.int buildCounterTargetSslProxiesSetBackendServiceRequest = 0;
api.TargetSslProxiesSetBackendServiceRequest
    buildTargetSslProxiesSetBackendServiceRequest() {
  final o = api.TargetSslProxiesSetBackendServiceRequest();
  buildCounterTargetSslProxiesSetBackendServiceRequest++;
  if (buildCounterTargetSslProxiesSetBackendServiceRequest < 3) {
    o.service = 'foo';
  }
  buildCounterTargetSslProxiesSetBackendServiceRequest--;
  return o;
}

void checkTargetSslProxiesSetBackendServiceRequest(
    api.TargetSslProxiesSetBackendServiceRequest o) {
  buildCounterTargetSslProxiesSetBackendServiceRequest++;
  if (buildCounterTargetSslProxiesSetBackendServiceRequest < 3) {
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetSslProxiesSetBackendServiceRequest--;
}

core.int buildCounterTargetSslProxiesSetProxyHeaderRequest = 0;
api.TargetSslProxiesSetProxyHeaderRequest
    buildTargetSslProxiesSetProxyHeaderRequest() {
  final o = api.TargetSslProxiesSetProxyHeaderRequest();
  buildCounterTargetSslProxiesSetProxyHeaderRequest++;
  if (buildCounterTargetSslProxiesSetProxyHeaderRequest < 3) {
    o.proxyHeader = 'foo';
  }
  buildCounterTargetSslProxiesSetProxyHeaderRequest--;
  return o;
}

void checkTargetSslProxiesSetProxyHeaderRequest(
    api.TargetSslProxiesSetProxyHeaderRequest o) {
  buildCounterTargetSslProxiesSetProxyHeaderRequest++;
  if (buildCounterTargetSslProxiesSetProxyHeaderRequest < 3) {
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetSslProxiesSetProxyHeaderRequest--;
}

core.List<core.String> buildUnnamed1377() => [
      'foo',
      'foo',
    ];

void checkUnnamed1377(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetSslProxiesSetSslCertificatesRequest = 0;
api.TargetSslProxiesSetSslCertificatesRequest
    buildTargetSslProxiesSetSslCertificatesRequest() {
  final o = api.TargetSslProxiesSetSslCertificatesRequest();
  buildCounterTargetSslProxiesSetSslCertificatesRequest++;
  if (buildCounterTargetSslProxiesSetSslCertificatesRequest < 3) {
    o.sslCertificates = buildUnnamed1377();
  }
  buildCounterTargetSslProxiesSetSslCertificatesRequest--;
  return o;
}

void checkTargetSslProxiesSetSslCertificatesRequest(
    api.TargetSslProxiesSetSslCertificatesRequest o) {
  buildCounterTargetSslProxiesSetSslCertificatesRequest++;
  if (buildCounterTargetSslProxiesSetSslCertificatesRequest < 3) {
    checkUnnamed1377(o.sslCertificates!);
  }
  buildCounterTargetSslProxiesSetSslCertificatesRequest--;
}

core.List<core.String> buildUnnamed1378() => [
      'foo',
      'foo',
    ];

void checkUnnamed1378(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetSslProxy = 0;
api.TargetSslProxy buildTargetSslProxy() {
  final o = api.TargetSslProxy();
  buildCounterTargetSslProxy++;
  if (buildCounterTargetSslProxy < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.proxyHeader = 'foo';
    o.selfLink = 'foo';
    o.service = 'foo';
    o.sslCertificates = buildUnnamed1378();
    o.sslPolicy = 'foo';
  }
  buildCounterTargetSslProxy--;
  return o;
}

void checkTargetSslProxy(api.TargetSslProxy o) {
  buildCounterTargetSslProxy++;
  if (buildCounterTargetSslProxy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
    checkUnnamed1378(o.sslCertificates!);
    unittest.expect(
      o.sslPolicy!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetSslProxy--;
}

core.List<api.TargetSslProxy> buildUnnamed1379() => [
      buildTargetSslProxy(),
      buildTargetSslProxy(),
    ];

void checkUnnamed1379(core.List<api.TargetSslProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetSslProxy(o[0]);
  checkTargetSslProxy(o[1]);
}

core.int buildCounterTargetSslProxyListWarningData = 0;
api.TargetSslProxyListWarningData buildTargetSslProxyListWarningData() {
  final o = api.TargetSslProxyListWarningData();
  buildCounterTargetSslProxyListWarningData++;
  if (buildCounterTargetSslProxyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetSslProxyListWarningData--;
  return o;
}

void checkTargetSslProxyListWarningData(api.TargetSslProxyListWarningData o) {
  buildCounterTargetSslProxyListWarningData++;
  if (buildCounterTargetSslProxyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetSslProxyListWarningData--;
}

core.List<api.TargetSslProxyListWarningData> buildUnnamed1380() => [
      buildTargetSslProxyListWarningData(),
      buildTargetSslProxyListWarningData(),
    ];

void checkUnnamed1380(core.List<api.TargetSslProxyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetSslProxyListWarningData(o[0]);
  checkTargetSslProxyListWarningData(o[1]);
}

core.int buildCounterTargetSslProxyListWarning = 0;
api.TargetSslProxyListWarning buildTargetSslProxyListWarning() {
  final o = api.TargetSslProxyListWarning();
  buildCounterTargetSslProxyListWarning++;
  if (buildCounterTargetSslProxyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1380();
    o.message = 'foo';
  }
  buildCounterTargetSslProxyListWarning--;
  return o;
}

void checkTargetSslProxyListWarning(api.TargetSslProxyListWarning o) {
  buildCounterTargetSslProxyListWarning++;
  if (buildCounterTargetSslProxyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1380(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetSslProxyListWarning--;
}

core.int buildCounterTargetSslProxyList = 0;
api.TargetSslProxyList buildTargetSslProxyList() {
  final o = api.TargetSslProxyList();
  buildCounterTargetSslProxyList++;
  if (buildCounterTargetSslProxyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1379();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetSslProxyListWarning();
  }
  buildCounterTargetSslProxyList--;
  return o;
}

void checkTargetSslProxyList(api.TargetSslProxyList o) {
  buildCounterTargetSslProxyList++;
  if (buildCounterTargetSslProxyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1379(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetSslProxyListWarning(o.warning!);
  }
  buildCounterTargetSslProxyList--;
}

core.int buildCounterTargetTcpProxiesSetBackendServiceRequest = 0;
api.TargetTcpProxiesSetBackendServiceRequest
    buildTargetTcpProxiesSetBackendServiceRequest() {
  final o = api.TargetTcpProxiesSetBackendServiceRequest();
  buildCounterTargetTcpProxiesSetBackendServiceRequest++;
  if (buildCounterTargetTcpProxiesSetBackendServiceRequest < 3) {
    o.service = 'foo';
  }
  buildCounterTargetTcpProxiesSetBackendServiceRequest--;
  return o;
}

void checkTargetTcpProxiesSetBackendServiceRequest(
    api.TargetTcpProxiesSetBackendServiceRequest o) {
  buildCounterTargetTcpProxiesSetBackendServiceRequest++;
  if (buildCounterTargetTcpProxiesSetBackendServiceRequest < 3) {
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetTcpProxiesSetBackendServiceRequest--;
}

core.int buildCounterTargetTcpProxiesSetProxyHeaderRequest = 0;
api.TargetTcpProxiesSetProxyHeaderRequest
    buildTargetTcpProxiesSetProxyHeaderRequest() {
  final o = api.TargetTcpProxiesSetProxyHeaderRequest();
  buildCounterTargetTcpProxiesSetProxyHeaderRequest++;
  if (buildCounterTargetTcpProxiesSetProxyHeaderRequest < 3) {
    o.proxyHeader = 'foo';
  }
  buildCounterTargetTcpProxiesSetProxyHeaderRequest--;
  return o;
}

void checkTargetTcpProxiesSetProxyHeaderRequest(
    api.TargetTcpProxiesSetProxyHeaderRequest o) {
  buildCounterTargetTcpProxiesSetProxyHeaderRequest++;
  if (buildCounterTargetTcpProxiesSetProxyHeaderRequest < 3) {
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetTcpProxiesSetProxyHeaderRequest--;
}

core.int buildCounterTargetTcpProxy = 0;
api.TargetTcpProxy buildTargetTcpProxy() {
  final o = api.TargetTcpProxy();
  buildCounterTargetTcpProxy++;
  if (buildCounterTargetTcpProxy < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.proxyBind = true;
    o.proxyHeader = 'foo';
    o.selfLink = 'foo';
    o.service = 'foo';
  }
  buildCounterTargetTcpProxy--;
  return o;
}

void checkTargetTcpProxy(api.TargetTcpProxy o) {
  buildCounterTargetTcpProxy++;
  if (buildCounterTargetTcpProxy < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(o.proxyBind!, unittest.isTrue);
    unittest.expect(
      o.proxyHeader!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetTcpProxy--;
}

core.List<api.TargetTcpProxy> buildUnnamed1381() => [
      buildTargetTcpProxy(),
      buildTargetTcpProxy(),
    ];

void checkUnnamed1381(core.List<api.TargetTcpProxy> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetTcpProxy(o[0]);
  checkTargetTcpProxy(o[1]);
}

core.int buildCounterTargetTcpProxyListWarningData = 0;
api.TargetTcpProxyListWarningData buildTargetTcpProxyListWarningData() {
  final o = api.TargetTcpProxyListWarningData();
  buildCounterTargetTcpProxyListWarningData++;
  if (buildCounterTargetTcpProxyListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetTcpProxyListWarningData--;
  return o;
}

void checkTargetTcpProxyListWarningData(api.TargetTcpProxyListWarningData o) {
  buildCounterTargetTcpProxyListWarningData++;
  if (buildCounterTargetTcpProxyListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetTcpProxyListWarningData--;
}

core.List<api.TargetTcpProxyListWarningData> buildUnnamed1382() => [
      buildTargetTcpProxyListWarningData(),
      buildTargetTcpProxyListWarningData(),
    ];

void checkUnnamed1382(core.List<api.TargetTcpProxyListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetTcpProxyListWarningData(o[0]);
  checkTargetTcpProxyListWarningData(o[1]);
}

core.int buildCounterTargetTcpProxyListWarning = 0;
api.TargetTcpProxyListWarning buildTargetTcpProxyListWarning() {
  final o = api.TargetTcpProxyListWarning();
  buildCounterTargetTcpProxyListWarning++;
  if (buildCounterTargetTcpProxyListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1382();
    o.message = 'foo';
  }
  buildCounterTargetTcpProxyListWarning--;
  return o;
}

void checkTargetTcpProxyListWarning(api.TargetTcpProxyListWarning o) {
  buildCounterTargetTcpProxyListWarning++;
  if (buildCounterTargetTcpProxyListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1382(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetTcpProxyListWarning--;
}

core.int buildCounterTargetTcpProxyList = 0;
api.TargetTcpProxyList buildTargetTcpProxyList() {
  final o = api.TargetTcpProxyList();
  buildCounterTargetTcpProxyList++;
  if (buildCounterTargetTcpProxyList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1381();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetTcpProxyListWarning();
  }
  buildCounterTargetTcpProxyList--;
  return o;
}

void checkTargetTcpProxyList(api.TargetTcpProxyList o) {
  buildCounterTargetTcpProxyList++;
  if (buildCounterTargetTcpProxyList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1381(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetTcpProxyListWarning(o.warning!);
  }
  buildCounterTargetTcpProxyList--;
}

core.List<core.String> buildUnnamed1383() => [
      'foo',
      'foo',
    ];

void checkUnnamed1383(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1384() => [
      'foo',
      'foo',
    ];

void checkUnnamed1384(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetVpnGateway = 0;
api.TargetVpnGateway buildTargetVpnGateway() {
  final o = api.TargetVpnGateway();
  buildCounterTargetVpnGateway++;
  if (buildCounterTargetVpnGateway < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.forwardingRules = buildUnnamed1383();
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.network = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.status = 'foo';
    o.tunnels = buildUnnamed1384();
  }
  buildCounterTargetVpnGateway--;
  return o;
}

void checkTargetVpnGateway(api.TargetVpnGateway o) {
  buildCounterTargetVpnGateway++;
  if (buildCounterTargetVpnGateway < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    checkUnnamed1383(o.forwardingRules!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    checkUnnamed1384(o.tunnels!);
  }
  buildCounterTargetVpnGateway--;
}

core.Map<core.String, api.TargetVpnGatewaysScopedList> buildUnnamed1385() => {
      'x': buildTargetVpnGatewaysScopedList(),
      'y': buildTargetVpnGatewaysScopedList(),
    };

void checkUnnamed1385(
    core.Map<core.String, api.TargetVpnGatewaysScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGatewaysScopedList(o['x']!);
  checkTargetVpnGatewaysScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1386() => [
      'foo',
      'foo',
    ];

void checkUnnamed1386(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTargetVpnGatewayAggregatedListWarningData = 0;
api.TargetVpnGatewayAggregatedListWarningData
    buildTargetVpnGatewayAggregatedListWarningData() {
  final o = api.TargetVpnGatewayAggregatedListWarningData();
  buildCounterTargetVpnGatewayAggregatedListWarningData++;
  if (buildCounterTargetVpnGatewayAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetVpnGatewayAggregatedListWarningData--;
  return o;
}

void checkTargetVpnGatewayAggregatedListWarningData(
    api.TargetVpnGatewayAggregatedListWarningData o) {
  buildCounterTargetVpnGatewayAggregatedListWarningData++;
  if (buildCounterTargetVpnGatewayAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewayAggregatedListWarningData--;
}

core.List<api.TargetVpnGatewayAggregatedListWarningData> buildUnnamed1387() => [
      buildTargetVpnGatewayAggregatedListWarningData(),
      buildTargetVpnGatewayAggregatedListWarningData(),
    ];

void checkUnnamed1387(
    core.List<api.TargetVpnGatewayAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGatewayAggregatedListWarningData(o[0]);
  checkTargetVpnGatewayAggregatedListWarningData(o[1]);
}

core.int buildCounterTargetVpnGatewayAggregatedListWarning = 0;
api.TargetVpnGatewayAggregatedListWarning
    buildTargetVpnGatewayAggregatedListWarning() {
  final o = api.TargetVpnGatewayAggregatedListWarning();
  buildCounterTargetVpnGatewayAggregatedListWarning++;
  if (buildCounterTargetVpnGatewayAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1387();
    o.message = 'foo';
  }
  buildCounterTargetVpnGatewayAggregatedListWarning--;
  return o;
}

void checkTargetVpnGatewayAggregatedListWarning(
    api.TargetVpnGatewayAggregatedListWarning o) {
  buildCounterTargetVpnGatewayAggregatedListWarning++;
  if (buildCounterTargetVpnGatewayAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1387(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewayAggregatedListWarning--;
}

core.int buildCounterTargetVpnGatewayAggregatedList = 0;
api.TargetVpnGatewayAggregatedList buildTargetVpnGatewayAggregatedList() {
  final o = api.TargetVpnGatewayAggregatedList();
  buildCounterTargetVpnGatewayAggregatedList++;
  if (buildCounterTargetVpnGatewayAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1385();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1386();
    o.warning = buildTargetVpnGatewayAggregatedListWarning();
  }
  buildCounterTargetVpnGatewayAggregatedList--;
  return o;
}

void checkTargetVpnGatewayAggregatedList(api.TargetVpnGatewayAggregatedList o) {
  buildCounterTargetVpnGatewayAggregatedList++;
  if (buildCounterTargetVpnGatewayAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1385(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1386(o.unreachables!);
    checkTargetVpnGatewayAggregatedListWarning(o.warning!);
  }
  buildCounterTargetVpnGatewayAggregatedList--;
}

core.List<api.TargetVpnGateway> buildUnnamed1388() => [
      buildTargetVpnGateway(),
      buildTargetVpnGateway(),
    ];

void checkUnnamed1388(core.List<api.TargetVpnGateway> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGateway(o[0]);
  checkTargetVpnGateway(o[1]);
}

core.int buildCounterTargetVpnGatewayListWarningData = 0;
api.TargetVpnGatewayListWarningData buildTargetVpnGatewayListWarningData() {
  final o = api.TargetVpnGatewayListWarningData();
  buildCounterTargetVpnGatewayListWarningData++;
  if (buildCounterTargetVpnGatewayListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetVpnGatewayListWarningData--;
  return o;
}

void checkTargetVpnGatewayListWarningData(
    api.TargetVpnGatewayListWarningData o) {
  buildCounterTargetVpnGatewayListWarningData++;
  if (buildCounterTargetVpnGatewayListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewayListWarningData--;
}

core.List<api.TargetVpnGatewayListWarningData> buildUnnamed1389() => [
      buildTargetVpnGatewayListWarningData(),
      buildTargetVpnGatewayListWarningData(),
    ];

void checkUnnamed1389(core.List<api.TargetVpnGatewayListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGatewayListWarningData(o[0]);
  checkTargetVpnGatewayListWarningData(o[1]);
}

core.int buildCounterTargetVpnGatewayListWarning = 0;
api.TargetVpnGatewayListWarning buildTargetVpnGatewayListWarning() {
  final o = api.TargetVpnGatewayListWarning();
  buildCounterTargetVpnGatewayListWarning++;
  if (buildCounterTargetVpnGatewayListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1389();
    o.message = 'foo';
  }
  buildCounterTargetVpnGatewayListWarning--;
  return o;
}

void checkTargetVpnGatewayListWarning(api.TargetVpnGatewayListWarning o) {
  buildCounterTargetVpnGatewayListWarning++;
  if (buildCounterTargetVpnGatewayListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1389(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewayListWarning--;
}

core.int buildCounterTargetVpnGatewayList = 0;
api.TargetVpnGatewayList buildTargetVpnGatewayList() {
  final o = api.TargetVpnGatewayList();
  buildCounterTargetVpnGatewayList++;
  if (buildCounterTargetVpnGatewayList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1388();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildTargetVpnGatewayListWarning();
  }
  buildCounterTargetVpnGatewayList--;
  return o;
}

void checkTargetVpnGatewayList(api.TargetVpnGatewayList o) {
  buildCounterTargetVpnGatewayList++;
  if (buildCounterTargetVpnGatewayList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1388(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkTargetVpnGatewayListWarning(o.warning!);
  }
  buildCounterTargetVpnGatewayList--;
}

core.List<api.TargetVpnGateway> buildUnnamed1390() => [
      buildTargetVpnGateway(),
      buildTargetVpnGateway(),
    ];

void checkUnnamed1390(core.List<api.TargetVpnGateway> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGateway(o[0]);
  checkTargetVpnGateway(o[1]);
}

core.int buildCounterTargetVpnGatewaysScopedListWarningData = 0;
api.TargetVpnGatewaysScopedListWarningData
    buildTargetVpnGatewaysScopedListWarningData() {
  final o = api.TargetVpnGatewaysScopedListWarningData();
  buildCounterTargetVpnGatewaysScopedListWarningData++;
  if (buildCounterTargetVpnGatewaysScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterTargetVpnGatewaysScopedListWarningData--;
  return o;
}

void checkTargetVpnGatewaysScopedListWarningData(
    api.TargetVpnGatewaysScopedListWarningData o) {
  buildCounterTargetVpnGatewaysScopedListWarningData++;
  if (buildCounterTargetVpnGatewaysScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewaysScopedListWarningData--;
}

core.List<api.TargetVpnGatewaysScopedListWarningData> buildUnnamed1391() => [
      buildTargetVpnGatewaysScopedListWarningData(),
      buildTargetVpnGatewaysScopedListWarningData(),
    ];

void checkUnnamed1391(core.List<api.TargetVpnGatewaysScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTargetVpnGatewaysScopedListWarningData(o[0]);
  checkTargetVpnGatewaysScopedListWarningData(o[1]);
}

core.int buildCounterTargetVpnGatewaysScopedListWarning = 0;
api.TargetVpnGatewaysScopedListWarning
    buildTargetVpnGatewaysScopedListWarning() {
  final o = api.TargetVpnGatewaysScopedListWarning();
  buildCounterTargetVpnGatewaysScopedListWarning++;
  if (buildCounterTargetVpnGatewaysScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1391();
    o.message = 'foo';
  }
  buildCounterTargetVpnGatewaysScopedListWarning--;
  return o;
}

void checkTargetVpnGatewaysScopedListWarning(
    api.TargetVpnGatewaysScopedListWarning o) {
  buildCounterTargetVpnGatewaysScopedListWarning++;
  if (buildCounterTargetVpnGatewaysScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1391(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterTargetVpnGatewaysScopedListWarning--;
}

core.int buildCounterTargetVpnGatewaysScopedList = 0;
api.TargetVpnGatewaysScopedList buildTargetVpnGatewaysScopedList() {
  final o = api.TargetVpnGatewaysScopedList();
  buildCounterTargetVpnGatewaysScopedList++;
  if (buildCounterTargetVpnGatewaysScopedList < 3) {
    o.targetVpnGateways = buildUnnamed1390();
    o.warning = buildTargetVpnGatewaysScopedListWarning();
  }
  buildCounterTargetVpnGatewaysScopedList--;
  return o;
}

void checkTargetVpnGatewaysScopedList(api.TargetVpnGatewaysScopedList o) {
  buildCounterTargetVpnGatewaysScopedList++;
  if (buildCounterTargetVpnGatewaysScopedList < 3) {
    checkUnnamed1390(o.targetVpnGateways!);
    checkTargetVpnGatewaysScopedListWarning(o.warning!);
  }
  buildCounterTargetVpnGatewaysScopedList--;
}

core.List<api.UrlMapTestHeader> buildUnnamed1392() => [
      buildUrlMapTestHeader(),
      buildUrlMapTestHeader(),
    ];

void checkUnnamed1392(core.List<api.UrlMapTestHeader> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapTestHeader(o[0]);
  checkUrlMapTestHeader(o[1]);
}

core.int buildCounterTestFailure = 0;
api.TestFailure buildTestFailure() {
  final o = api.TestFailure();
  buildCounterTestFailure++;
  if (buildCounterTestFailure < 3) {
    o.actualOutputUrl = 'foo';
    o.actualRedirectResponseCode = 42;
    o.actualService = 'foo';
    o.expectedOutputUrl = 'foo';
    o.expectedRedirectResponseCode = 42;
    o.expectedService = 'foo';
    o.headers = buildUnnamed1392();
    o.host = 'foo';
    o.path = 'foo';
  }
  buildCounterTestFailure--;
  return o;
}

void checkTestFailure(api.TestFailure o) {
  buildCounterTestFailure++;
  if (buildCounterTestFailure < 3) {
    unittest.expect(
      o.actualOutputUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.actualRedirectResponseCode!,
      unittest.equals(42),
    );
    unittest.expect(
      o.actualService!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expectedOutputUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expectedRedirectResponseCode!,
      unittest.equals(42),
    );
    unittest.expect(
      o.expectedService!,
      unittest.equals('foo'),
    );
    checkUnnamed1392(o.headers!);
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.path!,
      unittest.equals('foo'),
    );
  }
  buildCounterTestFailure--;
}

core.List<core.String> buildUnnamed1393() => [
      'foo',
      'foo',
    ];

void checkUnnamed1393(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTestPermissionsRequest = 0;
api.TestPermissionsRequest buildTestPermissionsRequest() {
  final o = api.TestPermissionsRequest();
  buildCounterTestPermissionsRequest++;
  if (buildCounterTestPermissionsRequest < 3) {
    o.permissions = buildUnnamed1393();
  }
  buildCounterTestPermissionsRequest--;
  return o;
}

void checkTestPermissionsRequest(api.TestPermissionsRequest o) {
  buildCounterTestPermissionsRequest++;
  if (buildCounterTestPermissionsRequest < 3) {
    checkUnnamed1393(o.permissions!);
  }
  buildCounterTestPermissionsRequest--;
}

core.List<core.String> buildUnnamed1394() => [
      'foo',
      'foo',
    ];

void checkUnnamed1394(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterTestPermissionsResponse = 0;
api.TestPermissionsResponse buildTestPermissionsResponse() {
  final o = api.TestPermissionsResponse();
  buildCounterTestPermissionsResponse++;
  if (buildCounterTestPermissionsResponse < 3) {
    o.permissions = buildUnnamed1394();
  }
  buildCounterTestPermissionsResponse--;
  return o;
}

void checkTestPermissionsResponse(api.TestPermissionsResponse o) {
  buildCounterTestPermissionsResponse++;
  if (buildCounterTestPermissionsResponse < 3) {
    checkUnnamed1394(o.permissions!);
  }
  buildCounterTestPermissionsResponse--;
}

core.int buildCounterUint128 = 0;
api.Uint128 buildUint128() {
  final o = api.Uint128();
  buildCounterUint128++;
  if (buildCounterUint128 < 3) {
    o.high = 'foo';
    o.low = 'foo';
  }
  buildCounterUint128--;
  return o;
}

void checkUint128(api.Uint128 o) {
  buildCounterUint128++;
  if (buildCounterUint128 < 3) {
    unittest.expect(
      o.high!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.low!,
      unittest.equals('foo'),
    );
  }
  buildCounterUint128--;
}

core.List<api.HostRule> buildUnnamed1395() => [
      buildHostRule(),
      buildHostRule(),
    ];

void checkUnnamed1395(core.List<api.HostRule> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkHostRule(o[0]);
  checkHostRule(o[1]);
}

core.List<api.PathMatcher> buildUnnamed1396() => [
      buildPathMatcher(),
      buildPathMatcher(),
    ];

void checkUnnamed1396(core.List<api.PathMatcher> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkPathMatcher(o[0]);
  checkPathMatcher(o[1]);
}

core.List<api.UrlMapTest> buildUnnamed1397() => [
      buildUrlMapTest(),
      buildUrlMapTest(),
    ];

void checkUnnamed1397(core.List<api.UrlMapTest> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapTest(o[0]);
  checkUrlMapTest(o[1]);
}

core.int buildCounterUrlMap = 0;
api.UrlMap buildUrlMap() {
  final o = api.UrlMap();
  buildCounterUrlMap++;
  if (buildCounterUrlMap < 3) {
    o.creationTimestamp = 'foo';
    o.defaultRouteAction = buildHttpRouteAction();
    o.defaultService = 'foo';
    o.defaultUrlRedirect = buildHttpRedirectAction();
    o.description = 'foo';
    o.fingerprint = 'foo';
    o.headerAction = buildHttpHeaderAction();
    o.hostRules = buildUnnamed1395();
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.pathMatchers = buildUnnamed1396();
    o.region = 'foo';
    o.selfLink = 'foo';
    o.tests = buildUnnamed1397();
  }
  buildCounterUrlMap--;
  return o;
}

void checkUrlMap(api.UrlMap o) {
  buildCounterUrlMap++;
  if (buildCounterUrlMap < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkHttpRouteAction(o.defaultRouteAction!);
    unittest.expect(
      o.defaultService!,
      unittest.equals('foo'),
    );
    checkHttpRedirectAction(o.defaultUrlRedirect!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.fingerprint!,
      unittest.equals('foo'),
    );
    checkHttpHeaderAction(o.headerAction!);
    checkUnnamed1395(o.hostRules!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    checkUnnamed1396(o.pathMatchers!);
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1397(o.tests!);
  }
  buildCounterUrlMap--;
}

core.List<api.UrlMap> buildUnnamed1398() => [
      buildUrlMap(),
      buildUrlMap(),
    ];

void checkUnnamed1398(core.List<api.UrlMap> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMap(o[0]);
  checkUrlMap(o[1]);
}

core.int buildCounterUrlMapListWarningData = 0;
api.UrlMapListWarningData buildUrlMapListWarningData() {
  final o = api.UrlMapListWarningData();
  buildCounterUrlMapListWarningData++;
  if (buildCounterUrlMapListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterUrlMapListWarningData--;
  return o;
}

void checkUrlMapListWarningData(api.UrlMapListWarningData o) {
  buildCounterUrlMapListWarningData++;
  if (buildCounterUrlMapListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapListWarningData--;
}

core.List<api.UrlMapListWarningData> buildUnnamed1399() => [
      buildUrlMapListWarningData(),
      buildUrlMapListWarningData(),
    ];

void checkUnnamed1399(core.List<api.UrlMapListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapListWarningData(o[0]);
  checkUrlMapListWarningData(o[1]);
}

core.int buildCounterUrlMapListWarning = 0;
api.UrlMapListWarning buildUrlMapListWarning() {
  final o = api.UrlMapListWarning();
  buildCounterUrlMapListWarning++;
  if (buildCounterUrlMapListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1399();
    o.message = 'foo';
  }
  buildCounterUrlMapListWarning--;
  return o;
}

void checkUrlMapListWarning(api.UrlMapListWarning o) {
  buildCounterUrlMapListWarning++;
  if (buildCounterUrlMapListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1399(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapListWarning--;
}

core.int buildCounterUrlMapList = 0;
api.UrlMapList buildUrlMapList() {
  final o = api.UrlMapList();
  buildCounterUrlMapList++;
  if (buildCounterUrlMapList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1398();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildUrlMapListWarning();
  }
  buildCounterUrlMapList--;
  return o;
}

void checkUrlMapList(api.UrlMapList o) {
  buildCounterUrlMapList++;
  if (buildCounterUrlMapList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1398(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUrlMapListWarning(o.warning!);
  }
  buildCounterUrlMapList--;
}

core.int buildCounterUrlMapReference = 0;
api.UrlMapReference buildUrlMapReference() {
  final o = api.UrlMapReference();
  buildCounterUrlMapReference++;
  if (buildCounterUrlMapReference < 3) {
    o.urlMap = 'foo';
  }
  buildCounterUrlMapReference--;
  return o;
}

void checkUrlMapReference(api.UrlMapReference o) {
  buildCounterUrlMapReference++;
  if (buildCounterUrlMapReference < 3) {
    unittest.expect(
      o.urlMap!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapReference--;
}

core.List<api.UrlMapTestHeader> buildUnnamed1400() => [
      buildUrlMapTestHeader(),
      buildUrlMapTestHeader(),
    ];

void checkUnnamed1400(core.List<api.UrlMapTestHeader> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapTestHeader(o[0]);
  checkUrlMapTestHeader(o[1]);
}

core.int buildCounterUrlMapTest = 0;
api.UrlMapTest buildUrlMapTest() {
  final o = api.UrlMapTest();
  buildCounterUrlMapTest++;
  if (buildCounterUrlMapTest < 3) {
    o.description = 'foo';
    o.expectedOutputUrl = 'foo';
    o.expectedRedirectResponseCode = 42;
    o.headers = buildUnnamed1400();
    o.host = 'foo';
    o.path = 'foo';
    o.service = 'foo';
  }
  buildCounterUrlMapTest--;
  return o;
}

void checkUrlMapTest(api.UrlMapTest o) {
  buildCounterUrlMapTest++;
  if (buildCounterUrlMapTest < 3) {
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expectedOutputUrl!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.expectedRedirectResponseCode!,
      unittest.equals(42),
    );
    checkUnnamed1400(o.headers!);
    unittest.expect(
      o.host!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.path!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.service!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapTest--;
}

core.int buildCounterUrlMapTestHeader = 0;
api.UrlMapTestHeader buildUrlMapTestHeader() {
  final o = api.UrlMapTestHeader();
  buildCounterUrlMapTestHeader++;
  if (buildCounterUrlMapTestHeader < 3) {
    o.name = 'foo';
    o.value = 'foo';
  }
  buildCounterUrlMapTestHeader--;
  return o;
}

void checkUrlMapTestHeader(api.UrlMapTestHeader o) {
  buildCounterUrlMapTestHeader++;
  if (buildCounterUrlMapTestHeader < 3) {
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapTestHeader--;
}

core.List<core.String> buildUnnamed1401() => [
      'foo',
      'foo',
    ];

void checkUnnamed1401(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.TestFailure> buildUnnamed1402() => [
      buildTestFailure(),
      buildTestFailure(),
    ];

void checkUnnamed1402(core.List<api.TestFailure> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkTestFailure(o[0]);
  checkTestFailure(o[1]);
}

core.int buildCounterUrlMapValidationResult = 0;
api.UrlMapValidationResult buildUrlMapValidationResult() {
  final o = api.UrlMapValidationResult();
  buildCounterUrlMapValidationResult++;
  if (buildCounterUrlMapValidationResult < 3) {
    o.loadErrors = buildUnnamed1401();
    o.loadSucceeded = true;
    o.testFailures = buildUnnamed1402();
    o.testPassed = true;
  }
  buildCounterUrlMapValidationResult--;
  return o;
}

void checkUrlMapValidationResult(api.UrlMapValidationResult o) {
  buildCounterUrlMapValidationResult++;
  if (buildCounterUrlMapValidationResult < 3) {
    checkUnnamed1401(o.loadErrors!);
    unittest.expect(o.loadSucceeded!, unittest.isTrue);
    checkUnnamed1402(o.testFailures!);
    unittest.expect(o.testPassed!, unittest.isTrue);
  }
  buildCounterUrlMapValidationResult--;
}

core.Map<core.String, api.UrlMapsScopedList> buildUnnamed1403() => {
      'x': buildUrlMapsScopedList(),
      'y': buildUrlMapsScopedList(),
    };

void checkUnnamed1403(core.Map<core.String, api.UrlMapsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapsScopedList(o['x']!);
  checkUrlMapsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1404() => [
      'foo',
      'foo',
    ];

void checkUnnamed1404(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterUrlMapsAggregatedListWarningData = 0;
api.UrlMapsAggregatedListWarningData buildUrlMapsAggregatedListWarningData() {
  final o = api.UrlMapsAggregatedListWarningData();
  buildCounterUrlMapsAggregatedListWarningData++;
  if (buildCounterUrlMapsAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterUrlMapsAggregatedListWarningData--;
  return o;
}

void checkUrlMapsAggregatedListWarningData(
    api.UrlMapsAggregatedListWarningData o) {
  buildCounterUrlMapsAggregatedListWarningData++;
  if (buildCounterUrlMapsAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapsAggregatedListWarningData--;
}

core.List<api.UrlMapsAggregatedListWarningData> buildUnnamed1405() => [
      buildUrlMapsAggregatedListWarningData(),
      buildUrlMapsAggregatedListWarningData(),
    ];

void checkUnnamed1405(core.List<api.UrlMapsAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapsAggregatedListWarningData(o[0]);
  checkUrlMapsAggregatedListWarningData(o[1]);
}

core.int buildCounterUrlMapsAggregatedListWarning = 0;
api.UrlMapsAggregatedListWarning buildUrlMapsAggregatedListWarning() {
  final o = api.UrlMapsAggregatedListWarning();
  buildCounterUrlMapsAggregatedListWarning++;
  if (buildCounterUrlMapsAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1405();
    o.message = 'foo';
  }
  buildCounterUrlMapsAggregatedListWarning--;
  return o;
}

void checkUrlMapsAggregatedListWarning(api.UrlMapsAggregatedListWarning o) {
  buildCounterUrlMapsAggregatedListWarning++;
  if (buildCounterUrlMapsAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1405(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapsAggregatedListWarning--;
}

core.int buildCounterUrlMapsAggregatedList = 0;
api.UrlMapsAggregatedList buildUrlMapsAggregatedList() {
  final o = api.UrlMapsAggregatedList();
  buildCounterUrlMapsAggregatedList++;
  if (buildCounterUrlMapsAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1403();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1404();
    o.warning = buildUrlMapsAggregatedListWarning();
  }
  buildCounterUrlMapsAggregatedList--;
  return o;
}

void checkUrlMapsAggregatedList(api.UrlMapsAggregatedList o) {
  buildCounterUrlMapsAggregatedList++;
  if (buildCounterUrlMapsAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1403(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1404(o.unreachables!);
    checkUrlMapsAggregatedListWarning(o.warning!);
  }
  buildCounterUrlMapsAggregatedList--;
}

core.List<api.UrlMap> buildUnnamed1406() => [
      buildUrlMap(),
      buildUrlMap(),
    ];

void checkUnnamed1406(core.List<api.UrlMap> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMap(o[0]);
  checkUrlMap(o[1]);
}

core.int buildCounterUrlMapsScopedListWarningData = 0;
api.UrlMapsScopedListWarningData buildUrlMapsScopedListWarningData() {
  final o = api.UrlMapsScopedListWarningData();
  buildCounterUrlMapsScopedListWarningData++;
  if (buildCounterUrlMapsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterUrlMapsScopedListWarningData--;
  return o;
}

void checkUrlMapsScopedListWarningData(api.UrlMapsScopedListWarningData o) {
  buildCounterUrlMapsScopedListWarningData++;
  if (buildCounterUrlMapsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapsScopedListWarningData--;
}

core.List<api.UrlMapsScopedListWarningData> buildUnnamed1407() => [
      buildUrlMapsScopedListWarningData(),
      buildUrlMapsScopedListWarningData(),
    ];

void checkUnnamed1407(core.List<api.UrlMapsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUrlMapsScopedListWarningData(o[0]);
  checkUrlMapsScopedListWarningData(o[1]);
}

core.int buildCounterUrlMapsScopedListWarning = 0;
api.UrlMapsScopedListWarning buildUrlMapsScopedListWarning() {
  final o = api.UrlMapsScopedListWarning();
  buildCounterUrlMapsScopedListWarning++;
  if (buildCounterUrlMapsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1407();
    o.message = 'foo';
  }
  buildCounterUrlMapsScopedListWarning--;
  return o;
}

void checkUrlMapsScopedListWarning(api.UrlMapsScopedListWarning o) {
  buildCounterUrlMapsScopedListWarning++;
  if (buildCounterUrlMapsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1407(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlMapsScopedListWarning--;
}

core.int buildCounterUrlMapsScopedList = 0;
api.UrlMapsScopedList buildUrlMapsScopedList() {
  final o = api.UrlMapsScopedList();
  buildCounterUrlMapsScopedList++;
  if (buildCounterUrlMapsScopedList < 3) {
    o.urlMaps = buildUnnamed1406();
    o.warning = buildUrlMapsScopedListWarning();
  }
  buildCounterUrlMapsScopedList--;
  return o;
}

void checkUrlMapsScopedList(api.UrlMapsScopedList o) {
  buildCounterUrlMapsScopedList++;
  if (buildCounterUrlMapsScopedList < 3) {
    checkUnnamed1406(o.urlMaps!);
    checkUrlMapsScopedListWarning(o.warning!);
  }
  buildCounterUrlMapsScopedList--;
}

core.int buildCounterUrlMapsValidateRequest = 0;
api.UrlMapsValidateRequest buildUrlMapsValidateRequest() {
  final o = api.UrlMapsValidateRequest();
  buildCounterUrlMapsValidateRequest++;
  if (buildCounterUrlMapsValidateRequest < 3) {
    o.resource = buildUrlMap();
  }
  buildCounterUrlMapsValidateRequest--;
  return o;
}

void checkUrlMapsValidateRequest(api.UrlMapsValidateRequest o) {
  buildCounterUrlMapsValidateRequest++;
  if (buildCounterUrlMapsValidateRequest < 3) {
    checkUrlMap(o.resource!);
  }
  buildCounterUrlMapsValidateRequest--;
}

core.int buildCounterUrlMapsValidateResponse = 0;
api.UrlMapsValidateResponse buildUrlMapsValidateResponse() {
  final o = api.UrlMapsValidateResponse();
  buildCounterUrlMapsValidateResponse++;
  if (buildCounterUrlMapsValidateResponse < 3) {
    o.result = buildUrlMapValidationResult();
  }
  buildCounterUrlMapsValidateResponse--;
  return o;
}

void checkUrlMapsValidateResponse(api.UrlMapsValidateResponse o) {
  buildCounterUrlMapsValidateResponse++;
  if (buildCounterUrlMapsValidateResponse < 3) {
    checkUrlMapValidationResult(o.result!);
  }
  buildCounterUrlMapsValidateResponse--;
}

core.int buildCounterUrlRewrite = 0;
api.UrlRewrite buildUrlRewrite() {
  final o = api.UrlRewrite();
  buildCounterUrlRewrite++;
  if (buildCounterUrlRewrite < 3) {
    o.hostRewrite = 'foo';
    o.pathPrefixRewrite = 'foo';
  }
  buildCounterUrlRewrite--;
  return o;
}

void checkUrlRewrite(api.UrlRewrite o) {
  buildCounterUrlRewrite++;
  if (buildCounterUrlRewrite < 3) {
    unittest.expect(
      o.hostRewrite!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.pathPrefixRewrite!,
      unittest.equals('foo'),
    );
  }
  buildCounterUrlRewrite--;
}

core.List<api.UsableSubnetworkSecondaryRange> buildUnnamed1408() => [
      buildUsableSubnetworkSecondaryRange(),
      buildUsableSubnetworkSecondaryRange(),
    ];

void checkUnnamed1408(core.List<api.UsableSubnetworkSecondaryRange> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUsableSubnetworkSecondaryRange(o[0]);
  checkUsableSubnetworkSecondaryRange(o[1]);
}

core.int buildCounterUsableSubnetwork = 0;
api.UsableSubnetwork buildUsableSubnetwork() {
  final o = api.UsableSubnetwork();
  buildCounterUsableSubnetwork++;
  if (buildCounterUsableSubnetwork < 3) {
    o.ipCidrRange = 'foo';
    o.network = 'foo';
    o.secondaryIpRanges = buildUnnamed1408();
    o.subnetwork = 'foo';
  }
  buildCounterUsableSubnetwork--;
  return o;
}

void checkUsableSubnetwork(api.UsableSubnetwork o) {
  buildCounterUsableSubnetwork++;
  if (buildCounterUsableSubnetwork < 3) {
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    checkUnnamed1408(o.secondaryIpRanges!);
    unittest.expect(
      o.subnetwork!,
      unittest.equals('foo'),
    );
  }
  buildCounterUsableSubnetwork--;
}

core.int buildCounterUsableSubnetworkSecondaryRange = 0;
api.UsableSubnetworkSecondaryRange buildUsableSubnetworkSecondaryRange() {
  final o = api.UsableSubnetworkSecondaryRange();
  buildCounterUsableSubnetworkSecondaryRange++;
  if (buildCounterUsableSubnetworkSecondaryRange < 3) {
    o.ipCidrRange = 'foo';
    o.rangeName = 'foo';
  }
  buildCounterUsableSubnetworkSecondaryRange--;
  return o;
}

void checkUsableSubnetworkSecondaryRange(api.UsableSubnetworkSecondaryRange o) {
  buildCounterUsableSubnetworkSecondaryRange++;
  if (buildCounterUsableSubnetworkSecondaryRange < 3) {
    unittest.expect(
      o.ipCidrRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.rangeName!,
      unittest.equals('foo'),
    );
  }
  buildCounterUsableSubnetworkSecondaryRange--;
}

core.List<api.UsableSubnetwork> buildUnnamed1409() => [
      buildUsableSubnetwork(),
      buildUsableSubnetwork(),
    ];

void checkUnnamed1409(core.List<api.UsableSubnetwork> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUsableSubnetwork(o[0]);
  checkUsableSubnetwork(o[1]);
}

core.int buildCounterUsableSubnetworksAggregatedListWarningData = 0;
api.UsableSubnetworksAggregatedListWarningData
    buildUsableSubnetworksAggregatedListWarningData() {
  final o = api.UsableSubnetworksAggregatedListWarningData();
  buildCounterUsableSubnetworksAggregatedListWarningData++;
  if (buildCounterUsableSubnetworksAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterUsableSubnetworksAggregatedListWarningData--;
  return o;
}

void checkUsableSubnetworksAggregatedListWarningData(
    api.UsableSubnetworksAggregatedListWarningData o) {
  buildCounterUsableSubnetworksAggregatedListWarningData++;
  if (buildCounterUsableSubnetworksAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterUsableSubnetworksAggregatedListWarningData--;
}

core.List<api.UsableSubnetworksAggregatedListWarningData> buildUnnamed1410() =>
    [
      buildUsableSubnetworksAggregatedListWarningData(),
      buildUsableSubnetworksAggregatedListWarningData(),
    ];

void checkUnnamed1410(
    core.List<api.UsableSubnetworksAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkUsableSubnetworksAggregatedListWarningData(o[0]);
  checkUsableSubnetworksAggregatedListWarningData(o[1]);
}

core.int buildCounterUsableSubnetworksAggregatedListWarning = 0;
api.UsableSubnetworksAggregatedListWarning
    buildUsableSubnetworksAggregatedListWarning() {
  final o = api.UsableSubnetworksAggregatedListWarning();
  buildCounterUsableSubnetworksAggregatedListWarning++;
  if (buildCounterUsableSubnetworksAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1410();
    o.message = 'foo';
  }
  buildCounterUsableSubnetworksAggregatedListWarning--;
  return o;
}

void checkUsableSubnetworksAggregatedListWarning(
    api.UsableSubnetworksAggregatedListWarning o) {
  buildCounterUsableSubnetworksAggregatedListWarning++;
  if (buildCounterUsableSubnetworksAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1410(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterUsableSubnetworksAggregatedListWarning--;
}

core.int buildCounterUsableSubnetworksAggregatedList = 0;
api.UsableSubnetworksAggregatedList buildUsableSubnetworksAggregatedList() {
  final o = api.UsableSubnetworksAggregatedList();
  buildCounterUsableSubnetworksAggregatedList++;
  if (buildCounterUsableSubnetworksAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1409();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildUsableSubnetworksAggregatedListWarning();
  }
  buildCounterUsableSubnetworksAggregatedList--;
  return o;
}

void checkUsableSubnetworksAggregatedList(
    api.UsableSubnetworksAggregatedList o) {
  buildCounterUsableSubnetworksAggregatedList++;
  if (buildCounterUsableSubnetworksAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1409(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUsableSubnetworksAggregatedListWarning(o.warning!);
  }
  buildCounterUsableSubnetworksAggregatedList--;
}

core.int buildCounterUsageExportLocation = 0;
api.UsageExportLocation buildUsageExportLocation() {
  final o = api.UsageExportLocation();
  buildCounterUsageExportLocation++;
  if (buildCounterUsageExportLocation < 3) {
    o.bucketName = 'foo';
    o.reportNamePrefix = 'foo';
  }
  buildCounterUsageExportLocation--;
  return o;
}

void checkUsageExportLocation(api.UsageExportLocation o) {
  buildCounterUsageExportLocation++;
  if (buildCounterUsageExportLocation < 3) {
    unittest.expect(
      o.bucketName!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.reportNamePrefix!,
      unittest.equals('foo'),
    );
  }
  buildCounterUsageExportLocation--;
}

core.List<api.VmEndpointNatMappingsInterfaceNatMappings> buildUnnamed1411() => [
      buildVmEndpointNatMappingsInterfaceNatMappings(),
      buildVmEndpointNatMappingsInterfaceNatMappings(),
    ];

void checkUnnamed1411(
    core.List<api.VmEndpointNatMappingsInterfaceNatMappings> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVmEndpointNatMappingsInterfaceNatMappings(o[0]);
  checkVmEndpointNatMappingsInterfaceNatMappings(o[1]);
}

core.int buildCounterVmEndpointNatMappings = 0;
api.VmEndpointNatMappings buildVmEndpointNatMappings() {
  final o = api.VmEndpointNatMappings();
  buildCounterVmEndpointNatMappings++;
  if (buildCounterVmEndpointNatMappings < 3) {
    o.instanceName = 'foo';
    o.interfaceNatMappings = buildUnnamed1411();
  }
  buildCounterVmEndpointNatMappings--;
  return o;
}

void checkVmEndpointNatMappings(api.VmEndpointNatMappings o) {
  buildCounterVmEndpointNatMappings++;
  if (buildCounterVmEndpointNatMappings < 3) {
    unittest.expect(
      o.instanceName!,
      unittest.equals('foo'),
    );
    checkUnnamed1411(o.interfaceNatMappings!);
  }
  buildCounterVmEndpointNatMappings--;
}

core.List<core.String> buildUnnamed1412() => [
      'foo',
      'foo',
    ];

void checkUnnamed1412(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1413() => [
      'foo',
      'foo',
    ];

void checkUnnamed1413(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterVmEndpointNatMappingsInterfaceNatMappings = 0;
api.VmEndpointNatMappingsInterfaceNatMappings
    buildVmEndpointNatMappingsInterfaceNatMappings() {
  final o = api.VmEndpointNatMappingsInterfaceNatMappings();
  buildCounterVmEndpointNatMappingsInterfaceNatMappings++;
  if (buildCounterVmEndpointNatMappingsInterfaceNatMappings < 3) {
    o.drainNatIpPortRanges = buildUnnamed1412();
    o.natIpPortRanges = buildUnnamed1413();
    o.numTotalDrainNatPorts = 42;
    o.numTotalNatPorts = 42;
    o.sourceAliasIpRange = 'foo';
    o.sourceVirtualIp = 'foo';
  }
  buildCounterVmEndpointNatMappingsInterfaceNatMappings--;
  return o;
}

void checkVmEndpointNatMappingsInterfaceNatMappings(
    api.VmEndpointNatMappingsInterfaceNatMappings o) {
  buildCounterVmEndpointNatMappingsInterfaceNatMappings++;
  if (buildCounterVmEndpointNatMappingsInterfaceNatMappings < 3) {
    checkUnnamed1412(o.drainNatIpPortRanges!);
    checkUnnamed1413(o.natIpPortRanges!);
    unittest.expect(
      o.numTotalDrainNatPorts!,
      unittest.equals(42),
    );
    unittest.expect(
      o.numTotalNatPorts!,
      unittest.equals(42),
    );
    unittest.expect(
      o.sourceAliasIpRange!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sourceVirtualIp!,
      unittest.equals('foo'),
    );
  }
  buildCounterVmEndpointNatMappingsInterfaceNatMappings--;
}

core.List<api.VmEndpointNatMappings> buildUnnamed1414() => [
      buildVmEndpointNatMappings(),
      buildVmEndpointNatMappings(),
    ];

void checkUnnamed1414(core.List<api.VmEndpointNatMappings> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVmEndpointNatMappings(o[0]);
  checkVmEndpointNatMappings(o[1]);
}

core.int buildCounterVmEndpointNatMappingsListWarningData = 0;
api.VmEndpointNatMappingsListWarningData
    buildVmEndpointNatMappingsListWarningData() {
  final o = api.VmEndpointNatMappingsListWarningData();
  buildCounterVmEndpointNatMappingsListWarningData++;
  if (buildCounterVmEndpointNatMappingsListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVmEndpointNatMappingsListWarningData--;
  return o;
}

void checkVmEndpointNatMappingsListWarningData(
    api.VmEndpointNatMappingsListWarningData o) {
  buildCounterVmEndpointNatMappingsListWarningData++;
  if (buildCounterVmEndpointNatMappingsListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVmEndpointNatMappingsListWarningData--;
}

core.List<api.VmEndpointNatMappingsListWarningData> buildUnnamed1415() => [
      buildVmEndpointNatMappingsListWarningData(),
      buildVmEndpointNatMappingsListWarningData(),
    ];

void checkUnnamed1415(core.List<api.VmEndpointNatMappingsListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVmEndpointNatMappingsListWarningData(o[0]);
  checkVmEndpointNatMappingsListWarningData(o[1]);
}

core.int buildCounterVmEndpointNatMappingsListWarning = 0;
api.VmEndpointNatMappingsListWarning buildVmEndpointNatMappingsListWarning() {
  final o = api.VmEndpointNatMappingsListWarning();
  buildCounterVmEndpointNatMappingsListWarning++;
  if (buildCounterVmEndpointNatMappingsListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1415();
    o.message = 'foo';
  }
  buildCounterVmEndpointNatMappingsListWarning--;
  return o;
}

void checkVmEndpointNatMappingsListWarning(
    api.VmEndpointNatMappingsListWarning o) {
  buildCounterVmEndpointNatMappingsListWarning++;
  if (buildCounterVmEndpointNatMappingsListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1415(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVmEndpointNatMappingsListWarning--;
}

core.int buildCounterVmEndpointNatMappingsList = 0;
api.VmEndpointNatMappingsList buildVmEndpointNatMappingsList() {
  final o = api.VmEndpointNatMappingsList();
  buildCounterVmEndpointNatMappingsList++;
  if (buildCounterVmEndpointNatMappingsList < 3) {
    o.id = 'foo';
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.result = buildUnnamed1414();
    o.selfLink = 'foo';
    o.warning = buildVmEndpointNatMappingsListWarning();
  }
  buildCounterVmEndpointNatMappingsList--;
  return o;
}

void checkVmEndpointNatMappingsList(api.VmEndpointNatMappingsList o) {
  buildCounterVmEndpointNatMappingsList++;
  if (buildCounterVmEndpointNatMappingsList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    checkUnnamed1414(o.result!);
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkVmEndpointNatMappingsListWarning(o.warning!);
  }
  buildCounterVmEndpointNatMappingsList--;
}

core.Map<core.String, core.String> buildUnnamed1416() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1416(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.List<api.VpnGatewayVpnGatewayInterface> buildUnnamed1417() => [
      buildVpnGatewayVpnGatewayInterface(),
      buildVpnGatewayVpnGatewayInterface(),
    ];

void checkUnnamed1417(core.List<api.VpnGatewayVpnGatewayInterface> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewayVpnGatewayInterface(o[0]);
  checkVpnGatewayVpnGatewayInterface(o[1]);
}

core.int buildCounterVpnGateway = 0;
api.VpnGateway buildVpnGateway() {
  final o = api.VpnGateway();
  buildCounterVpnGateway++;
  if (buildCounterVpnGateway < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed1416();
    o.name = 'foo';
    o.network = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.vpnInterfaces = buildUnnamed1417();
  }
  buildCounterVpnGateway--;
  return o;
}

void checkVpnGateway(api.VpnGateway o) {
  buildCounterVpnGateway++;
  if (buildCounterVpnGateway < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1416(o.labels!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.network!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1417(o.vpnInterfaces!);
  }
  buildCounterVpnGateway--;
}

core.Map<core.String, api.VpnGatewaysScopedList> buildUnnamed1418() => {
      'x': buildVpnGatewaysScopedList(),
      'y': buildVpnGatewaysScopedList(),
    };

void checkUnnamed1418(core.Map<core.String, api.VpnGatewaysScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewaysScopedList(o['x']!);
  checkVpnGatewaysScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1419() => [
      'foo',
      'foo',
    ];

void checkUnnamed1419(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterVpnGatewayAggregatedListWarningData = 0;
api.VpnGatewayAggregatedListWarningData
    buildVpnGatewayAggregatedListWarningData() {
  final o = api.VpnGatewayAggregatedListWarningData();
  buildCounterVpnGatewayAggregatedListWarningData++;
  if (buildCounterVpnGatewayAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnGatewayAggregatedListWarningData--;
  return o;
}

void checkVpnGatewayAggregatedListWarningData(
    api.VpnGatewayAggregatedListWarningData o) {
  buildCounterVpnGatewayAggregatedListWarningData++;
  if (buildCounterVpnGatewayAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayAggregatedListWarningData--;
}

core.List<api.VpnGatewayAggregatedListWarningData> buildUnnamed1420() => [
      buildVpnGatewayAggregatedListWarningData(),
      buildVpnGatewayAggregatedListWarningData(),
    ];

void checkUnnamed1420(core.List<api.VpnGatewayAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewayAggregatedListWarningData(o[0]);
  checkVpnGatewayAggregatedListWarningData(o[1]);
}

core.int buildCounterVpnGatewayAggregatedListWarning = 0;
api.VpnGatewayAggregatedListWarning buildVpnGatewayAggregatedListWarning() {
  final o = api.VpnGatewayAggregatedListWarning();
  buildCounterVpnGatewayAggregatedListWarning++;
  if (buildCounterVpnGatewayAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1420();
    o.message = 'foo';
  }
  buildCounterVpnGatewayAggregatedListWarning--;
  return o;
}

void checkVpnGatewayAggregatedListWarning(
    api.VpnGatewayAggregatedListWarning o) {
  buildCounterVpnGatewayAggregatedListWarning++;
  if (buildCounterVpnGatewayAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1420(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayAggregatedListWarning--;
}

core.int buildCounterVpnGatewayAggregatedList = 0;
api.VpnGatewayAggregatedList buildVpnGatewayAggregatedList() {
  final o = api.VpnGatewayAggregatedList();
  buildCounterVpnGatewayAggregatedList++;
  if (buildCounterVpnGatewayAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1418();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1419();
    o.warning = buildVpnGatewayAggregatedListWarning();
  }
  buildCounterVpnGatewayAggregatedList--;
  return o;
}

void checkVpnGatewayAggregatedList(api.VpnGatewayAggregatedList o) {
  buildCounterVpnGatewayAggregatedList++;
  if (buildCounterVpnGatewayAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1418(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1419(o.unreachables!);
    checkVpnGatewayAggregatedListWarning(o.warning!);
  }
  buildCounterVpnGatewayAggregatedList--;
}

core.List<api.VpnGateway> buildUnnamed1421() => [
      buildVpnGateway(),
      buildVpnGateway(),
    ];

void checkUnnamed1421(core.List<api.VpnGateway> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGateway(o[0]);
  checkVpnGateway(o[1]);
}

core.int buildCounterVpnGatewayListWarningData = 0;
api.VpnGatewayListWarningData buildVpnGatewayListWarningData() {
  final o = api.VpnGatewayListWarningData();
  buildCounterVpnGatewayListWarningData++;
  if (buildCounterVpnGatewayListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnGatewayListWarningData--;
  return o;
}

void checkVpnGatewayListWarningData(api.VpnGatewayListWarningData o) {
  buildCounterVpnGatewayListWarningData++;
  if (buildCounterVpnGatewayListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayListWarningData--;
}

core.List<api.VpnGatewayListWarningData> buildUnnamed1422() => [
      buildVpnGatewayListWarningData(),
      buildVpnGatewayListWarningData(),
    ];

void checkUnnamed1422(core.List<api.VpnGatewayListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewayListWarningData(o[0]);
  checkVpnGatewayListWarningData(o[1]);
}

core.int buildCounterVpnGatewayListWarning = 0;
api.VpnGatewayListWarning buildVpnGatewayListWarning() {
  final o = api.VpnGatewayListWarning();
  buildCounterVpnGatewayListWarning++;
  if (buildCounterVpnGatewayListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1422();
    o.message = 'foo';
  }
  buildCounterVpnGatewayListWarning--;
  return o;
}

void checkVpnGatewayListWarning(api.VpnGatewayListWarning o) {
  buildCounterVpnGatewayListWarning++;
  if (buildCounterVpnGatewayListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1422(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayListWarning--;
}

core.int buildCounterVpnGatewayList = 0;
api.VpnGatewayList buildVpnGatewayList() {
  final o = api.VpnGatewayList();
  buildCounterVpnGatewayList++;
  if (buildCounterVpnGatewayList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1421();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildVpnGatewayListWarning();
  }
  buildCounterVpnGatewayList--;
  return o;
}

void checkVpnGatewayList(api.VpnGatewayList o) {
  buildCounterVpnGatewayList++;
  if (buildCounterVpnGatewayList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1421(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkVpnGatewayListWarning(o.warning!);
  }
  buildCounterVpnGatewayList--;
}

core.List<api.VpnGatewayStatusVpnConnection> buildUnnamed1423() => [
      buildVpnGatewayStatusVpnConnection(),
      buildVpnGatewayStatusVpnConnection(),
    ];

void checkUnnamed1423(core.List<api.VpnGatewayStatusVpnConnection> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewayStatusVpnConnection(o[0]);
  checkVpnGatewayStatusVpnConnection(o[1]);
}

core.int buildCounterVpnGatewayStatus = 0;
api.VpnGatewayStatus buildVpnGatewayStatus() {
  final o = api.VpnGatewayStatus();
  buildCounterVpnGatewayStatus++;
  if (buildCounterVpnGatewayStatus < 3) {
    o.vpnConnections = buildUnnamed1423();
  }
  buildCounterVpnGatewayStatus--;
  return o;
}

void checkVpnGatewayStatus(api.VpnGatewayStatus o) {
  buildCounterVpnGatewayStatus++;
  if (buildCounterVpnGatewayStatus < 3) {
    checkUnnamed1423(o.vpnConnections!);
  }
  buildCounterVpnGatewayStatus--;
}

core.int buildCounterVpnGatewayStatusHighAvailabilityRequirementState = 0;
api.VpnGatewayStatusHighAvailabilityRequirementState
    buildVpnGatewayStatusHighAvailabilityRequirementState() {
  final o = api.VpnGatewayStatusHighAvailabilityRequirementState();
  buildCounterVpnGatewayStatusHighAvailabilityRequirementState++;
  if (buildCounterVpnGatewayStatusHighAvailabilityRequirementState < 3) {
    o.state = 'foo';
    o.unsatisfiedReason = 'foo';
  }
  buildCounterVpnGatewayStatusHighAvailabilityRequirementState--;
  return o;
}

void checkVpnGatewayStatusHighAvailabilityRequirementState(
    api.VpnGatewayStatusHighAvailabilityRequirementState o) {
  buildCounterVpnGatewayStatusHighAvailabilityRequirementState++;
  if (buildCounterVpnGatewayStatusHighAvailabilityRequirementState < 3) {
    unittest.expect(
      o.state!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.unsatisfiedReason!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayStatusHighAvailabilityRequirementState--;
}

core.int buildCounterVpnGatewayStatusTunnel = 0;
api.VpnGatewayStatusTunnel buildVpnGatewayStatusTunnel() {
  final o = api.VpnGatewayStatusTunnel();
  buildCounterVpnGatewayStatusTunnel++;
  if (buildCounterVpnGatewayStatusTunnel < 3) {
    o.localGatewayInterface = 42;
    o.peerGatewayInterface = 42;
    o.tunnelUrl = 'foo';
  }
  buildCounterVpnGatewayStatusTunnel--;
  return o;
}

void checkVpnGatewayStatusTunnel(api.VpnGatewayStatusTunnel o) {
  buildCounterVpnGatewayStatusTunnel++;
  if (buildCounterVpnGatewayStatusTunnel < 3) {
    unittest.expect(
      o.localGatewayInterface!,
      unittest.equals(42),
    );
    unittest.expect(
      o.peerGatewayInterface!,
      unittest.equals(42),
    );
    unittest.expect(
      o.tunnelUrl!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayStatusTunnel--;
}

core.List<api.VpnGatewayStatusTunnel> buildUnnamed1424() => [
      buildVpnGatewayStatusTunnel(),
      buildVpnGatewayStatusTunnel(),
    ];

void checkUnnamed1424(core.List<api.VpnGatewayStatusTunnel> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewayStatusTunnel(o[0]);
  checkVpnGatewayStatusTunnel(o[1]);
}

core.int buildCounterVpnGatewayStatusVpnConnection = 0;
api.VpnGatewayStatusVpnConnection buildVpnGatewayStatusVpnConnection() {
  final o = api.VpnGatewayStatusVpnConnection();
  buildCounterVpnGatewayStatusVpnConnection++;
  if (buildCounterVpnGatewayStatusVpnConnection < 3) {
    o.peerExternalGateway = 'foo';
    o.peerGcpGateway = 'foo';
    o.state = buildVpnGatewayStatusHighAvailabilityRequirementState();
    o.tunnels = buildUnnamed1424();
  }
  buildCounterVpnGatewayStatusVpnConnection--;
  return o;
}

void checkVpnGatewayStatusVpnConnection(api.VpnGatewayStatusVpnConnection o) {
  buildCounterVpnGatewayStatusVpnConnection++;
  if (buildCounterVpnGatewayStatusVpnConnection < 3) {
    unittest.expect(
      o.peerExternalGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerGcpGateway!,
      unittest.equals('foo'),
    );
    checkVpnGatewayStatusHighAvailabilityRequirementState(o.state!);
    checkUnnamed1424(o.tunnels!);
  }
  buildCounterVpnGatewayStatusVpnConnection--;
}

core.int buildCounterVpnGatewayVpnGatewayInterface = 0;
api.VpnGatewayVpnGatewayInterface buildVpnGatewayVpnGatewayInterface() {
  final o = api.VpnGatewayVpnGatewayInterface();
  buildCounterVpnGatewayVpnGatewayInterface++;
  if (buildCounterVpnGatewayVpnGatewayInterface < 3) {
    o.id = 42;
    o.interconnectAttachment = 'foo';
    o.ipAddress = 'foo';
  }
  buildCounterVpnGatewayVpnGatewayInterface--;
  return o;
}

void checkVpnGatewayVpnGatewayInterface(api.VpnGatewayVpnGatewayInterface o) {
  buildCounterVpnGatewayVpnGatewayInterface++;
  if (buildCounterVpnGatewayVpnGatewayInterface < 3) {
    unittest.expect(
      o.id!,
      unittest.equals(42),
    );
    unittest.expect(
      o.interconnectAttachment!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ipAddress!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewayVpnGatewayInterface--;
}

core.int buildCounterVpnGatewaysGetStatusResponse = 0;
api.VpnGatewaysGetStatusResponse buildVpnGatewaysGetStatusResponse() {
  final o = api.VpnGatewaysGetStatusResponse();
  buildCounterVpnGatewaysGetStatusResponse++;
  if (buildCounterVpnGatewaysGetStatusResponse < 3) {
    o.result = buildVpnGatewayStatus();
  }
  buildCounterVpnGatewaysGetStatusResponse--;
  return o;
}

void checkVpnGatewaysGetStatusResponse(api.VpnGatewaysGetStatusResponse o) {
  buildCounterVpnGatewaysGetStatusResponse++;
  if (buildCounterVpnGatewaysGetStatusResponse < 3) {
    checkVpnGatewayStatus(o.result!);
  }
  buildCounterVpnGatewaysGetStatusResponse--;
}

core.List<api.VpnGateway> buildUnnamed1425() => [
      buildVpnGateway(),
      buildVpnGateway(),
    ];

void checkUnnamed1425(core.List<api.VpnGateway> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGateway(o[0]);
  checkVpnGateway(o[1]);
}

core.int buildCounterVpnGatewaysScopedListWarningData = 0;
api.VpnGatewaysScopedListWarningData buildVpnGatewaysScopedListWarningData() {
  final o = api.VpnGatewaysScopedListWarningData();
  buildCounterVpnGatewaysScopedListWarningData++;
  if (buildCounterVpnGatewaysScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnGatewaysScopedListWarningData--;
  return o;
}

void checkVpnGatewaysScopedListWarningData(
    api.VpnGatewaysScopedListWarningData o) {
  buildCounterVpnGatewaysScopedListWarningData++;
  if (buildCounterVpnGatewaysScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewaysScopedListWarningData--;
}

core.List<api.VpnGatewaysScopedListWarningData> buildUnnamed1426() => [
      buildVpnGatewaysScopedListWarningData(),
      buildVpnGatewaysScopedListWarningData(),
    ];

void checkUnnamed1426(core.List<api.VpnGatewaysScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnGatewaysScopedListWarningData(o[0]);
  checkVpnGatewaysScopedListWarningData(o[1]);
}

core.int buildCounterVpnGatewaysScopedListWarning = 0;
api.VpnGatewaysScopedListWarning buildVpnGatewaysScopedListWarning() {
  final o = api.VpnGatewaysScopedListWarning();
  buildCounterVpnGatewaysScopedListWarning++;
  if (buildCounterVpnGatewaysScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1426();
    o.message = 'foo';
  }
  buildCounterVpnGatewaysScopedListWarning--;
  return o;
}

void checkVpnGatewaysScopedListWarning(api.VpnGatewaysScopedListWarning o) {
  buildCounterVpnGatewaysScopedListWarning++;
  if (buildCounterVpnGatewaysScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1426(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnGatewaysScopedListWarning--;
}

core.int buildCounterVpnGatewaysScopedList = 0;
api.VpnGatewaysScopedList buildVpnGatewaysScopedList() {
  final o = api.VpnGatewaysScopedList();
  buildCounterVpnGatewaysScopedList++;
  if (buildCounterVpnGatewaysScopedList < 3) {
    o.vpnGateways = buildUnnamed1425();
    o.warning = buildVpnGatewaysScopedListWarning();
  }
  buildCounterVpnGatewaysScopedList--;
  return o;
}

void checkVpnGatewaysScopedList(api.VpnGatewaysScopedList o) {
  buildCounterVpnGatewaysScopedList++;
  if (buildCounterVpnGatewaysScopedList < 3) {
    checkUnnamed1425(o.vpnGateways!);
    checkVpnGatewaysScopedListWarning(o.warning!);
  }
  buildCounterVpnGatewaysScopedList--;
}

core.List<core.String> buildUnnamed1427() => [
      'foo',
      'foo',
    ];

void checkUnnamed1427(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<core.String> buildUnnamed1428() => [
      'foo',
      'foo',
    ];

void checkUnnamed1428(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterVpnTunnel = 0;
api.VpnTunnel buildVpnTunnel() {
  final o = api.VpnTunnel();
  buildCounterVpnTunnel++;
  if (buildCounterVpnTunnel < 3) {
    o.creationTimestamp = 'foo';
    o.description = 'foo';
    o.detailedStatus = 'foo';
    o.id = 'foo';
    o.ikeVersion = 42;
    o.kind = 'foo';
    o.localTrafficSelector = buildUnnamed1427();
    o.name = 'foo';
    o.peerExternalGateway = 'foo';
    o.peerExternalGatewayInterface = 42;
    o.peerGcpGateway = 'foo';
    o.peerIp = 'foo';
    o.region = 'foo';
    o.remoteTrafficSelector = buildUnnamed1428();
    o.router = 'foo';
    o.selfLink = 'foo';
    o.sharedSecret = 'foo';
    o.sharedSecretHash = 'foo';
    o.status = 'foo';
    o.targetVpnGateway = 'foo';
    o.vpnGateway = 'foo';
    o.vpnGatewayInterface = 42;
  }
  buildCounterVpnTunnel--;
  return o;
}

void checkVpnTunnel(api.VpnTunnel o) {
  buildCounterVpnTunnel++;
  if (buildCounterVpnTunnel < 3) {
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.detailedStatus!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.ikeVersion!,
      unittest.equals(42),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    checkUnnamed1427(o.localTrafficSelector!);
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerExternalGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerExternalGatewayInterface!,
      unittest.equals(42),
    );
    unittest.expect(
      o.peerGcpGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.peerIp!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    checkUnnamed1428(o.remoteTrafficSelector!);
    unittest.expect(
      o.router!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sharedSecret!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.sharedSecretHash!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.targetVpnGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.vpnGateway!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.vpnGatewayInterface!,
      unittest.equals(42),
    );
  }
  buildCounterVpnTunnel--;
}

core.Map<core.String, api.VpnTunnelsScopedList> buildUnnamed1429() => {
      'x': buildVpnTunnelsScopedList(),
      'y': buildVpnTunnelsScopedList(),
    };

void checkUnnamed1429(core.Map<core.String, api.VpnTunnelsScopedList> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnelsScopedList(o['x']!);
  checkVpnTunnelsScopedList(o['y']!);
}

core.List<core.String> buildUnnamed1430() => [
      'foo',
      'foo',
    ];

void checkUnnamed1430(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterVpnTunnelAggregatedListWarningData = 0;
api.VpnTunnelAggregatedListWarningData
    buildVpnTunnelAggregatedListWarningData() {
  final o = api.VpnTunnelAggregatedListWarningData();
  buildCounterVpnTunnelAggregatedListWarningData++;
  if (buildCounterVpnTunnelAggregatedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnTunnelAggregatedListWarningData--;
  return o;
}

void checkVpnTunnelAggregatedListWarningData(
    api.VpnTunnelAggregatedListWarningData o) {
  buildCounterVpnTunnelAggregatedListWarningData++;
  if (buildCounterVpnTunnelAggregatedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelAggregatedListWarningData--;
}

core.List<api.VpnTunnelAggregatedListWarningData> buildUnnamed1431() => [
      buildVpnTunnelAggregatedListWarningData(),
      buildVpnTunnelAggregatedListWarningData(),
    ];

void checkUnnamed1431(core.List<api.VpnTunnelAggregatedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnelAggregatedListWarningData(o[0]);
  checkVpnTunnelAggregatedListWarningData(o[1]);
}

core.int buildCounterVpnTunnelAggregatedListWarning = 0;
api.VpnTunnelAggregatedListWarning buildVpnTunnelAggregatedListWarning() {
  final o = api.VpnTunnelAggregatedListWarning();
  buildCounterVpnTunnelAggregatedListWarning++;
  if (buildCounterVpnTunnelAggregatedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1431();
    o.message = 'foo';
  }
  buildCounterVpnTunnelAggregatedListWarning--;
  return o;
}

void checkVpnTunnelAggregatedListWarning(api.VpnTunnelAggregatedListWarning o) {
  buildCounterVpnTunnelAggregatedListWarning++;
  if (buildCounterVpnTunnelAggregatedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1431(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelAggregatedListWarning--;
}

core.int buildCounterVpnTunnelAggregatedList = 0;
api.VpnTunnelAggregatedList buildVpnTunnelAggregatedList() {
  final o = api.VpnTunnelAggregatedList();
  buildCounterVpnTunnelAggregatedList++;
  if (buildCounterVpnTunnelAggregatedList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1429();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.unreachables = buildUnnamed1430();
    o.warning = buildVpnTunnelAggregatedListWarning();
  }
  buildCounterVpnTunnelAggregatedList--;
  return o;
}

void checkVpnTunnelAggregatedList(api.VpnTunnelAggregatedList o) {
  buildCounterVpnTunnelAggregatedList++;
  if (buildCounterVpnTunnelAggregatedList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1429(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkUnnamed1430(o.unreachables!);
    checkVpnTunnelAggregatedListWarning(o.warning!);
  }
  buildCounterVpnTunnelAggregatedList--;
}

core.List<api.VpnTunnel> buildUnnamed1432() => [
      buildVpnTunnel(),
      buildVpnTunnel(),
    ];

void checkUnnamed1432(core.List<api.VpnTunnel> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnel(o[0]);
  checkVpnTunnel(o[1]);
}

core.int buildCounterVpnTunnelListWarningData = 0;
api.VpnTunnelListWarningData buildVpnTunnelListWarningData() {
  final o = api.VpnTunnelListWarningData();
  buildCounterVpnTunnelListWarningData++;
  if (buildCounterVpnTunnelListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnTunnelListWarningData--;
  return o;
}

void checkVpnTunnelListWarningData(api.VpnTunnelListWarningData o) {
  buildCounterVpnTunnelListWarningData++;
  if (buildCounterVpnTunnelListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelListWarningData--;
}

core.List<api.VpnTunnelListWarningData> buildUnnamed1433() => [
      buildVpnTunnelListWarningData(),
      buildVpnTunnelListWarningData(),
    ];

void checkUnnamed1433(core.List<api.VpnTunnelListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnelListWarningData(o[0]);
  checkVpnTunnelListWarningData(o[1]);
}

core.int buildCounterVpnTunnelListWarning = 0;
api.VpnTunnelListWarning buildVpnTunnelListWarning() {
  final o = api.VpnTunnelListWarning();
  buildCounterVpnTunnelListWarning++;
  if (buildCounterVpnTunnelListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1433();
    o.message = 'foo';
  }
  buildCounterVpnTunnelListWarning--;
  return o;
}

void checkVpnTunnelListWarning(api.VpnTunnelListWarning o) {
  buildCounterVpnTunnelListWarning++;
  if (buildCounterVpnTunnelListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1433(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelListWarning--;
}

core.int buildCounterVpnTunnelList = 0;
api.VpnTunnelList buildVpnTunnelList() {
  final o = api.VpnTunnelList();
  buildCounterVpnTunnelList++;
  if (buildCounterVpnTunnelList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1432();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildVpnTunnelListWarning();
  }
  buildCounterVpnTunnelList--;
  return o;
}

void checkVpnTunnelList(api.VpnTunnelList o) {
  buildCounterVpnTunnelList++;
  if (buildCounterVpnTunnelList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1432(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkVpnTunnelListWarning(o.warning!);
  }
  buildCounterVpnTunnelList--;
}

core.List<api.VpnTunnel> buildUnnamed1434() => [
      buildVpnTunnel(),
      buildVpnTunnel(),
    ];

void checkUnnamed1434(core.List<api.VpnTunnel> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnel(o[0]);
  checkVpnTunnel(o[1]);
}

core.int buildCounterVpnTunnelsScopedListWarningData = 0;
api.VpnTunnelsScopedListWarningData buildVpnTunnelsScopedListWarningData() {
  final o = api.VpnTunnelsScopedListWarningData();
  buildCounterVpnTunnelsScopedListWarningData++;
  if (buildCounterVpnTunnelsScopedListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterVpnTunnelsScopedListWarningData--;
  return o;
}

void checkVpnTunnelsScopedListWarningData(
    api.VpnTunnelsScopedListWarningData o) {
  buildCounterVpnTunnelsScopedListWarningData++;
  if (buildCounterVpnTunnelsScopedListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelsScopedListWarningData--;
}

core.List<api.VpnTunnelsScopedListWarningData> buildUnnamed1435() => [
      buildVpnTunnelsScopedListWarningData(),
      buildVpnTunnelsScopedListWarningData(),
    ];

void checkUnnamed1435(core.List<api.VpnTunnelsScopedListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkVpnTunnelsScopedListWarningData(o[0]);
  checkVpnTunnelsScopedListWarningData(o[1]);
}

core.int buildCounterVpnTunnelsScopedListWarning = 0;
api.VpnTunnelsScopedListWarning buildVpnTunnelsScopedListWarning() {
  final o = api.VpnTunnelsScopedListWarning();
  buildCounterVpnTunnelsScopedListWarning++;
  if (buildCounterVpnTunnelsScopedListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1435();
    o.message = 'foo';
  }
  buildCounterVpnTunnelsScopedListWarning--;
  return o;
}

void checkVpnTunnelsScopedListWarning(api.VpnTunnelsScopedListWarning o) {
  buildCounterVpnTunnelsScopedListWarning++;
  if (buildCounterVpnTunnelsScopedListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1435(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterVpnTunnelsScopedListWarning--;
}

core.int buildCounterVpnTunnelsScopedList = 0;
api.VpnTunnelsScopedList buildVpnTunnelsScopedList() {
  final o = api.VpnTunnelsScopedList();
  buildCounterVpnTunnelsScopedList++;
  if (buildCounterVpnTunnelsScopedList < 3) {
    o.vpnTunnels = buildUnnamed1434();
    o.warning = buildVpnTunnelsScopedListWarning();
  }
  buildCounterVpnTunnelsScopedList--;
  return o;
}

void checkVpnTunnelsScopedList(api.VpnTunnelsScopedList o) {
  buildCounterVpnTunnelsScopedList++;
  if (buildCounterVpnTunnelsScopedList < 3) {
    checkUnnamed1434(o.vpnTunnels!);
    checkVpnTunnelsScopedListWarning(o.warning!);
  }
  buildCounterVpnTunnelsScopedList--;
}

core.List<core.String> buildUnnamed1436() => [
      'foo',
      'foo',
    ];

void checkUnnamed1436(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.List<api.WafExpressionSetExpression> buildUnnamed1437() => [
      buildWafExpressionSetExpression(),
      buildWafExpressionSetExpression(),
    ];

void checkUnnamed1437(core.List<api.WafExpressionSetExpression> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkWafExpressionSetExpression(o[0]);
  checkWafExpressionSetExpression(o[1]);
}

core.int buildCounterWafExpressionSet = 0;
api.WafExpressionSet buildWafExpressionSet() {
  final o = api.WafExpressionSet();
  buildCounterWafExpressionSet++;
  if (buildCounterWafExpressionSet < 3) {
    o.aliases = buildUnnamed1436();
    o.expressions = buildUnnamed1437();
    o.id = 'foo';
  }
  buildCounterWafExpressionSet--;
  return o;
}

void checkWafExpressionSet(api.WafExpressionSet o) {
  buildCounterWafExpressionSet++;
  if (buildCounterWafExpressionSet < 3) {
    checkUnnamed1436(o.aliases!);
    checkUnnamed1437(o.expressions!);
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
  }
  buildCounterWafExpressionSet--;
}

core.int buildCounterWafExpressionSetExpression = 0;
api.WafExpressionSetExpression buildWafExpressionSetExpression() {
  final o = api.WafExpressionSetExpression();
  buildCounterWafExpressionSetExpression++;
  if (buildCounterWafExpressionSetExpression < 3) {
    o.id = 'foo';
  }
  buildCounterWafExpressionSetExpression--;
  return o;
}

void checkWafExpressionSetExpression(api.WafExpressionSetExpression o) {
  buildCounterWafExpressionSetExpression++;
  if (buildCounterWafExpressionSetExpression < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
  }
  buildCounterWafExpressionSetExpression--;
}

core.int buildCounterWeightedBackendService = 0;
api.WeightedBackendService buildWeightedBackendService() {
  final o = api.WeightedBackendService();
  buildCounterWeightedBackendService++;
  if (buildCounterWeightedBackendService < 3) {
    o.backendService = 'foo';
    o.headerAction = buildHttpHeaderAction();
    o.weight = 42;
  }
  buildCounterWeightedBackendService--;
  return o;
}

void checkWeightedBackendService(api.WeightedBackendService o) {
  buildCounterWeightedBackendService++;
  if (buildCounterWeightedBackendService < 3) {
    unittest.expect(
      o.backendService!,
      unittest.equals('foo'),
    );
    checkHttpHeaderAction(o.headerAction!);
    unittest.expect(
      o.weight!,
      unittest.equals(42),
    );
  }
  buildCounterWeightedBackendService--;
}

core.List<api.Project> buildUnnamed1438() => [
      buildProject(),
      buildProject(),
    ];

void checkUnnamed1438(core.List<api.Project> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkProject(o[0]);
  checkProject(o[1]);
}

core.int buildCounterXpnHostListWarningData = 0;
api.XpnHostListWarningData buildXpnHostListWarningData() {
  final o = api.XpnHostListWarningData();
  buildCounterXpnHostListWarningData++;
  if (buildCounterXpnHostListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterXpnHostListWarningData--;
  return o;
}

void checkXpnHostListWarningData(api.XpnHostListWarningData o) {
  buildCounterXpnHostListWarningData++;
  if (buildCounterXpnHostListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterXpnHostListWarningData--;
}

core.List<api.XpnHostListWarningData> buildUnnamed1439() => [
      buildXpnHostListWarningData(),
      buildXpnHostListWarningData(),
    ];

void checkUnnamed1439(core.List<api.XpnHostListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkXpnHostListWarningData(o[0]);
  checkXpnHostListWarningData(o[1]);
}

core.int buildCounterXpnHostListWarning = 0;
api.XpnHostListWarning buildXpnHostListWarning() {
  final o = api.XpnHostListWarning();
  buildCounterXpnHostListWarning++;
  if (buildCounterXpnHostListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1439();
    o.message = 'foo';
  }
  buildCounterXpnHostListWarning--;
  return o;
}

void checkXpnHostListWarning(api.XpnHostListWarning o) {
  buildCounterXpnHostListWarning++;
  if (buildCounterXpnHostListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1439(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterXpnHostListWarning--;
}

core.int buildCounterXpnHostList = 0;
api.XpnHostList buildXpnHostList() {
  final o = api.XpnHostList();
  buildCounterXpnHostList++;
  if (buildCounterXpnHostList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1438();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildXpnHostListWarning();
  }
  buildCounterXpnHostList--;
  return o;
}

void checkXpnHostList(api.XpnHostList o) {
  buildCounterXpnHostList++;
  if (buildCounterXpnHostList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1438(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkXpnHostListWarning(o.warning!);
  }
  buildCounterXpnHostList--;
}

core.int buildCounterXpnResourceId = 0;
api.XpnResourceId buildXpnResourceId() {
  final o = api.XpnResourceId();
  buildCounterXpnResourceId++;
  if (buildCounterXpnResourceId < 3) {
    o.id = 'foo';
    o.type = 'foo';
  }
  buildCounterXpnResourceId--;
  return o;
}

void checkXpnResourceId(api.XpnResourceId o) {
  buildCounterXpnResourceId++;
  if (buildCounterXpnResourceId < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.type!,
      unittest.equals('foo'),
    );
  }
  buildCounterXpnResourceId--;
}

core.List<core.String> buildUnnamed1440() => [
      'foo',
      'foo',
    ];

void checkUnnamed1440(core.List<core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o[0],
    unittest.equals('foo'),
  );
  unittest.expect(
    o[1],
    unittest.equals('foo'),
  );
}

core.int buildCounterZone = 0;
api.Zone buildZone() {
  final o = api.Zone();
  buildCounterZone++;
  if (buildCounterZone < 3) {
    o.availableCpuPlatforms = buildUnnamed1440();
    o.creationTimestamp = 'foo';
    o.deprecated = buildDeprecationStatus();
    o.description = 'foo';
    o.id = 'foo';
    o.kind = 'foo';
    o.name = 'foo';
    o.region = 'foo';
    o.selfLink = 'foo';
    o.status = 'foo';
    o.supportsPzs = true;
  }
  buildCounterZone--;
  return o;
}

void checkZone(api.Zone o) {
  buildCounterZone++;
  if (buildCounterZone < 3) {
    checkUnnamed1440(o.availableCpuPlatforms!);
    unittest.expect(
      o.creationTimestamp!,
      unittest.equals('foo'),
    );
    checkDeprecationStatus(o.deprecated!);
    unittest.expect(
      o.description!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.name!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.region!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.status!,
      unittest.equals('foo'),
    );
    unittest.expect(o.supportsPzs!, unittest.isTrue);
  }
  buildCounterZone--;
}

core.List<api.Zone> buildUnnamed1441() => [
      buildZone(),
      buildZone(),
    ];

void checkUnnamed1441(core.List<api.Zone> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkZone(o[0]);
  checkZone(o[1]);
}

core.int buildCounterZoneListWarningData = 0;
api.ZoneListWarningData buildZoneListWarningData() {
  final o = api.ZoneListWarningData();
  buildCounterZoneListWarningData++;
  if (buildCounterZoneListWarningData < 3) {
    o.key = 'foo';
    o.value = 'foo';
  }
  buildCounterZoneListWarningData--;
  return o;
}

void checkZoneListWarningData(api.ZoneListWarningData o) {
  buildCounterZoneListWarningData++;
  if (buildCounterZoneListWarningData < 3) {
    unittest.expect(
      o.key!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.value!,
      unittest.equals('foo'),
    );
  }
  buildCounterZoneListWarningData--;
}

core.List<api.ZoneListWarningData> buildUnnamed1442() => [
      buildZoneListWarningData(),
      buildZoneListWarningData(),
    ];

void checkUnnamed1442(core.List<api.ZoneListWarningData> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkZoneListWarningData(o[0]);
  checkZoneListWarningData(o[1]);
}

core.int buildCounterZoneListWarning = 0;
api.ZoneListWarning buildZoneListWarning() {
  final o = api.ZoneListWarning();
  buildCounterZoneListWarning++;
  if (buildCounterZoneListWarning < 3) {
    o.code = 'foo';
    o.data = buildUnnamed1442();
    o.message = 'foo';
  }
  buildCounterZoneListWarning--;
  return o;
}

void checkZoneListWarning(api.ZoneListWarning o) {
  buildCounterZoneListWarning++;
  if (buildCounterZoneListWarning < 3) {
    unittest.expect(
      o.code!,
      unittest.equals('foo'),
    );
    checkUnnamed1442(o.data!);
    unittest.expect(
      o.message!,
      unittest.equals('foo'),
    );
  }
  buildCounterZoneListWarning--;
}

core.int buildCounterZoneList = 0;
api.ZoneList buildZoneList() {
  final o = api.ZoneList();
  buildCounterZoneList++;
  if (buildCounterZoneList < 3) {
    o.id = 'foo';
    o.items = buildUnnamed1441();
    o.kind = 'foo';
    o.nextPageToken = 'foo';
    o.selfLink = 'foo';
    o.warning = buildZoneListWarning();
  }
  buildCounterZoneList--;
  return o;
}

void checkZoneList(api.ZoneList o) {
  buildCounterZoneList++;
  if (buildCounterZoneList < 3) {
    unittest.expect(
      o.id!,
      unittest.equals('foo'),
    );
    checkUnnamed1441(o.items!);
    unittest.expect(
      o.kind!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.nextPageToken!,
      unittest.equals('foo'),
    );
    unittest.expect(
      o.selfLink!,
      unittest.equals('foo'),
    );
    checkZoneListWarning(o.warning!);
  }
  buildCounterZoneList--;
}

core.Map<core.String, core.String> buildUnnamed1443() => {
      'x': 'foo',
      'y': 'foo',
    };

void checkUnnamed1443(core.Map<core.String, core.String> o) {
  unittest.expect(o, unittest.hasLength(2));
  unittest.expect(
    o['x']!,
    unittest.equals('foo'),
  );
  unittest.expect(
    o['y']!,
    unittest.equals('foo'),
  );
}

core.int buildCounterZoneSetLabelsRequest = 0;
api.ZoneSetLabelsRequest buildZoneSetLabelsRequest() {
  final o = api.ZoneSetLabelsRequest();
  buildCounterZoneSetLabelsRequest++;
  if (buildCounterZoneSetLabelsRequest < 3) {
    o.labelFingerprint = 'foo';
    o.labels = buildUnnamed1443();
  }
  buildCounterZoneSetLabelsRequest--;
  return o;
}

void checkZoneSetLabelsRequest(api.ZoneSetLabelsRequest o) {
  buildCounterZoneSetLabelsRequest++;
  if (buildCounterZoneSetLabelsRequest < 3) {
    unittest.expect(
      o.labelFingerprint!,
      unittest.equals('foo'),
    );
    checkUnnamed1443(o.labels!);
  }
  buildCounterZoneSetLabelsRequest--;
}

core.List<api.Binding> buildUnnamed1444() => [
      buildBinding(),
      buildBinding(),
    ];

void checkUnnamed1444(core.List<api.Binding> o) {
  unittest.expect(o, unittest.hasLength(2));
  checkBinding(o[0]);
  checkBinding(o[1]);
}

core.int buildCounterZoneSetPolicyRequest = 0;
api.ZoneSetPolicyRequest buildZoneSetPolicyRequest() {
  final o = api.ZoneSetPolicyRequest();
  buildCounterZoneSetPolicyRequest++;
  if (buildCounterZoneSetPolicyRequest < 3) {
    o.bindings = buildUnnamed1444();
    o.etag = 'foo';
    o.policy = buildPolicy();
  }
  buildCounterZoneSetPolicyRequest--;
  return o;
}

void checkZoneSetPolicyRequest(api.ZoneSetPolicyRequest o) {
  buildCounterZoneSetPolicyRequest++;
  if (buildCounterZoneSetPolicyRequest < 3) {
    checkUnnamed1444(o.bindings!);
    unittest.expect(
      o.etag!,
      unittest.equals('foo'),
    );
    checkPolicy(o.policy!);
  }
  buildCounterZoneSetPolicyRequest--;
}

void main() {
  unittest.group('obj-schema-AcceleratorConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorConfig(od);
    });
  });

  unittest.group('obj-schema-AcceleratorType', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorType();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorType.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorType(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeAggregatedList(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeListWarningData(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeListWarning(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypeList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypeList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypeList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypeList(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-AcceleratorTypesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAcceleratorTypesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AcceleratorTypesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAcceleratorTypesScopedList(od);
    });
  });

  unittest.group('obj-schema-AccessConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAccessConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AccessConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAccessConfig(od);
    });
  });

  unittest.group('obj-schema-Address', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddress();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Address.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkAddress(od);
    });
  });

  unittest.group('obj-schema-AddressAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AddressAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-AddressAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressAggregatedList(od);
    });
  });

  unittest.group('obj-schema-AddressListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressListWarningData(od);
    });
  });

  unittest.group('obj-schema-AddressListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressListWarning(od);
    });
  });

  unittest.group('obj-schema-AddressList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressList(od);
    });
  });

  unittest.group('obj-schema-AddressesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AddressesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-AddressesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAddressesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AddressesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAddressesScopedList(od);
    });
  });

  unittest.group('obj-schema-AdvancedMachineFeatures', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAdvancedMachineFeatures();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AdvancedMachineFeatures.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAdvancedMachineFeatures(od);
    });
  });

  unittest.group('obj-schema-AliasIpRange', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAliasIpRange();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AliasIpRange.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAliasIpRange(od);
    });
  });

  unittest.group(
      'obj-schema-AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
              .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(
          od);
    });
  });

  unittest.group(
      'obj-schema-AllocationSpecificSKUAllocationReservedInstanceProperties',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildAllocationSpecificSKUAllocationReservedInstanceProperties();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AllocationSpecificSKUAllocationReservedInstanceProperties
          .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkAllocationSpecificSKUAllocationReservedInstanceProperties(od);
    });
  });

  unittest.group('obj-schema-AllocationSpecificSKUReservation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAllocationSpecificSKUReservation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AllocationSpecificSKUReservation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAllocationSpecificSKUReservation(od);
    });
  });

  unittest.group('obj-schema-AttachedDisk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAttachedDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AttachedDisk.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAttachedDisk(od);
    });
  });

  unittest.group('obj-schema-AttachedDiskInitializeParams', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAttachedDiskInitializeParams();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AttachedDiskInitializeParams.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAttachedDiskInitializeParams(od);
    });
  });

  unittest.group('obj-schema-AuditConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAuditConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AuditConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAuditConfig(od);
    });
  });

  unittest.group('obj-schema-AuditLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAuditLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AuditLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAuditLogConfig(od);
    });
  });

  unittest.group('obj-schema-AuthorizationLoggingOptions', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAuthorizationLoggingOptions();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AuthorizationLoggingOptions.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAuthorizationLoggingOptions(od);
    });
  });

  unittest.group('obj-schema-Autoscaler', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscaler();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Autoscaler.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkAutoscaler(od);
    });
  });

  unittest.group('obj-schema-AutoscalerAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AutoscalerAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-AutoscalerAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerAggregatedList(od);
    });
  });

  unittest.group('obj-schema-AutoscalerListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerListWarningData(od);
    });
  });

  unittest.group('obj-schema-AutoscalerListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerListWarning(od);
    });
  });

  unittest.group('obj-schema-AutoscalerList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerList(od);
    });
  });

  unittest.group('obj-schema-AutoscalerStatusDetails', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalerStatusDetails();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalerStatusDetails.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalerStatusDetails(od);
    });
  });

  unittest.group('obj-schema-AutoscalersScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalersScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalersScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalersScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-AutoscalersScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalersScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalersScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalersScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-AutoscalersScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalersScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalersScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalersScopedList(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicy(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicyCpuUtilization', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicyCpuUtilization();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicyCpuUtilization.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicyCpuUtilization(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicyCustomMetricUtilization', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicyCustomMetricUtilization();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicyCustomMetricUtilization.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicyCustomMetricUtilization(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicyLoadBalancingUtilization', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicyLoadBalancingUtilization();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicyLoadBalancingUtilization.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicyLoadBalancingUtilization(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicyScaleInControl', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicyScaleInControl();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicyScaleInControl.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicyScaleInControl(od);
    });
  });

  unittest.group('obj-schema-AutoscalingPolicyScalingSchedule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildAutoscalingPolicyScalingSchedule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.AutoscalingPolicyScalingSchedule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkAutoscalingPolicyScalingSchedule(od);
    });
  });

  unittest.group('obj-schema-Backend', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackend();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Backend.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkBackend(od);
    });
  });

  unittest.group('obj-schema-BackendBucket', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucket();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucket.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucket(od);
    });
  });

  unittest.group('obj-schema-BackendBucketCdnPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketCdnPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketCdnPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketCdnPolicy(od);
    });
  });

  unittest.group('obj-schema-BackendBucketCdnPolicyBypassCacheOnRequestHeader',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketCdnPolicyBypassCacheOnRequestHeader();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketCdnPolicyBypassCacheOnRequestHeader.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketCdnPolicyBypassCacheOnRequestHeader(od);
    });
  });

  unittest.group('obj-schema-BackendBucketCdnPolicyNegativeCachingPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketCdnPolicyNegativeCachingPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketCdnPolicyNegativeCachingPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketCdnPolicyNegativeCachingPolicy(od);
    });
  });

  unittest.group('obj-schema-BackendBucketListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketListWarningData(od);
    });
  });

  unittest.group('obj-schema-BackendBucketListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketListWarning(od);
    });
  });

  unittest.group('obj-schema-BackendBucketList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendBucketList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendBucketList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendBucketList(od);
    });
  });

  unittest.group('obj-schema-BackendService', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendService();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendService.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendService(od);
    });
  });

  unittest.group('obj-schema-BackendServiceAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-BackendServiceAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-BackendServiceAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceAggregatedList(od);
    });
  });

  unittest.group('obj-schema-BackendServiceCdnPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceCdnPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceCdnPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceCdnPolicy(od);
    });
  });

  unittest.group('obj-schema-BackendServiceCdnPolicyBypassCacheOnRequestHeader',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceCdnPolicyBypassCacheOnRequestHeader();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceCdnPolicyBypassCacheOnRequestHeader.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceCdnPolicyBypassCacheOnRequestHeader(od);
    });
  });

  unittest.group('obj-schema-BackendServiceCdnPolicyNegativeCachingPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceCdnPolicyNegativeCachingPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceCdnPolicyNegativeCachingPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceCdnPolicyNegativeCachingPolicy(od);
    });
  });

  unittest.group('obj-schema-BackendServiceFailoverPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceFailoverPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceFailoverPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceFailoverPolicy(od);
    });
  });

  unittest.group('obj-schema-BackendServiceGroupHealth', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceGroupHealth();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceGroupHealth.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceGroupHealth(od);
    });
  });

  unittest.group('obj-schema-BackendServiceIAP', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceIAP();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceIAP.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceIAP(od);
    });
  });

  unittest.group('obj-schema-BackendServiceListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceListWarningData(od);
    });
  });

  unittest.group('obj-schema-BackendServiceListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceListWarning(od);
    });
  });

  unittest.group('obj-schema-BackendServiceList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceList(od);
    });
  });

  unittest.group('obj-schema-BackendServiceLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceLogConfig(od);
    });
  });

  unittest.group('obj-schema-BackendServiceReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServiceReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServiceReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServiceReference(od);
    });
  });

  unittest.group('obj-schema-BackendServicesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServicesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServicesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServicesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-BackendServicesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServicesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServicesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServicesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-BackendServicesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBackendServicesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BackendServicesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBackendServicesScopedList(od);
    });
  });

  unittest.group('obj-schema-Binding', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBinding();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Binding.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkBinding(od);
    });
  });

  unittest.group('obj-schema-BulkInsertInstanceResource', () {
    unittest.test('to-json--from-json', () async {
      final o = buildBulkInsertInstanceResource();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BulkInsertInstanceResource.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBulkInsertInstanceResource(od);
    });
  });

  unittest.group('obj-schema-BulkInsertInstanceResourcePerInstanceProperties',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildBulkInsertInstanceResourcePerInstanceProperties();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.BulkInsertInstanceResourcePerInstanceProperties.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkBulkInsertInstanceResourcePerInstanceProperties(od);
    });
  });

  unittest.group('obj-schema-CacheInvalidationRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCacheInvalidationRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CacheInvalidationRule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCacheInvalidationRule(od);
    });
  });

  unittest.group('obj-schema-CacheKeyPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCacheKeyPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CacheKeyPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCacheKeyPolicy(od);
    });
  });

  unittest.group('obj-schema-CircuitBreakers', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCircuitBreakers();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CircuitBreakers.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCircuitBreakers(od);
    });
  });

  unittest.group('obj-schema-Commitment', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitment();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Commitment.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkCommitment(od);
    });
  });

  unittest.group('obj-schema-CommitmentAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-CommitmentAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-CommitmentAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentAggregatedList(od);
    });
  });

  unittest.group('obj-schema-CommitmentListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentListWarningData(od);
    });
  });

  unittest.group('obj-schema-CommitmentListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentListWarning(od);
    });
  });

  unittest.group('obj-schema-CommitmentList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentList(od);
    });
  });

  unittest.group('obj-schema-CommitmentsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-CommitmentsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-CommitmentsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCommitmentsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CommitmentsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCommitmentsScopedList(od);
    });
  });

  unittest.group('obj-schema-Condition', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCondition();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Condition.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkCondition(od);
    });
  });

  unittest.group('obj-schema-ConfidentialInstanceConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildConfidentialInstanceConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ConfidentialInstanceConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkConfidentialInstanceConfig(od);
    });
  });

  unittest.group('obj-schema-ConnectionDraining', () {
    unittest.test('to-json--from-json', () async {
      final o = buildConnectionDraining();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ConnectionDraining.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkConnectionDraining(od);
    });
  });

  unittest.group('obj-schema-ConsistentHashLoadBalancerSettings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildConsistentHashLoadBalancerSettings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ConsistentHashLoadBalancerSettings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkConsistentHashLoadBalancerSettings(od);
    });
  });

  unittest.group('obj-schema-ConsistentHashLoadBalancerSettingsHttpCookie', () {
    unittest.test('to-json--from-json', () async {
      final o = buildConsistentHashLoadBalancerSettingsHttpCookie();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ConsistentHashLoadBalancerSettingsHttpCookie.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkConsistentHashLoadBalancerSettingsHttpCookie(od);
    });
  });

  unittest.group('obj-schema-CorsPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCorsPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.CorsPolicy.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkCorsPolicy(od);
    });
  });

  unittest.group('obj-schema-CustomerEncryptionKey', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCustomerEncryptionKey();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CustomerEncryptionKey.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCustomerEncryptionKey(od);
    });
  });

  unittest.group('obj-schema-CustomerEncryptionKeyProtectedDisk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildCustomerEncryptionKeyProtectedDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.CustomerEncryptionKeyProtectedDisk.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkCustomerEncryptionKeyProtectedDisk(od);
    });
  });

  unittest.group('obj-schema-DeprecationStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDeprecationStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DeprecationStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDeprecationStatus(od);
    });
  });

  unittest.group('obj-schema-Disk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Disk.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkDisk(od);
    });
  });

  unittest.group('obj-schema-DiskAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-DiskAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-DiskAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskAggregatedList(od);
    });
  });

  unittest.group('obj-schema-DiskInstantiationConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskInstantiationConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskInstantiationConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskInstantiationConfig(od);
    });
  });

  unittest.group('obj-schema-DiskListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskListWarningData(od);
    });
  });

  unittest.group('obj-schema-DiskListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskListWarning(od);
    });
  });

  unittest.group('obj-schema-DiskList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.DiskList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkDiskList(od);
    });
  });

  unittest.group('obj-schema-DiskMoveRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskMoveRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskMoveRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskMoveRequest(od);
    });
  });

  unittest.group('obj-schema-DiskType', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskType();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.DiskType.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkDiskType(od);
    });
  });

  unittest.group('obj-schema-DiskTypeAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-DiskTypeAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-DiskTypeAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeAggregatedList(od);
    });
  });

  unittest.group('obj-schema-DiskTypeListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeListWarningData(od);
    });
  });

  unittest.group('obj-schema-DiskTypeListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeListWarning(od);
    });
  });

  unittest.group('obj-schema-DiskTypeList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypeList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypeList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypeList(od);
    });
  });

  unittest.group('obj-schema-DiskTypesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-DiskTypesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-DiskTypesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDiskTypesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DiskTypesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDiskTypesScopedList(od);
    });
  });

  unittest.group('obj-schema-DisksAddResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksAddResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksAddResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksAddResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-DisksRemoveResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksRemoveResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksRemoveResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksRemoveResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-DisksResizeRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksResizeRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksResizeRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksResizeRequest(od);
    });
  });

  unittest.group('obj-schema-DisksScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-DisksScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-DisksScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisksScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisksScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisksScopedList(od);
    });
  });

  unittest.group('obj-schema-DisplayDevice', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDisplayDevice();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DisplayDevice.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDisplayDevice(od);
    });
  });

  unittest.group('obj-schema-DistributionPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDistributionPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DistributionPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDistributionPolicy(od);
    });
  });

  unittest.group('obj-schema-DistributionPolicyZoneConfiguration', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDistributionPolicyZoneConfiguration();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.DistributionPolicyZoneConfiguration.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkDistributionPolicyZoneConfiguration(od);
    });
  });

  unittest.group('obj-schema-Duration', () {
    unittest.test('to-json--from-json', () async {
      final o = buildDuration();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Duration.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkDuration(od);
    });
  });

  unittest.group('obj-schema-ExchangedPeeringRoute', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExchangedPeeringRoute();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExchangedPeeringRoute.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExchangedPeeringRoute(od);
    });
  });

  unittest.group('obj-schema-ExchangedPeeringRoutesListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExchangedPeeringRoutesListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExchangedPeeringRoutesListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExchangedPeeringRoutesListWarningData(od);
    });
  });

  unittest.group('obj-schema-ExchangedPeeringRoutesListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExchangedPeeringRoutesListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExchangedPeeringRoutesListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExchangedPeeringRoutesListWarning(od);
    });
  });

  unittest.group('obj-schema-ExchangedPeeringRoutesList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExchangedPeeringRoutesList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExchangedPeeringRoutesList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExchangedPeeringRoutesList(od);
    });
  });

  unittest.group('obj-schema-Expr', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExpr();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Expr.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkExpr(od);
    });
  });

  unittest.group('obj-schema-ExternalVpnGateway', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExternalVpnGateway();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExternalVpnGateway.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExternalVpnGateway(od);
    });
  });

  unittest.group('obj-schema-ExternalVpnGatewayInterface', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExternalVpnGatewayInterface();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExternalVpnGatewayInterface.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExternalVpnGatewayInterface(od);
    });
  });

  unittest.group('obj-schema-ExternalVpnGatewayListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExternalVpnGatewayListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExternalVpnGatewayListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExternalVpnGatewayListWarningData(od);
    });
  });

  unittest.group('obj-schema-ExternalVpnGatewayListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExternalVpnGatewayListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExternalVpnGatewayListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExternalVpnGatewayListWarning(od);
    });
  });

  unittest.group('obj-schema-ExternalVpnGatewayList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildExternalVpnGatewayList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ExternalVpnGatewayList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkExternalVpnGatewayList(od);
    });
  });

  unittest.group('obj-schema-FileContentBuffer', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFileContentBuffer();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FileContentBuffer.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFileContentBuffer(od);
    });
  });

  unittest.group('obj-schema-FirewallAllowed', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallAllowed();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallAllowed.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallAllowed(od);
    });
  });

  unittest.group('obj-schema-FirewallDenied', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallDenied();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallDenied.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallDenied(od);
    });
  });

  unittest.group('obj-schema-Firewall', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewall();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Firewall.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkFirewall(od);
    });
  });

  unittest.group('obj-schema-FirewallListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallListWarningData(od);
    });
  });

  unittest.group('obj-schema-FirewallListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallListWarning(od);
    });
  });

  unittest.group('obj-schema-FirewallList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallList(od);
    });
  });

  unittest.group('obj-schema-FirewallLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallLogConfig(od);
    });
  });

  unittest.group('obj-schema-FirewallPoliciesListAssociationsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPoliciesListAssociationsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPoliciesListAssociationsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPoliciesListAssociationsResponse(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicy(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyAssociation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyAssociation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyAssociation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyAssociation(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyListWarningData(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyListWarning(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyList(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyRule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyRule(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyRuleMatcher', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyRuleMatcher();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyRuleMatcher.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyRuleMatcher(od);
    });
  });

  unittest.group('obj-schema-FirewallPolicyRuleMatcherLayer4Config', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFirewallPolicyRuleMatcherLayer4Config();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FirewallPolicyRuleMatcherLayer4Config.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFirewallPolicyRuleMatcherLayer4Config(od);
    });
  });

  unittest.group('obj-schema-FixedOrPercent', () {
    unittest.test('to-json--from-json', () async {
      final o = buildFixedOrPercent();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.FixedOrPercent.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkFixedOrPercent(od);
    });
  });

  unittest.group('obj-schema-ForwardingRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRule(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleAggregatedList(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleListWarningData(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleListWarning(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleList(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleReference(od);
    });
  });

  unittest.group('obj-schema-ForwardingRuleServiceDirectoryRegistration', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRuleServiceDirectoryRegistration();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRuleServiceDirectoryRegistration.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRuleServiceDirectoryRegistration(od);
    });
  });

  unittest.group('obj-schema-ForwardingRulesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRulesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRulesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRulesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ForwardingRulesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRulesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRulesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRulesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-ForwardingRulesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildForwardingRulesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ForwardingRulesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkForwardingRulesScopedList(od);
    });
  });

  unittest.group('obj-schema-GRPCHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGRPCHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GRPCHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGRPCHealthCheck(od);
    });
  });

  unittest.group('obj-schema-GlobalNetworkEndpointGroupsAttachEndpointsRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildGlobalNetworkEndpointGroupsAttachEndpointsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GlobalNetworkEndpointGroupsAttachEndpointsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGlobalNetworkEndpointGroupsAttachEndpointsRequest(od);
    });
  });

  unittest.group('obj-schema-GlobalNetworkEndpointGroupsDetachEndpointsRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildGlobalNetworkEndpointGroupsDetachEndpointsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GlobalNetworkEndpointGroupsDetachEndpointsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGlobalNetworkEndpointGroupsDetachEndpointsRequest(od);
    });
  });

  unittest.group('obj-schema-GlobalOrganizationSetPolicyRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGlobalOrganizationSetPolicyRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GlobalOrganizationSetPolicyRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGlobalOrganizationSetPolicyRequest(od);
    });
  });

  unittest.group('obj-schema-GlobalSetLabelsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGlobalSetLabelsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GlobalSetLabelsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGlobalSetLabelsRequest(od);
    });
  });

  unittest.group('obj-schema-GlobalSetPolicyRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGlobalSetPolicyRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GlobalSetPolicyRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGlobalSetPolicyRequest(od);
    });
  });

  unittest.group('obj-schema-GuestAttributes', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGuestAttributes();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GuestAttributes.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGuestAttributes(od);
    });
  });

  unittest.group('obj-schema-GuestAttributesEntry', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGuestAttributesEntry();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GuestAttributesEntry.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGuestAttributesEntry(od);
    });
  });

  unittest.group('obj-schema-GuestAttributesValue', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGuestAttributesValue();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GuestAttributesValue.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGuestAttributesValue(od);
    });
  });

  unittest.group('obj-schema-GuestOsFeature', () {
    unittest.test('to-json--from-json', () async {
      final o = buildGuestOsFeature();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.GuestOsFeature.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkGuestOsFeature(od);
    });
  });

  unittest.group('obj-schema-HTTP2HealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHTTP2HealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HTTP2HealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHTTP2HealthCheck(od);
    });
  });

  unittest.group('obj-schema-HTTPHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHTTPHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HTTPHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHTTPHealthCheck(od);
    });
  });

  unittest.group('obj-schema-HTTPSHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHTTPSHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HTTPSHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHTTPSHealthCheck(od);
    });
  });

  unittest.group('obj-schema-HealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheck(od);
    });
  });

  unittest.group('obj-schema-HealthCheckListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckListWarningData(od);
    });
  });

  unittest.group('obj-schema-HealthCheckListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckListWarning(od);
    });
  });

  unittest.group('obj-schema-HealthCheckList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckList(od);
    });
  });

  unittest.group('obj-schema-HealthCheckLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckLogConfig(od);
    });
  });

  unittest.group('obj-schema-HealthCheckReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckReference(od);
    });
  });

  unittest.group('obj-schema-HealthCheckService', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckService();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckService.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckService(od);
    });
  });

  unittest.group('obj-schema-HealthCheckServiceReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckServiceReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckServiceReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckServiceReference(od);
    });
  });

  unittest.group('obj-schema-HealthCheckServicesListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckServicesListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckServicesListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckServicesListWarningData(od);
    });
  });

  unittest.group('obj-schema-HealthCheckServicesListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckServicesListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckServicesListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckServicesListWarning(od);
    });
  });

  unittest.group('obj-schema-HealthCheckServicesList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthCheckServicesList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthCheckServicesList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthCheckServicesList(od);
    });
  });

  unittest.group('obj-schema-HealthChecksAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-HealthChecksAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-HealthChecksAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksAggregatedList(od);
    });
  });

  unittest.group('obj-schema-HealthChecksScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-HealthChecksScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-HealthChecksScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthChecksScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthChecksScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthChecksScopedList(od);
    });
  });

  unittest.group('obj-schema-HealthStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthStatus(od);
    });
  });

  unittest.group('obj-schema-HealthStatusForNetworkEndpoint', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHealthStatusForNetworkEndpoint();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HealthStatusForNetworkEndpoint.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHealthStatusForNetworkEndpoint(od);
    });
  });

  unittest.group('obj-schema-HostRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHostRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.HostRule.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkHostRule(od);
    });
  });

  unittest.group('obj-schema-HttpFaultAbort', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpFaultAbort();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpFaultAbort.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpFaultAbort(od);
    });
  });

  unittest.group('obj-schema-HttpFaultDelay', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpFaultDelay();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpFaultDelay.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpFaultDelay(od);
    });
  });

  unittest.group('obj-schema-HttpFaultInjection', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpFaultInjection();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpFaultInjection.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpFaultInjection(od);
    });
  });

  unittest.group('obj-schema-HttpHeaderAction', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHeaderAction();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHeaderAction.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHeaderAction(od);
    });
  });

  unittest.group('obj-schema-HttpHeaderMatch', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHeaderMatch();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHeaderMatch.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHeaderMatch(od);
    });
  });

  unittest.group('obj-schema-HttpHeaderOption', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHeaderOption();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHeaderOption.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHeaderOption(od);
    });
  });

  unittest.group('obj-schema-HttpHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHealthCheck(od);
    });
  });

  unittest.group('obj-schema-HttpHealthCheckListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHealthCheckListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHealthCheckListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHealthCheckListWarningData(od);
    });
  });

  unittest.group('obj-schema-HttpHealthCheckListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHealthCheckListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHealthCheckListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHealthCheckListWarning(od);
    });
  });

  unittest.group('obj-schema-HttpHealthCheckList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpHealthCheckList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpHealthCheckList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpHealthCheckList(od);
    });
  });

  unittest.group('obj-schema-HttpQueryParameterMatch', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpQueryParameterMatch();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpQueryParameterMatch.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpQueryParameterMatch(od);
    });
  });

  unittest.group('obj-schema-HttpRedirectAction', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpRedirectAction();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpRedirectAction.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpRedirectAction(od);
    });
  });

  unittest.group('obj-schema-HttpRetryPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpRetryPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpRetryPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpRetryPolicy(od);
    });
  });

  unittest.group('obj-schema-HttpRouteAction', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpRouteAction();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpRouteAction.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpRouteAction(od);
    });
  });

  unittest.group('obj-schema-HttpRouteRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpRouteRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpRouteRule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpRouteRule(od);
    });
  });

  unittest.group('obj-schema-HttpRouteRuleMatch', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpRouteRuleMatch();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpRouteRuleMatch.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpRouteRuleMatch(od);
    });
  });

  unittest.group('obj-schema-HttpsHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpsHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpsHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpsHealthCheck(od);
    });
  });

  unittest.group('obj-schema-HttpsHealthCheckListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpsHealthCheckListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpsHealthCheckListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpsHealthCheckListWarningData(od);
    });
  });

  unittest.group('obj-schema-HttpsHealthCheckListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpsHealthCheckListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpsHealthCheckListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpsHealthCheckListWarning(od);
    });
  });

  unittest.group('obj-schema-HttpsHealthCheckList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildHttpsHealthCheckList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.HttpsHealthCheckList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkHttpsHealthCheckList(od);
    });
  });

  unittest.group('obj-schema-ImageRawDisk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImageRawDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ImageRawDisk.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkImageRawDisk(od);
    });
  });

  unittest.group('obj-schema-Image', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImage();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Image.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkImage(od);
    });
  });

  unittest.group('obj-schema-ImageFamilyView', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImageFamilyView();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ImageFamilyView.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkImageFamilyView(od);
    });
  });

  unittest.group('obj-schema-ImageListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImageListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ImageListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkImageListWarningData(od);
    });
  });

  unittest.group('obj-schema-ImageListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImageListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ImageListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkImageListWarning(od);
    });
  });

  unittest.group('obj-schema-ImageList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildImageList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.ImageList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkImageList(od);
    });
  });

  unittest.group('obj-schema-InitialStateConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInitialStateConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InitialStateConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInitialStateConfig(od);
    });
  });

  unittest.group('obj-schema-Instance', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstance();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Instance.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkInstance(od);
    });
  });

  unittest.group('obj-schema-InstanceAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceAggregatedList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroup', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroup();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroup.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroup(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupAggregatedList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManager', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManager();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManager.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManager(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerActionsSummary', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerActionsSummary();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerActionsSummary.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerActionsSummary(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerAggregatedListWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerAggregatedList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerAutoHealingPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerAutoHealingPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerAutoHealingPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerAutoHealingPolicy(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerStatus(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerStatusStateful', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerStatusStateful();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerStatusStateful.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerStatusStateful(od);
    });
  });

  unittest.group(
      'obj-schema-InstanceGroupManagerStatusStatefulPerInstanceConfigs', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerStatusStatefulPerInstanceConfigs();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.InstanceGroupManagerStatusStatefulPerInstanceConfigs.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerStatusStatefulPerInstanceConfigs(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerStatusVersionTarget', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerStatusVersionTarget();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerStatusVersionTarget.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerStatusVersionTarget(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerUpdatePolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerUpdatePolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerUpdatePolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerUpdatePolicy(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagerVersion', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagerVersion();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagerVersion.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagerVersion(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersAbandonInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersAbandonInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersAbandonInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersAbandonInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersApplyUpdatesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersApplyUpdatesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersApplyUpdatesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersApplyUpdatesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersCreateInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersCreateInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersCreateInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersCreateInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersDeleteInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersDeleteInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersDeleteInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersDeleteInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersDeletePerInstanceConfigsReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersDeletePerInstanceConfigsReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersDeletePerInstanceConfigsReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersDeletePerInstanceConfigsReq(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersListErrorsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersListErrorsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersListErrorsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersListErrorsResponse(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersListManagedInstancesResponse',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersListManagedInstancesResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersListManagedInstancesResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersListManagedInstancesResponse(od);
    });
  });

  unittest.group(
      'obj-schema-InstanceGroupManagersListPerInstanceConfigsRespWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildInstanceGroupManagersListPerInstanceConfigsRespWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersListPerInstanceConfigsRespWarningData
          .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersListPerInstanceConfigsRespWarningData(od);
    });
  });

  unittest.group(
      'obj-schema-InstanceGroupManagersListPerInstanceConfigsRespWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersListPerInstanceConfigsRespWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.InstanceGroupManagersListPerInstanceConfigsRespWarning.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersListPerInstanceConfigsRespWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersListPerInstanceConfigsResp',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersListPerInstanceConfigsResp();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersListPerInstanceConfigsResp.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersListPerInstanceConfigsResp(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersPatchPerInstanceConfigsReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersPatchPerInstanceConfigsReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersPatchPerInstanceConfigsReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersPatchPerInstanceConfigsReq(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersRecreateInstancesRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersRecreateInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersRecreateInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersRecreateInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersScopedList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersSetInstanceTemplateRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersSetInstanceTemplateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersSetInstanceTemplateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersSetInstanceTemplateRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersSetTargetPoolsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersSetTargetPoolsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersSetTargetPoolsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersSetTargetPoolsRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupManagersUpdatePerInstanceConfigsReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupManagersUpdatePerInstanceConfigsReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupManagersUpdatePerInstanceConfigsReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupManagersUpdatePerInstanceConfigsReq(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsAddInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsAddInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsAddInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsAddInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsListInstancesWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsListInstancesWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsListInstancesWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsListInstancesWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsListInstancesWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsListInstancesWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsListInstancesWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsListInstancesWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsListInstances', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsListInstances();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsListInstances.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsListInstances(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsListInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsListInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsListInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsListInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsRemoveInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsRemoveInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsRemoveInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsRemoveInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsScopedList(od);
    });
  });

  unittest.group('obj-schema-InstanceGroupsSetNamedPortsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceGroupsSetNamedPortsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceGroupsSetNamedPortsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceGroupsSetNamedPortsRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceList(od);
    });
  });

  unittest.group('obj-schema-InstanceListReferrersWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceListReferrersWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceListReferrersWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceListReferrersWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceListReferrersWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceListReferrersWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceListReferrersWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceListReferrersWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceListReferrers', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceListReferrers();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceListReferrers.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceListReferrers(od);
    });
  });

  unittest.group('obj-schema-InstanceManagedByIgmError', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceManagedByIgmError();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceManagedByIgmError.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceManagedByIgmError(od);
    });
  });

  unittest.group('obj-schema-InstanceManagedByIgmErrorInstanceActionDetails',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceManagedByIgmErrorInstanceActionDetails();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceManagedByIgmErrorInstanceActionDetails.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceManagedByIgmErrorInstanceActionDetails(od);
    });
  });

  unittest.group('obj-schema-InstanceManagedByIgmErrorManagedInstanceError',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceManagedByIgmErrorManagedInstanceError();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceManagedByIgmErrorManagedInstanceError.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceManagedByIgmErrorManagedInstanceError(od);
    });
  });

  unittest.group('obj-schema-InstanceMoveRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceMoveRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceMoveRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceMoveRequest(od);
    });
  });

  unittest.group('obj-schema-InstanceProperties', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceProperties();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceProperties.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceProperties(od);
    });
  });

  unittest.group('obj-schema-InstanceReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceReference(od);
    });
  });

  unittest.group('obj-schema-InstanceTemplate', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceTemplate();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceTemplate.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceTemplate(od);
    });
  });

  unittest.group('obj-schema-InstanceTemplateListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceTemplateListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceTemplateListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceTemplateListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstanceTemplateListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceTemplateListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceTemplateListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceTemplateListWarning(od);
    });
  });

  unittest.group('obj-schema-InstanceTemplateList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceTemplateList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceTemplateList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceTemplateList(od);
    });
  });

  unittest.group('obj-schema-InstanceWithNamedPorts', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstanceWithNamedPorts();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstanceWithNamedPorts.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstanceWithNamedPorts(od);
    });
  });

  unittest.group('obj-schema-InstancesAddResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesAddResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesAddResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesAddResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesGetEffectiveFirewallsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesGetEffectiveFirewallsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesGetEffectiveFirewallsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesGetEffectiveFirewallsResponse(od);
    });
  });

  unittest.group(
      'obj-schema-InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
              .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(od);
    });
  });

  unittest.group('obj-schema-InstancesRemoveResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesRemoveResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesRemoveResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesRemoveResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InstancesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-InstancesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesScopedList(od);
    });
  });

  unittest.group('obj-schema-InstancesSetLabelsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesSetLabelsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesSetLabelsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesSetLabelsRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesSetMachineResourcesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesSetMachineResourcesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesSetMachineResourcesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesSetMachineResourcesRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesSetMachineTypeRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesSetMachineTypeRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesSetMachineTypeRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesSetMachineTypeRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesSetMinCpuPlatformRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesSetMinCpuPlatformRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesSetMinCpuPlatformRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesSetMinCpuPlatformRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesSetServiceAccountRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesSetServiceAccountRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesSetServiceAccountRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesSetServiceAccountRequest(od);
    });
  });

  unittest.group('obj-schema-InstancesStartWithEncryptionKeyRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInstancesStartWithEncryptionKeyRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InstancesStartWithEncryptionKeyRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInstancesStartWithEncryptionKeyRequest(od);
    });
  });

  unittest.group('obj-schema-Int64RangeMatch', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInt64RangeMatch();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.Int64RangeMatch.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInt64RangeMatch(od);
    });
  });

  unittest.group('obj-schema-Interconnect', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnect();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.Interconnect.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnect(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachment', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachment();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachment.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachment(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentAggregatedListWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentAggregatedList(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentListWarningData(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentListWarning(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentList(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentPartnerMetadata', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentPartnerMetadata();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentPartnerMetadata.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentPartnerMetadata(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentPrivateInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentPrivateInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentPrivateInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentPrivateInfo(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-InterconnectAttachmentsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectAttachmentsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectAttachmentsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectAttachmentsScopedList(od);
    });
  });

  unittest.group('obj-schema-InterconnectCircuitInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectCircuitInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectCircuitInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectCircuitInfo(od);
    });
  });

  unittest.group('obj-schema-InterconnectDiagnostics', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectDiagnostics();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectDiagnostics.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectDiagnostics(od);
    });
  });

  unittest.group('obj-schema-InterconnectDiagnosticsARPEntry', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectDiagnosticsARPEntry();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectDiagnosticsARPEntry.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectDiagnosticsARPEntry(od);
    });
  });

  unittest.group('obj-schema-InterconnectDiagnosticsLinkLACPStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectDiagnosticsLinkLACPStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectDiagnosticsLinkLACPStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectDiagnosticsLinkLACPStatus(od);
    });
  });

  unittest.group('obj-schema-InterconnectDiagnosticsLinkOpticalPower', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectDiagnosticsLinkOpticalPower();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectDiagnosticsLinkOpticalPower.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectDiagnosticsLinkOpticalPower(od);
    });
  });

  unittest.group('obj-schema-InterconnectDiagnosticsLinkStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectDiagnosticsLinkStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectDiagnosticsLinkStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectDiagnosticsLinkStatus(od);
    });
  });

  unittest.group('obj-schema-InterconnectListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectListWarningData(od);
    });
  });

  unittest.group('obj-schema-InterconnectListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectListWarning(od);
    });
  });

  unittest.group('obj-schema-InterconnectList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectList(od);
    });
  });

  unittest.group('obj-schema-InterconnectLocation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectLocation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectLocation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectLocation(od);
    });
  });

  unittest.group('obj-schema-InterconnectLocationListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectLocationListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectLocationListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectLocationListWarningData(od);
    });
  });

  unittest.group('obj-schema-InterconnectLocationListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectLocationListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectLocationListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectLocationListWarning(od);
    });
  });

  unittest.group('obj-schema-InterconnectLocationList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectLocationList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectLocationList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectLocationList(od);
    });
  });

  unittest.group('obj-schema-InterconnectLocationRegionInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectLocationRegionInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectLocationRegionInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectLocationRegionInfo(od);
    });
  });

  unittest.group('obj-schema-InterconnectOutageNotification', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectOutageNotification();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectOutageNotification.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectOutageNotification(od);
    });
  });

  unittest.group('obj-schema-InterconnectsGetDiagnosticsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildInterconnectsGetDiagnosticsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.InterconnectsGetDiagnosticsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkInterconnectsGetDiagnosticsResponse(od);
    });
  });

  unittest.group('obj-schema-License', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicense();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.License.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkLicense(od);
    });
  });

  unittest.group('obj-schema-LicenseCode', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicenseCode();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicenseCode.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicenseCode(od);
    });
  });

  unittest.group('obj-schema-LicenseCodeLicenseAlias', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicenseCodeLicenseAlias();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicenseCodeLicenseAlias.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicenseCodeLicenseAlias(od);
    });
  });

  unittest.group('obj-schema-LicenseResourceCommitment', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicenseResourceCommitment();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicenseResourceCommitment.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicenseResourceCommitment(od);
    });
  });

  unittest.group('obj-schema-LicenseResourceRequirements', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicenseResourceRequirements();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicenseResourceRequirements.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicenseResourceRequirements(od);
    });
  });

  unittest.group('obj-schema-LicensesListResponseWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicensesListResponseWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicensesListResponseWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicensesListResponseWarningData(od);
    });
  });

  unittest.group('obj-schema-LicensesListResponseWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicensesListResponseWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicensesListResponseWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicensesListResponseWarning(od);
    });
  });

  unittest.group('obj-schema-LicensesListResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLicensesListResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LicensesListResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLicensesListResponse(od);
    });
  });

  unittest.group('obj-schema-LocalDisk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLocalDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.LocalDisk.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkLocalDisk(od);
    });
  });

  unittest.group('obj-schema-LocationPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLocationPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LocationPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLocationPolicy(od);
    });
  });

  unittest.group('obj-schema-LocationPolicyLocation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLocationPolicyLocation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LocationPolicyLocation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLocationPolicyLocation(od);
    });
  });

  unittest.group('obj-schema-LogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.LogConfig.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkLogConfig(od);
    });
  });

  unittest.group('obj-schema-LogConfigCloudAuditOptions', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLogConfigCloudAuditOptions();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LogConfigCloudAuditOptions.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLogConfigCloudAuditOptions(od);
    });
  });

  unittest.group('obj-schema-LogConfigCounterOptions', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLogConfigCounterOptions();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LogConfigCounterOptions.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLogConfigCounterOptions(od);
    });
  });

  unittest.group('obj-schema-LogConfigCounterOptionsCustomField', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLogConfigCounterOptionsCustomField();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LogConfigCounterOptionsCustomField.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLogConfigCounterOptionsCustomField(od);
    });
  });

  unittest.group('obj-schema-LogConfigDataAccessOptions', () {
    unittest.test('to-json--from-json', () async {
      final o = buildLogConfigDataAccessOptions();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.LogConfigDataAccessOptions.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkLogConfigDataAccessOptions(od);
    });
  });

  unittest.group('obj-schema-MachineTypeAccelerators', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeAccelerators();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeAccelerators.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeAccelerators(od);
    });
  });

  unittest.group('obj-schema-MachineTypeScratchDisks', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeScratchDisks();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeScratchDisks.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeScratchDisks(od);
    });
  });

  unittest.group('obj-schema-MachineType', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineType();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineType.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineType(od);
    });
  });

  unittest.group('obj-schema-MachineTypeAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-MachineTypeAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-MachineTypeAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeAggregatedList(od);
    });
  });

  unittest.group('obj-schema-MachineTypeListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeListWarningData(od);
    });
  });

  unittest.group('obj-schema-MachineTypeListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeListWarning(od);
    });
  });

  unittest.group('obj-schema-MachineTypeList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypeList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypeList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypeList(od);
    });
  });

  unittest.group('obj-schema-MachineTypesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-MachineTypesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-MachineTypesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMachineTypesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MachineTypesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMachineTypesScopedList(od);
    });
  });

  unittest.group('obj-schema-ManagedInstance', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstance();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstance.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstance(od);
    });
  });

  unittest.group('obj-schema-ManagedInstanceInstanceHealth', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstanceInstanceHealth();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstanceInstanceHealth.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstanceInstanceHealth(od);
    });
  });

  unittest.group('obj-schema-ManagedInstanceLastAttemptErrorsErrors', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstanceLastAttemptErrorsErrors();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstanceLastAttemptErrorsErrors.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstanceLastAttemptErrorsErrors(od);
    });
  });

  unittest.group('obj-schema-ManagedInstanceLastAttemptErrors', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstanceLastAttemptErrors();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstanceLastAttemptErrors.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstanceLastAttemptErrors(od);
    });
  });

  unittest.group('obj-schema-ManagedInstanceLastAttempt', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstanceLastAttempt();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstanceLastAttempt.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstanceLastAttempt(od);
    });
  });

  unittest.group('obj-schema-ManagedInstanceVersion', () {
    unittest.test('to-json--from-json', () async {
      final o = buildManagedInstanceVersion();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ManagedInstanceVersion.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkManagedInstanceVersion(od);
    });
  });

  unittest.group('obj-schema-MetadataItems', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMetadataItems();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MetadataItems.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMetadataItems(od);
    });
  });

  unittest.group('obj-schema-Metadata', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMetadata();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Metadata.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkMetadata(od);
    });
  });

  unittest.group('obj-schema-MetadataFilter', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMetadataFilter();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MetadataFilter.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMetadataFilter(od);
    });
  });

  unittest.group('obj-schema-MetadataFilterLabelMatch', () {
    unittest.test('to-json--from-json', () async {
      final o = buildMetadataFilterLabelMatch();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.MetadataFilterLabelMatch.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkMetadataFilterLabelMatch(od);
    });
  });

  unittest.group('obj-schema-NamedPort', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNamedPort();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.NamedPort.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkNamedPort(od);
    });
  });

  unittest.group('obj-schema-Network', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetwork();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Network.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkNetwork(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpoint', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpoint();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpoint.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpoint(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroup', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroup();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroup.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroup(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupAggregatedListWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupAggregatedList(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupAppEngine', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupAppEngine();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupAppEngine.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupAppEngine(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupCloudFunction', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupCloudFunction();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupCloudFunction.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupCloudFunction(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupCloudRun', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupCloudRun();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupCloudRun.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupCloudRun(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupListWarningData(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupListWarning(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupList(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsAttachEndpointsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsAttachEndpointsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsAttachEndpointsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsAttachEndpointsRequest(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsDetachEndpointsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsDetachEndpointsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsDetachEndpointsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsDetachEndpointsRequest(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsListEndpointsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsListEndpointsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsListEndpointsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsListEndpointsRequest(od);
    });
  });

  unittest.group(
      'obj-schema-NetworkEndpointGroupsListNetworkEndpointsWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsListNetworkEndpointsWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.NetworkEndpointGroupsListNetworkEndpointsWarningData.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsListNetworkEndpointsWarningData(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsListNetworkEndpointsWarning',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsListNetworkEndpointsWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsListNetworkEndpointsWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsListNetworkEndpointsWarning(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsListNetworkEndpoints', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsListNetworkEndpoints();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsListNetworkEndpoints.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsListNetworkEndpoints(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointGroupsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointGroupsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointGroupsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointGroupsScopedList(od);
    });
  });

  unittest.group('obj-schema-NetworkEndpointWithHealthStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkEndpointWithHealthStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkEndpointWithHealthStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkEndpointWithHealthStatus(od);
    });
  });

  unittest.group('obj-schema-NetworkInterface', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkInterface();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkInterface.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkInterface(od);
    });
  });

  unittest.group('obj-schema-NetworkListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkListWarningData(od);
    });
  });

  unittest.group('obj-schema-NetworkListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkListWarning(od);
    });
  });

  unittest.group('obj-schema-NetworkList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkList(od);
    });
  });

  unittest.group('obj-schema-NetworkPeering', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkPeering();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkPeering.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkPeering(od);
    });
  });

  unittest.group('obj-schema-NetworkRoutingConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworkRoutingConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworkRoutingConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworkRoutingConfig(od);
    });
  });

  unittest.group('obj-schema-NetworksAddPeeringRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworksAddPeeringRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworksAddPeeringRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworksAddPeeringRequest(od);
    });
  });

  unittest.group('obj-schema-NetworksGetEffectiveFirewallsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworksGetEffectiveFirewallsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworksGetEffectiveFirewallsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworksGetEffectiveFirewallsResponse(od);
    });
  });

  unittest.group(
      'obj-schema-NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
              .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(od);
    });
  });

  unittest.group('obj-schema-NetworksRemovePeeringRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworksRemovePeeringRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworksRemovePeeringRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworksRemovePeeringRequest(od);
    });
  });

  unittest.group('obj-schema-NetworksUpdatePeeringRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNetworksUpdatePeeringRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NetworksUpdatePeeringRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNetworksUpdatePeeringRequest(od);
    });
  });

  unittest.group('obj-schema-NodeGroup', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroup();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.NodeGroup.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroup(od);
    });
  });

  unittest.group('obj-schema-NodeGroupAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeGroupAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeGroupAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupAggregatedList(od);
    });
  });

  unittest.group('obj-schema-NodeGroupAutoscalingPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupAutoscalingPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupAutoscalingPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupAutoscalingPolicy(od);
    });
  });

  unittest.group('obj-schema-NodeGroupListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeGroupListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeGroupList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupList(od);
    });
  });

  unittest.group('obj-schema-NodeGroupMaintenanceWindow', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupMaintenanceWindow();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupMaintenanceWindow.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupMaintenanceWindow(od);
    });
  });

  unittest.group('obj-schema-NodeGroupNode', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupNode();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupNode.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupNode(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsAddNodesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsAddNodesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsAddNodesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsAddNodesRequest(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsDeleteNodesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsDeleteNodesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsDeleteNodesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsDeleteNodesRequest(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsListNodesWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsListNodesWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsListNodesWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsListNodesWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsListNodesWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsListNodesWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsListNodesWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsListNodesWarning(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsListNodes', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsListNodes();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsListNodes.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsListNodes(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsScopedList(od);
    });
  });

  unittest.group('obj-schema-NodeGroupsSetNodeTemplateRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeGroupsSetNodeTemplateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeGroupsSetNodeTemplateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeGroupsSetNodeTemplateRequest(od);
    });
  });

  unittest.group('obj-schema-NodeTemplate', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplate();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplate.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplate(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateAggregatedList(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateList(od);
    });
  });

  unittest.group('obj-schema-NodeTemplateNodeTypeFlexibility', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplateNodeTypeFlexibility();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplateNodeTypeFlexibility.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplateNodeTypeFlexibility(od);
    });
  });

  unittest.group('obj-schema-NodeTemplatesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplatesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplatesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplatesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTemplatesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplatesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplatesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplatesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTemplatesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTemplatesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTemplatesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTemplatesScopedList(od);
    });
  });

  unittest.group('obj-schema-NodeType', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeType();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.NodeType.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkNodeType(od);
    });
  });

  unittest.group('obj-schema-NodeTypeAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTypeAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTypeAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeAggregatedList(od);
    });
  });

  unittest.group('obj-schema-NodeTypeListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTypeListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTypeList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypeList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypeList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypeList(od);
    });
  });

  unittest.group('obj-schema-NodeTypesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-NodeTypesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-NodeTypesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNodeTypesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NodeTypesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNodeTypesScopedList(od);
    });
  });

  unittest.group('obj-schema-NotificationEndpoint', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNotificationEndpoint();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NotificationEndpoint.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNotificationEndpoint(od);
    });
  });

  unittest.group('obj-schema-NotificationEndpointGrpcSettings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNotificationEndpointGrpcSettings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NotificationEndpointGrpcSettings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNotificationEndpointGrpcSettings(od);
    });
  });

  unittest.group('obj-schema-NotificationEndpointListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNotificationEndpointListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NotificationEndpointListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNotificationEndpointListWarningData(od);
    });
  });

  unittest.group('obj-schema-NotificationEndpointListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNotificationEndpointListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NotificationEndpointListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNotificationEndpointListWarning(od);
    });
  });

  unittest.group('obj-schema-NotificationEndpointList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildNotificationEndpointList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.NotificationEndpointList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkNotificationEndpointList(od);
    });
  });

  unittest.group('obj-schema-OperationErrorErrors', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationErrorErrors();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationErrorErrors.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationErrorErrors(od);
    });
  });

  unittest.group('obj-schema-OperationError', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationError();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationError.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationError(od);
    });
  });

  unittest.group('obj-schema-OperationWarningsData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationWarningsData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationWarningsData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationWarningsData(od);
    });
  });

  unittest.group('obj-schema-OperationWarnings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationWarnings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationWarnings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationWarnings(od);
    });
  });

  unittest.group('obj-schema-Operation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Operation.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkOperation(od);
    });
  });

  unittest.group('obj-schema-OperationAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-OperationAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-OperationAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationAggregatedList(od);
    });
  });

  unittest.group('obj-schema-OperationListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationListWarningData(od);
    });
  });

  unittest.group('obj-schema-OperationListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationListWarning(od);
    });
  });

  unittest.group('obj-schema-OperationList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationList(od);
    });
  });

  unittest.group('obj-schema-OperationsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-OperationsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-OperationsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOperationsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OperationsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOperationsScopedList(od);
    });
  });

  unittest.group('obj-schema-OutlierDetection', () {
    unittest.test('to-json--from-json', () async {
      final o = buildOutlierDetection();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.OutlierDetection.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkOutlierDetection(od);
    });
  });

  unittest.group('obj-schema-PacketMirroring', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroring();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroring.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroring(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringAggregatedList(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringFilter', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringFilter();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringFilter.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringFilter(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringForwardingRuleInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringForwardingRuleInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringForwardingRuleInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringForwardingRuleInfo(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringListWarningData(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringListWarning(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringList(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringMirroredResourceInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringMirroredResourceInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringMirroredResourceInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringMirroredResourceInfo(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringMirroredResourceInfoInstanceInfo',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringMirroredResourceInfoInstanceInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringMirroredResourceInfoInstanceInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringMirroredResourceInfoInstanceInfo(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringMirroredResourceInfoSubnetInfo',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringMirroredResourceInfoSubnetInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringMirroredResourceInfoSubnetInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringMirroredResourceInfoSubnetInfo(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringNetworkInfo', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringNetworkInfo();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringNetworkInfo.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringNetworkInfo(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-PacketMirroringsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPacketMirroringsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PacketMirroringsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPacketMirroringsScopedList(od);
    });
  });

  unittest.group('obj-schema-PathMatcher', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPathMatcher();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PathMatcher.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPathMatcher(od);
    });
  });

  unittest.group('obj-schema-PathRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPathRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.PathRule.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkPathRule(od);
    });
  });

  unittest.group('obj-schema-PerInstanceConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPerInstanceConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PerInstanceConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPerInstanceConfig(od);
    });
  });

  unittest.group('obj-schema-Policy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Policy.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkPolicy(od);
    });
  });

  unittest.group('obj-schema-PreconfiguredWafSet', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPreconfiguredWafSet();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PreconfiguredWafSet.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPreconfiguredWafSet(od);
    });
  });

  unittest.group('obj-schema-PreservedState', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPreservedState();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PreservedState.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPreservedState(od);
    });
  });

  unittest.group('obj-schema-PreservedStatePreservedDisk', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPreservedStatePreservedDisk();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PreservedStatePreservedDisk.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPreservedStatePreservedDisk(od);
    });
  });

  unittest.group('obj-schema-Project', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProject();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Project.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkProject(od);
    });
  });

  unittest.group('obj-schema-ProjectsDisableXpnResourceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProjectsDisableXpnResourceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ProjectsDisableXpnResourceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkProjectsDisableXpnResourceRequest(od);
    });
  });

  unittest.group('obj-schema-ProjectsEnableXpnResourceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProjectsEnableXpnResourceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ProjectsEnableXpnResourceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkProjectsEnableXpnResourceRequest(od);
    });
  });

  unittest.group('obj-schema-ProjectsGetXpnResources', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProjectsGetXpnResources();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ProjectsGetXpnResources.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkProjectsGetXpnResources(od);
    });
  });

  unittest.group('obj-schema-ProjectsListXpnHostsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProjectsListXpnHostsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ProjectsListXpnHostsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkProjectsListXpnHostsRequest(od);
    });
  });

  unittest.group('obj-schema-ProjectsSetDefaultNetworkTierRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildProjectsSetDefaultNetworkTierRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ProjectsSetDefaultNetworkTierRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkProjectsSetDefaultNetworkTierRequest(od);
    });
  });

  unittest.group('obj-schema-PublicAdvertisedPrefix', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicAdvertisedPrefix();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicAdvertisedPrefix.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicAdvertisedPrefix(od);
    });
  });

  unittest.group('obj-schema-PublicAdvertisedPrefixListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicAdvertisedPrefixListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicAdvertisedPrefixListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicAdvertisedPrefixListWarningData(od);
    });
  });

  unittest.group('obj-schema-PublicAdvertisedPrefixListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicAdvertisedPrefixListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicAdvertisedPrefixListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicAdvertisedPrefixListWarning(od);
    });
  });

  unittest.group('obj-schema-PublicAdvertisedPrefixList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicAdvertisedPrefixList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicAdvertisedPrefixList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicAdvertisedPrefixList(od);
    });
  });

  unittest.group('obj-schema-PublicAdvertisedPrefixPublicDelegatedPrefix', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicAdvertisedPrefixPublicDelegatedPrefix();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicAdvertisedPrefixPublicDelegatedPrefix.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicAdvertisedPrefixPublicDelegatedPrefix(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefix', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefix();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefix.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefix(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixAggregatedListWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixAggregatedList(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixListWarningData(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixListWarning(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixList(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixPublicDelegatedSubPrefix',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixPublicDelegatedSubPrefix();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixPublicDelegatedSubPrefix.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixPublicDelegatedSubPrefix(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-PublicDelegatedPrefixesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildPublicDelegatedPrefixesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.PublicDelegatedPrefixesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkPublicDelegatedPrefixesScopedList(od);
    });
  });

  unittest.group('obj-schema-Quota', () {
    unittest.test('to-json--from-json', () async {
      final o = buildQuota();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Quota.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkQuota(od);
    });
  });

  unittest.group('obj-schema-Reference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Reference.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkReference(od);
    });
  });

  unittest.group('obj-schema-Region', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegion();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Region.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRegion(od);
    });
  });

  unittest.group('obj-schema-RegionAutoscalerListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionAutoscalerListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionAutoscalerListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionAutoscalerListWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionAutoscalerListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionAutoscalerListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionAutoscalerListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionAutoscalerListWarning(od);
    });
  });

  unittest.group('obj-schema-RegionAutoscalerList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionAutoscalerList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionAutoscalerList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionAutoscalerList(od);
    });
  });

  unittest.group('obj-schema-RegionDiskTypeListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDiskTypeListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDiskTypeListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDiskTypeListWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionDiskTypeListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDiskTypeListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDiskTypeListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDiskTypeListWarning(od);
    });
  });

  unittest.group('obj-schema-RegionDiskTypeList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDiskTypeList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDiskTypeList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDiskTypeList(od);
    });
  });

  unittest.group('obj-schema-RegionDisksAddResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDisksAddResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDisksAddResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDisksAddResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionDisksRemoveResourcePoliciesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDisksRemoveResourcePoliciesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDisksRemoveResourcePoliciesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDisksRemoveResourcePoliciesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionDisksResizeRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionDisksResizeRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionDisksResizeRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionDisksResizeRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupListWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupListWarning(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupList(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerDeleteInstanceConfigReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerDeleteInstanceConfigReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerDeleteInstanceConfigReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerDeleteInstanceConfigReq(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerListWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerListWarning(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerList(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerPatchInstanceConfigReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerPatchInstanceConfigReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerPatchInstanceConfigReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerPatchInstanceConfigReq(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagerUpdateInstanceConfigReq',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagerUpdateInstanceConfigReq();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagerUpdateInstanceConfigReq.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagerUpdateInstanceConfigReq(od);
    });
  });

  unittest.group(
      'obj-schema-RegionInstanceGroupManagersAbandonInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersAbandonInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RegionInstanceGroupManagersAbandonInstancesRequest.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersAbandonInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersApplyUpdatesRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersApplyUpdatesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersApplyUpdatesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersApplyUpdatesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersCreateInstancesRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersCreateInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersCreateInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersCreateInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersDeleteInstancesRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersDeleteInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersDeleteInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersDeleteInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersListErrorsResponse',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersListErrorsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersListErrorsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersListErrorsResponse(od);
    });
  });

  unittest.group(
      'obj-schema-RegionInstanceGroupManagersListInstanceConfigsRespWarningData',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildRegionInstanceGroupManagersListInstanceConfigsRespWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RegionInstanceGroupManagersListInstanceConfigsRespWarningData
              .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersListInstanceConfigsRespWarningData(od);
    });
  });

  unittest.group(
      'obj-schema-RegionInstanceGroupManagersListInstanceConfigsRespWarning',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildRegionInstanceGroupManagersListInstanceConfigsRespWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersListInstanceConfigsRespWarning
          .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersListInstanceConfigsRespWarning(od);
    });
  });

  unittest.group(
      'obj-schema-RegionInstanceGroupManagersListInstanceConfigsResp', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersListInstanceConfigsResp();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RegionInstanceGroupManagersListInstanceConfigsResp.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersListInstanceConfigsResp(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersListInstancesResponse',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersListInstancesResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersListInstancesResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersListInstancesResponse(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersRecreateRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersRecreateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersRecreateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersRecreateRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersSetTargetPoolsRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersSetTargetPoolsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersSetTargetPoolsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersSetTargetPoolsRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupManagersSetTemplateRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupManagersSetTemplateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupManagersSetTemplateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupManagersSetTemplateRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupsListInstancesWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupsListInstancesWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupsListInstancesWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupsListInstancesWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupsListInstancesWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupsListInstancesWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupsListInstancesWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupsListInstancesWarning(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupsListInstances', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupsListInstances();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupsListInstances.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupsListInstances(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupsListInstancesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupsListInstancesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupsListInstancesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupsListInstancesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionInstanceGroupsSetNamedPortsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionInstanceGroupsSetNamedPortsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionInstanceGroupsSetNamedPortsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionInstanceGroupsSetNamedPortsRequest(od);
    });
  });

  unittest.group('obj-schema-RegionListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionListWarningData(od);
    });
  });

  unittest.group('obj-schema-RegionListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionListWarning(od);
    });
  });

  unittest.group('obj-schema-RegionList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RegionList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRegionList(od);
    });
  });

  unittest.group('obj-schema-RegionSetLabelsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionSetLabelsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionSetLabelsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionSetLabelsRequest(od);
    });
  });

  unittest.group('obj-schema-RegionSetPolicyRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionSetPolicyRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionSetPolicyRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionSetPolicyRequest(od);
    });
  });

  unittest.group('obj-schema-RegionTargetHttpsProxiesSetSslCertificatesRequest',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionTargetHttpsProxiesSetSslCertificatesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionTargetHttpsProxiesSetSslCertificatesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionTargetHttpsProxiesSetSslCertificatesRequest(od);
    });
  });

  unittest.group('obj-schema-RegionUrlMapsValidateRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRegionUrlMapsValidateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RegionUrlMapsValidateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRegionUrlMapsValidateRequest(od);
    });
  });

  unittest.group('obj-schema-RequestMirrorPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRequestMirrorPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RequestMirrorPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRequestMirrorPolicy(od);
    });
  });

  unittest.group('obj-schema-Reservation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.Reservation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservation(od);
    });
  });

  unittest.group('obj-schema-ReservationAffinity', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationAffinity();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationAffinity.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationAffinity(od);
    });
  });

  unittest.group('obj-schema-ReservationAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ReservationAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-ReservationAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationAggregatedList(od);
    });
  });

  unittest.group('obj-schema-ReservationListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationListWarningData(od);
    });
  });

  unittest.group('obj-schema-ReservationListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationListWarning(od);
    });
  });

  unittest.group('obj-schema-ReservationList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationList(od);
    });
  });

  unittest.group('obj-schema-ReservationsResizeRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationsResizeRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationsResizeRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationsResizeRequest(od);
    });
  });

  unittest.group('obj-schema-ReservationsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ReservationsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-ReservationsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildReservationsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ReservationsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkReservationsScopedList(od);
    });
  });

  unittest.group('obj-schema-ResourceCommitment', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourceCommitment();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourceCommitment.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourceCommitment(od);
    });
  });

  unittest.group('obj-schema-ResourceGroupReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourceGroupReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourceGroupReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourceGroupReference(od);
    });
  });

  unittest.group('obj-schema-ResourcePoliciesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePoliciesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePoliciesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePoliciesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ResourcePoliciesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePoliciesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePoliciesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePoliciesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-ResourcePoliciesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePoliciesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePoliciesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePoliciesScopedList(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicy(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyAggregatedList(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyDailyCycle', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyDailyCycle();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyDailyCycle.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyDailyCycle(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyGroupPlacementPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyGroupPlacementPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyGroupPlacementPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyGroupPlacementPolicy(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyHourlyCycle', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyHourlyCycle();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyHourlyCycle.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyHourlyCycle(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyInstanceSchedulePolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyInstanceSchedulePolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyInstanceSchedulePolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyInstanceSchedulePolicy(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyInstanceSchedulePolicySchedule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyInstanceSchedulePolicySchedule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyInstanceSchedulePolicySchedule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyInstanceSchedulePolicySchedule(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyListWarningData(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyListWarning(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyList(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyResourceStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyResourceStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyResourceStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyResourceStatus(od);
    });
  });

  unittest.group(
      'obj-schema-ResourcePolicyResourceStatusInstanceSchedulePolicyStatus',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyResourceStatusInstanceSchedulePolicyStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.ResourcePolicyResourceStatusInstanceSchedulePolicyStatus.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyResourceStatusInstanceSchedulePolicyStatus(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicySnapshotSchedulePolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicySnapshotSchedulePolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicySnapshotSchedulePolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicySnapshotSchedulePolicy(od);
    });
  });

  unittest.group(
      'obj-schema-ResourcePolicySnapshotSchedulePolicyRetentionPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicySnapshotSchedulePolicyRetentionPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.ResourcePolicySnapshotSchedulePolicyRetentionPolicy.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicySnapshotSchedulePolicyRetentionPolicy(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicySnapshotSchedulePolicySchedule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicySnapshotSchedulePolicySchedule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicySnapshotSchedulePolicySchedule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicySnapshotSchedulePolicySchedule(od);
    });
  });

  unittest.group(
      'obj-schema-ResourcePolicySnapshotSchedulePolicySnapshotProperties', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicySnapshotSchedulePolicySnapshotProperties();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.ResourcePolicySnapshotSchedulePolicySnapshotProperties.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicySnapshotSchedulePolicySnapshotProperties(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyWeeklyCycle', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyWeeklyCycle();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyWeeklyCycle.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyWeeklyCycle(od);
    });
  });

  unittest.group('obj-schema-ResourcePolicyWeeklyCycleDayOfWeek', () {
    unittest.test('to-json--from-json', () async {
      final o = buildResourcePolicyWeeklyCycleDayOfWeek();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ResourcePolicyWeeklyCycleDayOfWeek.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkResourcePolicyWeeklyCycleDayOfWeek(od);
    });
  });

  unittest.group('obj-schema-RouteWarningsData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouteWarningsData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouteWarningsData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouteWarningsData(od);
    });
  });

  unittest.group('obj-schema-RouteWarnings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouteWarnings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouteWarnings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouteWarnings(od);
    });
  });

  unittest.group('obj-schema-Route', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRoute();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Route.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRoute(od);
    });
  });

  unittest.group('obj-schema-RouteListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouteListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouteListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouteListWarningData(od);
    });
  });

  unittest.group('obj-schema-RouteListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouteListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouteListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouteListWarning(od);
    });
  });

  unittest.group('obj-schema-RouteList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouteList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RouteList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRouteList(od);
    });
  });

  unittest.group('obj-schema-Router', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouter();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Router.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRouter(od);
    });
  });

  unittest.group('obj-schema-RouterAdvertisedIpRange', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterAdvertisedIpRange();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterAdvertisedIpRange.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterAdvertisedIpRange(od);
    });
  });

  unittest.group('obj-schema-RouterAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-RouterAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-RouterAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterAggregatedList(od);
    });
  });

  unittest.group('obj-schema-RouterBgp', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterBgp();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RouterBgp.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRouterBgp(od);
    });
  });

  unittest.group('obj-schema-RouterBgpPeer', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterBgpPeer();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterBgpPeer.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterBgpPeer(od);
    });
  });

  unittest.group('obj-schema-RouterInterface', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterInterface();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterInterface.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterInterface(od);
    });
  });

  unittest.group('obj-schema-RouterListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterListWarningData(od);
    });
  });

  unittest.group('obj-schema-RouterListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterListWarning(od);
    });
  });

  unittest.group('obj-schema-RouterList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RouterList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRouterList(od);
    });
  });

  unittest.group('obj-schema-RouterNat', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterNat();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.RouterNat.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRouterNat(od);
    });
  });

  unittest.group('obj-schema-RouterNatLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterNatLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterNatLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterNatLogConfig(od);
    });
  });

  unittest.group('obj-schema-RouterNatSubnetworkToNat', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterNatSubnetworkToNat();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterNatSubnetworkToNat.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterNatSubnetworkToNat(od);
    });
  });

  unittest.group('obj-schema-RouterStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterStatus(od);
    });
  });

  unittest.group('obj-schema-RouterStatusBgpPeerStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterStatusBgpPeerStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterStatusBgpPeerStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterStatusBgpPeerStatus(od);
    });
  });

  unittest.group('obj-schema-RouterStatusNatStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterStatusNatStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterStatusNatStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterStatusNatStatus(od);
    });
  });

  unittest.group('obj-schema-RouterStatusResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRouterStatusResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RouterStatusResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRouterStatusResponse(od);
    });
  });

  unittest.group('obj-schema-RoutersPreviewResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRoutersPreviewResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RoutersPreviewResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRoutersPreviewResponse(od);
    });
  });

  unittest.group('obj-schema-RoutersScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRoutersScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RoutersScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRoutersScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-RoutersScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRoutersScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RoutersScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRoutersScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-RoutersScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRoutersScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.RoutersScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkRoutersScopedList(od);
    });
  });

  unittest.group('obj-schema-Rule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Rule.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkRule(od);
    });
  });

  unittest.group('obj-schema-SSLHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSSLHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SSLHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSSLHealthCheck(od);
    });
  });

  unittest.group('obj-schema-ScalingScheduleStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildScalingScheduleStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ScalingScheduleStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkScalingScheduleStatus(od);
    });
  });

  unittest.group('obj-schema-Scheduling', () {
    unittest.test('to-json--from-json', () async {
      final o = buildScheduling();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Scheduling.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkScheduling(od);
    });
  });

  unittest.group('obj-schema-SchedulingNodeAffinity', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSchedulingNodeAffinity();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SchedulingNodeAffinity.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSchedulingNodeAffinity(od);
    });
  });

  unittest.group('obj-schema-Screenshot', () {
    unittest.test('to-json--from-json', () async {
      final o = buildScreenshot();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Screenshot.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkScreenshot(od);
    });
  });

  unittest.group(
      'obj-schema-SecurityPoliciesListPreconfiguredExpressionSetsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPoliciesListPreconfiguredExpressionSetsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.SecurityPoliciesListPreconfiguredExpressionSetsResponse.fromJson(
              oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPoliciesListPreconfiguredExpressionSetsResponse(od);
    });
  });

  unittest.group('obj-schema-SecurityPoliciesWafConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPoliciesWafConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPoliciesWafConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPoliciesWafConfig(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicy(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyAdaptiveProtectionConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyAdaptiveProtectionConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyAdaptiveProtectionConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyAdaptiveProtectionConfig(od);
    });
  });

  unittest.group(
      'obj-schema-SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig',
      () {
    unittest.test('to-json--from-json', () async {
      final o =
          buildSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
              .fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyAdvancedOptionsConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyAdvancedOptionsConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyAdvancedOptionsConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyAdvancedOptionsConfig(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyListWarningData(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyListWarning(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyList(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyReference(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyRule', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyRule();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyRule.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyRule(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyRuleMatcher', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyRuleMatcher();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyRuleMatcher.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyRuleMatcher(od);
    });
  });

  unittest.group('obj-schema-SecurityPolicyRuleMatcherConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecurityPolicyRuleMatcherConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecurityPolicyRuleMatcherConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecurityPolicyRuleMatcherConfig(od);
    });
  });

  unittest.group('obj-schema-SecuritySettings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSecuritySettings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SecuritySettings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSecuritySettings(od);
    });
  });

  unittest.group('obj-schema-SerialPortOutput', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSerialPortOutput();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SerialPortOutput.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSerialPortOutput(od);
    });
  });

  unittest.group('obj-schema-ServerBinding', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServerBinding();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServerBinding.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServerBinding(od);
    });
  });

  unittest.group('obj-schema-ServiceAccount', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAccount();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAccount.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAccount(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachment', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachment();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachment.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachment(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentAggregatedList(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentConnectedEndpoint', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentConnectedEndpoint();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentConnectedEndpoint.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentConnectedEndpoint(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentConsumerProjectLimit', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentConsumerProjectLimit();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentConsumerProjectLimit.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentConsumerProjectLimit(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentListWarningData(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentListWarning(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentList(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-ServiceAttachmentsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildServiceAttachmentsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ServiceAttachmentsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkServiceAttachmentsScopedList(od);
    });
  });

  unittest.group('obj-schema-ShieldedInstanceConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildShieldedInstanceConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ShieldedInstanceConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkShieldedInstanceConfig(od);
    });
  });

  unittest.group('obj-schema-ShieldedInstanceIdentity', () {
    unittest.test('to-json--from-json', () async {
      final o = buildShieldedInstanceIdentity();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ShieldedInstanceIdentity.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkShieldedInstanceIdentity(od);
    });
  });

  unittest.group('obj-schema-ShieldedInstanceIdentityEntry', () {
    unittest.test('to-json--from-json', () async {
      final o = buildShieldedInstanceIdentityEntry();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ShieldedInstanceIdentityEntry.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkShieldedInstanceIdentityEntry(od);
    });
  });

  unittest.group('obj-schema-ShieldedInstanceIntegrityPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildShieldedInstanceIntegrityPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ShieldedInstanceIntegrityPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkShieldedInstanceIntegrityPolicy(od);
    });
  });

  unittest.group('obj-schema-SignedUrlKey', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSignedUrlKey();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SignedUrlKey.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSignedUrlKey(od);
    });
  });

  unittest.group('obj-schema-Snapshot', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSnapshot();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Snapshot.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkSnapshot(od);
    });
  });

  unittest.group('obj-schema-SnapshotListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSnapshotListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SnapshotListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSnapshotListWarningData(od);
    });
  });

  unittest.group('obj-schema-SnapshotListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSnapshotListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SnapshotListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSnapshotListWarning(od);
    });
  });

  unittest.group('obj-schema-SnapshotList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSnapshotList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SnapshotList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSnapshotList(od);
    });
  });

  unittest.group('obj-schema-SourceInstanceParams', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSourceInstanceParams();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SourceInstanceParams.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSourceInstanceParams(od);
    });
  });

  unittest.group('obj-schema-SslCertificate', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificate();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificate.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificate(od);
    });
  });

  unittest.group('obj-schema-SslCertificateAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-SslCertificateAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-SslCertificateAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateAggregatedList(od);
    });
  });

  unittest.group('obj-schema-SslCertificateListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateListWarningData(od);
    });
  });

  unittest.group('obj-schema-SslCertificateListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateListWarning(od);
    });
  });

  unittest.group('obj-schema-SslCertificateList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateList(od);
    });
  });

  unittest.group('obj-schema-SslCertificateManagedSslCertificate', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateManagedSslCertificate();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateManagedSslCertificate.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateManagedSslCertificate(od);
    });
  });

  unittest.group('obj-schema-SslCertificateSelfManagedSslCertificate', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificateSelfManagedSslCertificate();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificateSelfManagedSslCertificate.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificateSelfManagedSslCertificate(od);
    });
  });

  unittest.group('obj-schema-SslCertificatesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificatesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificatesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificatesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-SslCertificatesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificatesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificatesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificatesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-SslCertificatesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslCertificatesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslCertificatesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslCertificatesScopedList(od);
    });
  });

  unittest.group('obj-schema-SslPoliciesListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPoliciesListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPoliciesListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPoliciesListWarningData(od);
    });
  });

  unittest.group('obj-schema-SslPoliciesListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPoliciesListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPoliciesListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPoliciesListWarning(od);
    });
  });

  unittest.group('obj-schema-SslPoliciesList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPoliciesList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPoliciesList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPoliciesList(od);
    });
  });

  unittest.group('obj-schema-SslPoliciesListAvailableFeaturesResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPoliciesListAvailableFeaturesResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPoliciesListAvailableFeaturesResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPoliciesListAvailableFeaturesResponse(od);
    });
  });

  unittest.group('obj-schema-SslPolicyWarningsData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPolicyWarningsData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPolicyWarningsData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPolicyWarningsData(od);
    });
  });

  unittest.group('obj-schema-SslPolicyWarnings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPolicyWarnings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPolicyWarnings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPolicyWarnings(od);
    });
  });

  unittest.group('obj-schema-SslPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.SslPolicy.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkSslPolicy(od);
    });
  });

  unittest.group('obj-schema-SslPolicyReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSslPolicyReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SslPolicyReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSslPolicyReference(od);
    });
  });

  unittest.group('obj-schema-StatefulPolicy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildStatefulPolicy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.StatefulPolicy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkStatefulPolicy(od);
    });
  });

  unittest.group('obj-schema-StatefulPolicyPreservedState', () {
    unittest.test('to-json--from-json', () async {
      final o = buildStatefulPolicyPreservedState();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.StatefulPolicyPreservedState.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkStatefulPolicyPreservedState(od);
    });
  });

  unittest.group('obj-schema-StatefulPolicyPreservedStateDiskDevice', () {
    unittest.test('to-json--from-json', () async {
      final o = buildStatefulPolicyPreservedStateDiskDevice();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.StatefulPolicyPreservedStateDiskDevice.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkStatefulPolicyPreservedStateDiskDevice(od);
    });
  });

  unittest.group('obj-schema-Subnetwork', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetwork();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Subnetwork.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkSubnetwork(od);
    });
  });

  unittest.group('obj-schema-SubnetworkAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-SubnetworkAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-SubnetworkAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkAggregatedList(od);
    });
  });

  unittest.group('obj-schema-SubnetworkListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkListWarningData(od);
    });
  });

  unittest.group('obj-schema-SubnetworkListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkListWarning(od);
    });
  });

  unittest.group('obj-schema-SubnetworkList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkList(od);
    });
  });

  unittest.group('obj-schema-SubnetworkLogConfig', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkLogConfig();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkLogConfig.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkLogConfig(od);
    });
  });

  unittest.group('obj-schema-SubnetworkSecondaryRange', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworkSecondaryRange();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworkSecondaryRange.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworkSecondaryRange(od);
    });
  });

  unittest.group('obj-schema-SubnetworksExpandIpCidrRangeRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworksExpandIpCidrRangeRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworksExpandIpCidrRangeRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworksExpandIpCidrRangeRequest(od);
    });
  });

  unittest.group('obj-schema-SubnetworksScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworksScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworksScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworksScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-SubnetworksScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworksScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworksScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworksScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-SubnetworksScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworksScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworksScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworksScopedList(od);
    });
  });

  unittest.group('obj-schema-SubnetworksSetPrivateIpGoogleAccessRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildSubnetworksSetPrivateIpGoogleAccessRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.SubnetworksSetPrivateIpGoogleAccessRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkSubnetworksSetPrivateIpGoogleAccessRequest(od);
    });
  });

  unittest.group('obj-schema-TCPHealthCheck', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTCPHealthCheck();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TCPHealthCheck.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTCPHealthCheck(od);
    });
  });

  unittest.group('obj-schema-Tags', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTags();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Tags.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkTags(od);
    });
  });

  unittest.group('obj-schema-TargetGrpcProxy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetGrpcProxy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetGrpcProxy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetGrpcProxy(od);
    });
  });

  unittest.group('obj-schema-TargetGrpcProxyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetGrpcProxyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetGrpcProxyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetGrpcProxyListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetGrpcProxyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetGrpcProxyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetGrpcProxyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetGrpcProxyListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetGrpcProxyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetGrpcProxyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetGrpcProxyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetGrpcProxyList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxiesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxiesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxiesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxiesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxiesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxiesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxiesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxiesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxiesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxiesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxiesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxiesScopedList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxy(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxyAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxyAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxyAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxyAggregatedList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxyListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxyListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetHttpProxyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpProxyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpProxyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpProxyList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxiesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxiesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxiesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxiesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxiesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxiesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxiesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxiesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxiesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxiesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxiesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxiesScopedList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxiesSetQuicOverrideRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxiesSetQuicOverrideRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxiesSetQuicOverrideRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxiesSetQuicOverrideRequest(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxiesSetSslCertificatesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxiesSetSslCertificatesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxiesSetSslCertificatesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxiesSetSslCertificatesRequest(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxy(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyAggregatedList(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetHttpsProxyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetHttpsProxyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetHttpsProxyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetHttpsProxyList(od);
    });
  });

  unittest.group('obj-schema-TargetInstance', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstance();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstance.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstance(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceAggregatedList(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetInstanceList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstanceList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstanceList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstanceList(od);
    });
  });

  unittest.group('obj-schema-TargetInstancesScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstancesScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstancesScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstancesScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetInstancesScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstancesScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstancesScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstancesScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetInstancesScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetInstancesScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetInstancesScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetInstancesScopedList(od);
    });
  });

  unittest.group('obj-schema-TargetPool', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPool();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.TargetPool.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkTargetPool(od);
    });
  });

  unittest.group('obj-schema-TargetPoolAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetPoolAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetPoolAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolAggregatedList(od);
    });
  });

  unittest.group('obj-schema-TargetPoolInstanceHealth', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolInstanceHealth();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolInstanceHealth.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolInstanceHealth(od);
    });
  });

  unittest.group('obj-schema-TargetPoolListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetPoolListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetPoolList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolList(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsAddHealthCheckRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsAddHealthCheckRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsAddHealthCheckRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsAddHealthCheckRequest(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsAddInstanceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsAddInstanceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsAddInstanceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsAddInstanceRequest(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsRemoveHealthCheckRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsRemoveHealthCheckRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsRemoveHealthCheckRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsRemoveHealthCheckRequest(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsRemoveInstanceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsRemoveInstanceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsRemoveInstanceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsRemoveInstanceRequest(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetPoolsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetPoolsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetPoolsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetPoolsScopedList(od);
    });
  });

  unittest.group('obj-schema-TargetReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetReference(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxiesSetBackendServiceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxiesSetBackendServiceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxiesSetBackendServiceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxiesSetBackendServiceRequest(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxiesSetProxyHeaderRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxiesSetProxyHeaderRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxiesSetProxyHeaderRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxiesSetProxyHeaderRequest(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxiesSetSslCertificatesRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxiesSetSslCertificatesRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxiesSetSslCertificatesRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxiesSetSslCertificatesRequest(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxy(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxyListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxyListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetSslProxyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetSslProxyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetSslProxyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetSslProxyList(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxiesSetBackendServiceRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxiesSetBackendServiceRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxiesSetBackendServiceRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxiesSetBackendServiceRequest(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxiesSetProxyHeaderRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxiesSetProxyHeaderRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxiesSetProxyHeaderRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxiesSetProxyHeaderRequest(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxy', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxy();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxy.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxy(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxyListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxyListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxyListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxyListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxyListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxyListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxyListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxyListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetTcpProxyList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetTcpProxyList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetTcpProxyList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetTcpProxyList(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGateway', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGateway();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGateway.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGateway(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayAggregatedList(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewayList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewayList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewayList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewayList(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewaysScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewaysScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewaysScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewaysScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewaysScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewaysScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewaysScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewaysScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-TargetVpnGatewaysScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTargetVpnGatewaysScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TargetVpnGatewaysScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTargetVpnGatewaysScopedList(od);
    });
  });

  unittest.group('obj-schema-TestFailure', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTestFailure();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TestFailure.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTestFailure(od);
    });
  });

  unittest.group('obj-schema-TestPermissionsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTestPermissionsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TestPermissionsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTestPermissionsRequest(od);
    });
  });

  unittest.group('obj-schema-TestPermissionsResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildTestPermissionsResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.TestPermissionsResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkTestPermissionsResponse(od);
    });
  });

  unittest.group('obj-schema-Uint128', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUint128();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Uint128.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkUint128(od);
    });
  });

  unittest.group('obj-schema-UrlMap', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMap();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.UrlMap.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkUrlMap(od);
    });
  });

  unittest.group('obj-schema-UrlMapListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapListWarningData(od);
    });
  });

  unittest.group('obj-schema-UrlMapListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapListWarning(od);
    });
  });

  unittest.group('obj-schema-UrlMapList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.UrlMapList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapList(od);
    });
  });

  unittest.group('obj-schema-UrlMapReference', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapReference();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapReference.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapReference(od);
    });
  });

  unittest.group('obj-schema-UrlMapTest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapTest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.UrlMapTest.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapTest(od);
    });
  });

  unittest.group('obj-schema-UrlMapTestHeader', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapTestHeader();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapTestHeader.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapTestHeader(od);
    });
  });

  unittest.group('obj-schema-UrlMapValidationResult', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapValidationResult();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapValidationResult.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapValidationResult(od);
    });
  });

  unittest.group('obj-schema-UrlMapsAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-UrlMapsAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-UrlMapsAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsAggregatedList(od);
    });
  });

  unittest.group('obj-schema-UrlMapsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-UrlMapsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-UrlMapsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsScopedList(od);
    });
  });

  unittest.group('obj-schema-UrlMapsValidateRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsValidateRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsValidateRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsValidateRequest(od);
    });
  });

  unittest.group('obj-schema-UrlMapsValidateResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlMapsValidateResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UrlMapsValidateResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUrlMapsValidateResponse(od);
    });
  });

  unittest.group('obj-schema-UrlRewrite', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUrlRewrite();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.UrlRewrite.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkUrlRewrite(od);
    });
  });

  unittest.group('obj-schema-UsableSubnetwork', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsableSubnetwork();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsableSubnetwork.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsableSubnetwork(od);
    });
  });

  unittest.group('obj-schema-UsableSubnetworkSecondaryRange', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsableSubnetworkSecondaryRange();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsableSubnetworkSecondaryRange.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsableSubnetworkSecondaryRange(od);
    });
  });

  unittest.group('obj-schema-UsableSubnetworksAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsableSubnetworksAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsableSubnetworksAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsableSubnetworksAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-UsableSubnetworksAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsableSubnetworksAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsableSubnetworksAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsableSubnetworksAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-UsableSubnetworksAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsableSubnetworksAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsableSubnetworksAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsableSubnetworksAggregatedList(od);
    });
  });

  unittest.group('obj-schema-UsageExportLocation', () {
    unittest.test('to-json--from-json', () async {
      final o = buildUsageExportLocation();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.UsageExportLocation.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkUsageExportLocation(od);
    });
  });

  unittest.group('obj-schema-VmEndpointNatMappings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVmEndpointNatMappings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VmEndpointNatMappings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVmEndpointNatMappings(od);
    });
  });

  unittest.group('obj-schema-VmEndpointNatMappingsInterfaceNatMappings', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVmEndpointNatMappingsInterfaceNatMappings();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VmEndpointNatMappingsInterfaceNatMappings.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVmEndpointNatMappingsInterfaceNatMappings(od);
    });
  });

  unittest.group('obj-schema-VmEndpointNatMappingsListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVmEndpointNatMappingsListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VmEndpointNatMappingsListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVmEndpointNatMappingsListWarningData(od);
    });
  });

  unittest.group('obj-schema-VmEndpointNatMappingsListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVmEndpointNatMappingsListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VmEndpointNatMappingsListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVmEndpointNatMappingsListWarning(od);
    });
  });

  unittest.group('obj-schema-VmEndpointNatMappingsList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVmEndpointNatMappingsList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VmEndpointNatMappingsList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVmEndpointNatMappingsList(od);
    });
  });

  unittest.group('obj-schema-VpnGateway', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGateway();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.VpnGateway.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkVpnGateway(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayAggregatedList(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayList(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayStatus', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayStatus();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayStatus.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayStatus(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayStatusHighAvailabilityRequirementState',
      () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayStatusHighAvailabilityRequirementState();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayStatusHighAvailabilityRequirementState.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayStatusHighAvailabilityRequirementState(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayStatusTunnel', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayStatusTunnel();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayStatusTunnel.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayStatusTunnel(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayStatusVpnConnection', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayStatusVpnConnection();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayStatusVpnConnection.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayStatusVpnConnection(od);
    });
  });

  unittest.group('obj-schema-VpnGatewayVpnGatewayInterface', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewayVpnGatewayInterface();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewayVpnGatewayInterface.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewayVpnGatewayInterface(od);
    });
  });

  unittest.group('obj-schema-VpnGatewaysGetStatusResponse', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewaysGetStatusResponse();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewaysGetStatusResponse.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewaysGetStatusResponse(od);
    });
  });

  unittest.group('obj-schema-VpnGatewaysScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewaysScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewaysScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewaysScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnGatewaysScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewaysScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewaysScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewaysScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnGatewaysScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnGatewaysScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnGatewaysScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnGatewaysScopedList(od);
    });
  });

  unittest.group('obj-schema-VpnTunnel', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnel();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.VpnTunnel.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnel(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelAggregatedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelAggregatedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelAggregatedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelAggregatedListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelAggregatedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelAggregatedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelAggregatedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelAggregatedListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelAggregatedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelAggregatedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelAggregatedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelAggregatedList(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelList(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelsScopedListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelsScopedListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelsScopedListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelsScopedListWarningData(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelsScopedListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelsScopedListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelsScopedListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelsScopedListWarning(od);
    });
  });

  unittest.group('obj-schema-VpnTunnelsScopedList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildVpnTunnelsScopedList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.VpnTunnelsScopedList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkVpnTunnelsScopedList(od);
    });
  });

  unittest.group('obj-schema-WafExpressionSet', () {
    unittest.test('to-json--from-json', () async {
      final o = buildWafExpressionSet();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.WafExpressionSet.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkWafExpressionSet(od);
    });
  });

  unittest.group('obj-schema-WafExpressionSetExpression', () {
    unittest.test('to-json--from-json', () async {
      final o = buildWafExpressionSetExpression();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.WafExpressionSetExpression.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkWafExpressionSetExpression(od);
    });
  });

  unittest.group('obj-schema-WeightedBackendService', () {
    unittest.test('to-json--from-json', () async {
      final o = buildWeightedBackendService();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.WeightedBackendService.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkWeightedBackendService(od);
    });
  });

  unittest.group('obj-schema-XpnHostListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildXpnHostListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.XpnHostListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkXpnHostListWarningData(od);
    });
  });

  unittest.group('obj-schema-XpnHostListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildXpnHostListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.XpnHostListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkXpnHostListWarning(od);
    });
  });

  unittest.group('obj-schema-XpnHostList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildXpnHostList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.XpnHostList.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkXpnHostList(od);
    });
  });

  unittest.group('obj-schema-XpnResourceId', () {
    unittest.test('to-json--from-json', () async {
      final o = buildXpnResourceId();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.XpnResourceId.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkXpnResourceId(od);
    });
  });

  unittest.group('obj-schema-Zone', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZone();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.Zone.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkZone(od);
    });
  });

  unittest.group('obj-schema-ZoneListWarningData', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZoneListWarningData();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ZoneListWarningData.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkZoneListWarningData(od);
    });
  });

  unittest.group('obj-schema-ZoneListWarning', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZoneListWarning();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ZoneListWarning.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkZoneListWarning(od);
    });
  });

  unittest.group('obj-schema-ZoneList', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZoneList();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od =
          api.ZoneList.fromJson(oJson as core.Map<core.String, core.dynamic>);
      checkZoneList(od);
    });
  });

  unittest.group('obj-schema-ZoneSetLabelsRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZoneSetLabelsRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ZoneSetLabelsRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkZoneSetLabelsRequest(od);
    });
  });

  unittest.group('obj-schema-ZoneSetPolicyRequest', () {
    unittest.test('to-json--from-json', () async {
      final o = buildZoneSetPolicyRequest();
      final oJson = convert.jsonDecode(convert.jsonEncode(o));
      final od = api.ZoneSetPolicyRequest.fromJson(
          oJson as core.Map<core.String, core.dynamic>);
      checkZoneSetPolicyRequest(od);
    });
  });

  unittest.group('resource-AcceleratorTypesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).acceleratorTypes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/acceleratorTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/aggregated/acceleratorTypes'),
        );
        pathOffset += 28;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAcceleratorTypeAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAcceleratorTypeAggregatedList(
          response as api.AcceleratorTypeAggregatedList);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).acceleratorTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_acceleratorType = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/acceleratorTypes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/acceleratorTypes/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_acceleratorType'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAcceleratorType());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_acceleratorType,
          $fields: arg_$fields);
      checkAcceleratorType(response as api.AcceleratorType);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).acceleratorTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/acceleratorTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/acceleratorTypes'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAcceleratorTypeList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAcceleratorTypeList(response as api.AcceleratorTypeList);
    });
  });

  unittest.group('resource-AddressesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).addresses;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/addresses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/aggregated/addresses'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAddressAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAddressAggregatedList(response as api.AddressAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).addresses;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_address = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/addresses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/addresses/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_address'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_address,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).addresses;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_address = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/addresses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/addresses/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_address'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAddress());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_address,
          $fields: arg_$fields);
      checkAddress(response as api.Address);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).addresses;
      final arg_request = buildAddress();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Address.fromJson(json as core.Map<core.String, core.dynamic>);
        checkAddress(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/addresses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/addresses'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).addresses;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/addresses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/addresses'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAddressList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAddressList(response as api.AddressList);
    });
  });

  unittest.group('resource-AutoscalersResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/aggregated/autoscalers'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAutoscalerAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAutoscalerAggregatedList(response as api.AutoscalerAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/autoscalers/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_autoscaler'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_zone, arg_autoscaler,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_autoscaler = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/autoscalers/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_autoscaler'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAutoscaler());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_autoscaler,
          $fields: arg_$fields);
      checkAutoscaler(response as api.Autoscaler);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAutoscalerList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAutoscalerList(response as api.AutoscalerList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['autoscaler']!.first,
          unittest.equals(arg_autoscaler),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_zone,
          autoscaler: arg_autoscaler,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).autoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['autoscaler']!.first,
          unittest.equals(arg_autoscaler),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(arg_request, arg_project, arg_zone,
          autoscaler: arg_autoscaler,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-BackendBucketsResource', () {
    unittest.test('method--addSignedUrlKey', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_request = buildSignedUrlKey();
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SignedUrlKey.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSignedUrlKey(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        index = path.indexOf('/addSignedUrlKey', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/addSignedUrlKey'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addSignedUrlKey(
          arg_request, arg_project, arg_backendBucket,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_backendBucket,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteSignedUrlKey', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_keyName = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        index = path.indexOf('/deleteSignedUrlKey', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/deleteSignedUrlKey'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['keyName']!.first,
          unittest.equals(arg_keyName),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteSignedUrlKey(
          arg_project, arg_backendBucket, arg_keyName,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendBucket());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_backendBucket, $fields: arg_$fields);
      checkBackendBucket(response as api.BackendBucket);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_request = buildBackendBucket();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendBucket.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendBucket(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/backendBuckets'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/backendBuckets'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendBucketList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkBackendBucketList(response as api.BackendBucketList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_request = buildBackendBucket();
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendBucket.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendBucket(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_backendBucket,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendBuckets;
      final arg_request = buildBackendBucket();
      final arg_project = 'foo';
      final arg_backendBucket = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendBucket.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendBucket(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendBuckets/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendBuckets/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendBucket'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_backendBucket,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-BackendServicesResource', () {
    unittest.test('method--addSignedUrlKey', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildSignedUrlKey();
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SignedUrlKey.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSignedUrlKey(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        index = path.indexOf('/addSignedUrlKey', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/addSignedUrlKey'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addSignedUrlKey(
          arg_request, arg_project, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/backendServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/aggregated/backendServices'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendServiceAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkBackendServiceAggregatedList(
          response as api.BackendServiceAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteSignedUrlKey', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_keyName = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        index = path.indexOf('/deleteSignedUrlKey', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/deleteSignedUrlKey'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['keyName']!.first,
          unittest.equals(arg_keyName),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteSignedUrlKey(
          arg_project, arg_backendService, arg_keyName,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendService());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_backendService, $fields: arg_$fields);
      checkBackendService(response as api.BackendService);
    });

    unittest.test('method--getHealth', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildResourceGroupReference();
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ResourceGroupReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkResourceGroupReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        index = path.indexOf('/getHealth', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/getHealth'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendServiceGroupHealth());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getHealth(
          arg_request, arg_project, arg_backendService,
          $fields: arg_$fields);
      checkBackendServiceGroupHealth(response as api.BackendServiceGroupHealth);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendServices'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/backendServices'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendServiceList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkBackendServiceList(response as api.BackendServiceList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setSecurityPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildSecurityPolicyReference();
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SecurityPolicyReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSecurityPolicyReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        index = path.indexOf('/setSecurityPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setSecurityPolicy'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSecurityPolicy(
          arg_request, arg_project, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).backendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/backendServices/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-DiskTypesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).diskTypes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/diskTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/aggregated/diskTypes'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskTypeAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkDiskTypeAggregatedList(response as api.DiskTypeAggregatedList);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).diskTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_diskType = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/diskTypes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/diskTypes/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_diskType'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskType());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_diskType,
          $fields: arg_$fields);
      checkDiskType(response as api.DiskType);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).diskTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/diskTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/diskTypes'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskTypeList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkDiskTypeList(response as api.DiskTypeList);
    });
  });

  unittest.group('resource-DisksResource', () {
    unittest.test('method--addResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildDisksAddResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DisksAddResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDisksAddResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/addResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/addResourcePolicies'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addResourcePolicies(
          arg_request, arg_project, arg_zone, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/disks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/aggregated/disks'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkDiskAggregatedList(response as api.DiskAggregatedList);
    });

    unittest.test('method--createSnapshot', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildSnapshot();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_guestFlush = true;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Snapshot.fromJson(json as core.Map<core.String, core.dynamic>);
        checkSnapshot(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/createSnapshot', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/createSnapshot'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['guestFlush']!.first,
          unittest.equals('$arg_guestFlush'),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.createSnapshot(
          arg_request, arg_project, arg_zone, arg_disk,
          guestFlush: arg_guestFlush,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_zone, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDisk());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_zone, arg_disk, $fields: arg_$fields);
      checkDisk(response as api.Disk);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_zone, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildDisk();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_sourceImage = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Disk.fromJson(json as core.Map<core.String, core.dynamic>);
        checkDisk(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/disks'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['sourceImage']!.first,
          unittest.equals(arg_sourceImage),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId,
          sourceImage: arg_sourceImage,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/disks'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkDiskList(response as api.DiskList);
    });

    unittest.test('method--removeResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildDisksRemoveResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DisksRemoveResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDisksRemoveResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/removeResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/removeResourcePolicies'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeResourcePolicies(
          arg_request, arg_project, arg_zone, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--resize', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildDisksResizeRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DisksResizeRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDisksResizeRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/resize', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/resize'),
        );
        pathOffset += 7;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.resize(
          arg_request, arg_project, arg_zone, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildZoneSetPolicyRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ZoneSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkZoneSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildZoneSetLabelsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ZoneSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkZoneSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_zone, arg_resource,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).disks;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-ExternalVpnGatewaysResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_project = 'foo';
      final arg_externalVpnGateway = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/global/externalVpnGateways/'),
        );
        pathOffset += 28;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_externalVpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_externalVpnGateway,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_project = 'foo';
      final arg_externalVpnGateway = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/global/externalVpnGateways/'),
        );
        pathOffset += 28;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_externalVpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildExternalVpnGateway());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_externalVpnGateway,
          $fields: arg_$fields);
      checkExternalVpnGateway(response as api.ExternalVpnGateway);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_request = buildExternalVpnGateway();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ExternalVpnGateway.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkExternalVpnGateway(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/externalVpnGateways'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/externalVpnGateways'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildExternalVpnGatewayList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkExternalVpnGatewayList(response as api.ExternalVpnGatewayList);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_request = buildGlobalSetLabelsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/global/externalVpnGateways/'),
        );
        pathOffset += 28;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).externalVpnGateways;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/externalVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/global/externalVpnGateways/'),
        );
        pathOffset += 28;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-FirewallPoliciesResource', () {
    unittest.test('method--addAssociation', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildFirewallPolicyAssociation();
      final arg_firewallPolicy = 'foo';
      final arg_replaceExistingAssociation = true;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.FirewallPolicyAssociation.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkFirewallPolicyAssociation(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/addAssociation', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/addAssociation'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['replaceExistingAssociation']!.first,
          unittest.equals('$arg_replaceExistingAssociation'),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addAssociation(arg_request, arg_firewallPolicy,
          replaceExistingAssociation: arg_replaceExistingAssociation,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--addRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildFirewallPolicyRule();
      final arg_firewallPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.FirewallPolicyRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkFirewallPolicyRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/addRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/addRule'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addRule(arg_request, arg_firewallPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--cloneRules', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_sourceFirewallPolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/cloneRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/cloneRules'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['sourceFirewallPolicy']!.first,
          unittest.equals(arg_sourceFirewallPolicy),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.cloneRules(arg_firewallPolicy,
          requestId: arg_requestId,
          sourceFirewallPolicy: arg_sourceFirewallPolicy,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_firewallPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewallPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_firewallPolicy, $fields: arg_$fields);
      checkFirewallPolicy(response as api.FirewallPolicy);
    });

    unittest.test('method--getAssociation', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_name = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/getAssociation', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/getAssociation'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['name']!.first,
          unittest.equals(arg_name),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewallPolicyAssociation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getAssociation(arg_firewallPolicy,
          name: arg_name, $fields: arg_$fields);
      checkFirewallPolicyAssociation(response as api.FirewallPolicyAssociation);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--getRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_priority = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/getRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/getRule'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewallPolicyRule());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getRule(arg_firewallPolicy,
          priority: arg_priority, $fields: arg_$fields);
      checkFirewallPolicyRule(response as api.FirewallPolicyRule);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildFirewallPolicy();
      final arg_parentId = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.FirewallPolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkFirewallPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('locations/global/firewallPolicies'),
        );
        pathOffset += 33;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request,
          parentId: arg_parentId,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_parentId = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('locations/global/firewallPolicies'),
        );
        pathOffset += 33;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewallPolicyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          parentId: arg_parentId,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkFirewallPolicyList(response as api.FirewallPolicyList);
    });

    unittest.test('method--listAssociations', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_targetResource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 50),
          unittest.equals('locations/global/firewallPolicies/listAssociations'),
        );
        pathOffset += 50;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['targetResource']!.first,
          unittest.equals(arg_targetResource),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildFirewallPoliciesListAssociationsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listAssociations(
          targetResource: arg_targetResource, $fields: arg_$fields);
      checkFirewallPoliciesListAssociationsResponse(
          response as api.FirewallPoliciesListAssociationsResponse);
    });

    unittest.test('method--move', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_parentId = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/move', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 5),
          unittest.equals('/move'),
        );
        pathOffset += 5;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.move(arg_firewallPolicy,
          parentId: arg_parentId,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildFirewallPolicy();
      final arg_firewallPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.FirewallPolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkFirewallPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_firewallPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--patchRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildFirewallPolicyRule();
      final arg_firewallPolicy = 'foo';
      final arg_priority = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.FirewallPolicyRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkFirewallPolicyRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/patchRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/patchRule'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patchRule(arg_request, arg_firewallPolicy,
          priority: arg_priority,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--removeAssociation', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_name = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/removeAssociation', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/removeAssociation'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['name']!.first,
          unittest.equals(arg_name),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeAssociation(arg_firewallPolicy,
          name: arg_name, requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--removeRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_firewallPolicy = 'foo';
      final arg_priority = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/removeRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewallPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/removeRule'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeRule(arg_firewallPolicy,
          priority: arg_priority,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildGlobalOrganizationSetPolicyRequest();
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalOrganizationSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalOrganizationSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(arg_request, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewallPolicies;
      final arg_request = buildTestPermissionsRequest();
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('locations/global/firewallPolicies/'),
        );
        pathOffset += 34;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(arg_request, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-FirewallsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_project = 'foo';
      final arg_firewall = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/firewalls/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewall'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_firewall,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_project = 'foo';
      final arg_firewall = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/firewalls/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewall'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewall());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_firewall, $fields: arg_$fields);
      checkFirewall(response as api.Firewall);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_request = buildFirewall();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Firewall.fromJson(json as core.Map<core.String, core.dynamic>);
        checkFirewall(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/firewalls'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/firewalls'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildFirewallList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkFirewallList(response as api.FirewallList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_request = buildFirewall();
      final arg_project = 'foo';
      final arg_firewall = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Firewall.fromJson(json as core.Map<core.String, core.dynamic>);
        checkFirewall(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/firewalls/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewall'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_firewall,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).firewalls;
      final arg_request = buildFirewall();
      final arg_project = 'foo';
      final arg_firewall = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Firewall.fromJson(json as core.Map<core.String, core.dynamic>);
        checkFirewall(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/firewalls/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/firewalls/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_firewall'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(arg_request, arg_project, arg_firewall,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-ForwardingRulesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/forwardingRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/aggregated/forwardingRules'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildForwardingRuleAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkForwardingRuleAggregatedList(
          response as api.ForwardingRuleAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/forwardingRules/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/forwardingRules/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildForwardingRule());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_forwardingRule,
          $fields: arg_$fields);
      checkForwardingRule(response as api.ForwardingRule);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_request = buildForwardingRule();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ForwardingRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkForwardingRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/forwardingRules'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/forwardingRules'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildForwardingRuleList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkForwardingRuleList(response as api.ForwardingRuleList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_request = buildForwardingRule();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ForwardingRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkForwardingRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/forwardingRules/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_request = buildRegionSetLabelsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/forwardingRules/'),
        );
        pathOffset += 17;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_region, arg_resource,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setTarget', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).forwardingRules;
      final arg_request = buildTargetReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/forwardingRules/'),
        );
        pathOffset += 17;
        index = path.indexOf('/setTarget', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setTarget'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setTarget(
          arg_request, arg_project, arg_region, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-GlobalAddressesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalAddresses;
      final arg_project = 'foo';
      final arg_address = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/addresses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/addresses/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_address'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_address,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalAddresses;
      final arg_project = 'foo';
      final arg_address = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/addresses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/addresses/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_address'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAddress());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_address, $fields: arg_$fields);
      checkAddress(response as api.Address);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalAddresses;
      final arg_request = buildAddress();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Address.fromJson(json as core.Map<core.String, core.dynamic>);
        checkAddress(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/addresses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/addresses'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalAddresses;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/addresses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/addresses'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAddressList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkAddressList(response as api.AddressList);
    });
  });

  unittest.group('resource-GlobalForwardingRulesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_project = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/forwardingRules/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_project = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/forwardingRules/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildForwardingRule());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_forwardingRule, $fields: arg_$fields);
      checkForwardingRule(response as api.ForwardingRule);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_request = buildForwardingRule();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ForwardingRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkForwardingRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/forwardingRules'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/forwardingRules'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildForwardingRuleList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkForwardingRuleList(response as api.ForwardingRuleList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_request = buildForwardingRule();
      final arg_project = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ForwardingRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkForwardingRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/forwardingRules/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_request = buildGlobalSetLabelsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/forwardingRules/'),
        );
        pathOffset += 24;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setTarget', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalForwardingRules;
      final arg_request = buildTargetReference();
      final arg_project = 'foo';
      final arg_forwardingRule = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/forwardingRules/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/forwardingRules/'),
        );
        pathOffset += 24;
        index = path.indexOf('/setTarget', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_forwardingRule'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setTarget'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setTarget(
          arg_request, arg_project, arg_forwardingRule,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-GlobalNetworkEndpointGroupsResource', () {
    unittest.test('method--attachNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_request =
          buildGlobalNetworkEndpointGroupsAttachEndpointsRequest();
      final arg_project = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.GlobalNetworkEndpointGroupsAttachEndpointsRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkGlobalNetworkEndpointGroupsAttachEndpointsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/networkEndpointGroups/'),
        );
        pathOffset += 30;
        index = path.indexOf('/attachNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/attachNetworkEndpoints'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.attachNetworkEndpoints(
          arg_request, arg_project, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/networkEndpointGroups/'),
        );
        pathOffset += 30;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--detachNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_request =
          buildGlobalNetworkEndpointGroupsDetachEndpointsRequest();
      final arg_project = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.GlobalNetworkEndpointGroupsDetachEndpointsRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkGlobalNetworkEndpointGroupsDetachEndpointsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/networkEndpointGroups/'),
        );
        pathOffset += 30;
        index = path.indexOf('/detachNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/detachNetworkEndpoints'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.detachNetworkEndpoints(
          arg_request, arg_project, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/networkEndpointGroups/'),
        );
        pathOffset += 30;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_networkEndpointGroup,
          $fields: arg_$fields);
      checkNetworkEndpointGroup(response as api.NetworkEndpointGroup);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_request = buildNetworkEndpointGroup();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroup.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/global/networkEndpointGroups'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/global/networkEndpointGroups'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupList(response as api.NetworkEndpointGroupList);
    });

    unittest.test('method--listNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/networkEndpointGroups/'),
        );
        pathOffset += 30;
        index = path.indexOf('/listNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/listNetworkEndpoints'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildNetworkEndpointGroupsListNetworkEndpoints());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listNetworkEndpoints(
          arg_project, arg_networkEndpointGroup,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupsListNetworkEndpoints(
          response as api.NetworkEndpointGroupsListNetworkEndpoints);
    });
  });

  unittest.group('resource-GlobalOperationsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOperations;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/operations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/aggregated/operations'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperationAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkOperationAggregatedList(response as api.OperationAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOperations;
      final arg_project = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/global/operations/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = '';
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      await res.delete(arg_project, arg_operation, $fields: arg_$fields);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOperations;
      final arg_project = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/global/operations/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_operation, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOperations;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/operations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/operations'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkOperationList(response as api.OperationList);
    });

    unittest.test('method--wait', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOperations;
      final arg_project = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/global/operations/'),
        );
        pathOffset += 19;
        index = path.indexOf('/wait', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 5),
          unittest.equals('/wait'),
        );
        pathOffset += 5;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.wait(arg_project, arg_operation, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-GlobalOrganizationOperationsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOrganizationOperations;
      final arg_operation = 'foo';
      final arg_parentId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('locations/global/operations/'),
        );
        pathOffset += 28;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = '';
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      await res.delete(arg_operation,
          parentId: arg_parentId, $fields: arg_$fields);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOrganizationOperations;
      final arg_operation = 'foo';
      final arg_parentId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('locations/global/operations/'),
        );
        pathOffset += 28;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_operation,
          parentId: arg_parentId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalOrganizationOperations;
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_parentId = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('locations/global/operations'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['parentId']!.first,
          unittest.equals(arg_parentId),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          parentId: arg_parentId,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkOperationList(response as api.OperationList);
    });
  });

  unittest.group('resource-GlobalPublicDelegatedPrefixesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalPublicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 32),
          unittest.equals('/global/publicDelegatedPrefixes/'),
        );
        pathOffset += 32;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_publicDelegatedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalPublicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 32),
          unittest.equals('/global/publicDelegatedPrefixes/'),
        );
        pathOffset += 32;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicDelegatedPrefix());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_publicDelegatedPrefix,
          $fields: arg_$fields);
      checkPublicDelegatedPrefix(response as api.PublicDelegatedPrefix);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalPublicDelegatedPrefixes;
      final arg_request = buildPublicDelegatedPrefix();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicDelegatedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicDelegatedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicDelegatedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 31),
          unittest.equals('/global/publicDelegatedPrefixes'),
        );
        pathOffset += 31;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalPublicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicDelegatedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 31),
          unittest.equals('/global/publicDelegatedPrefixes'),
        );
        pathOffset += 31;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicDelegatedPrefixList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPublicDelegatedPrefixList(response as api.PublicDelegatedPrefixList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).globalPublicDelegatedPrefixes;
      final arg_request = buildPublicDelegatedPrefix();
      final arg_project = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicDelegatedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicDelegatedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 32),
          unittest.equals('/global/publicDelegatedPrefixes/'),
        );
        pathOffset += 32;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_publicDelegatedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-HealthChecksResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/healthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/aggregated/healthChecks'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthChecksAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHealthChecksAggregatedList(
          response as api.HealthChecksAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_project = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/healthChecks/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_project = 'foo';
      final arg_healthCheck = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/healthChecks/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheck());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_healthCheck, $fields: arg_$fields);
      checkHealthCheck(response as api.HealthCheck);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/global/healthChecks'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/global/healthChecks'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheckList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHealthCheckList(response as api.HealthCheckList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/healthChecks/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).healthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/healthChecks/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-HttpHealthChecksResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_project = 'foo';
      final arg_httpHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpHealthChecks/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_httpHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_project = 'foo';
      final arg_httpHealthCheck = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpHealthChecks/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHttpHealthCheck());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_httpHealthCheck, $fields: arg_$fields);
      checkHttpHealthCheck(response as api.HttpHealthCheck);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_request = buildHttpHealthCheck();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/httpHealthChecks'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/httpHealthChecks'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHttpHealthCheckList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHttpHealthCheckList(response as api.HttpHealthCheckList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_request = buildHttpHealthCheck();
      final arg_project = 'foo';
      final arg_httpHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpHealthChecks/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_httpHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpHealthChecks;
      final arg_request = buildHttpHealthCheck();
      final arg_project = 'foo';
      final arg_httpHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpHealthChecks/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_httpHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-HttpsHealthChecksResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_project = 'foo';
      final arg_httpsHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/httpsHealthChecks/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpsHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_httpsHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_project = 'foo';
      final arg_httpsHealthCheck = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/httpsHealthChecks/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpsHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHttpsHealthCheck());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_httpsHealthCheck,
          $fields: arg_$fields);
      checkHttpsHealthCheck(response as api.HttpsHealthCheck);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_request = buildHttpsHealthCheck();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpsHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpsHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpsHealthChecks'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/httpsHealthChecks'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHttpsHealthCheckList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHttpsHealthCheckList(response as api.HttpsHealthCheckList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_request = buildHttpsHealthCheck();
      final arg_project = 'foo';
      final arg_httpsHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpsHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpsHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/httpsHealthChecks/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpsHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_httpsHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).httpsHealthChecks;
      final arg_request = buildHttpsHealthCheck();
      final arg_project = 'foo';
      final arg_httpsHealthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HttpsHealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHttpsHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/httpsHealthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/httpsHealthChecks/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_httpsHealthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_httpsHealthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-ImageFamilyViewsResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).imageFamilyViews;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_family = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/imageFamilyViews/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/imageFamilyViews/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_family'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildImageFamilyView());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_family,
          $fields: arg_$fields);
      checkImageFamilyView(response as api.ImageFamilyView);
    });
  });

  unittest.group('resource-ImagesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_project = 'foo';
      final arg_image = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_image'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_image,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deprecate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildDeprecationStatus();
      final arg_project = 'foo';
      final arg_image = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DeprecationStatus.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDeprecationStatus(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        index = path.indexOf('/deprecate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_image'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/deprecate'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deprecate(arg_request, arg_project, arg_image,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_project = 'foo';
      final arg_image = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_image'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildImage());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_image, $fields: arg_$fields);
      checkImage(response as api.Image);
    });

    unittest.test('method--getFromFamily', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_project = 'foo';
      final arg_family = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/family/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/images/family/'),
        );
        pathOffset += 22;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_family'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildImage());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getFromFamily(arg_project, arg_family,
          $fields: arg_$fields);
      checkImage(response as api.Image);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(arg_project, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildImage();
      final arg_project = 'foo';
      final arg_forceCreate = true;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Image.fromJson(json as core.Map<core.String, core.dynamic>);
        checkImage(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/global/images'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['forceCreate']!.first,
          unittest.equals('$arg_forceCreate'),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          forceCreate: arg_forceCreate,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/global/images'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildImageList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkImageList(response as api.ImageList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildImage();
      final arg_project = 'foo';
      final arg_image = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Image.fromJson(json as core.Map<core.String, core.dynamic>);
        checkImage(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_image'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_image,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildGlobalSetPolicyRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildGlobalSetLabelsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).images;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/images/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/images/'),
        );
        pathOffset += 15;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-InstanceGroupManagersResource', () {
    unittest.test('method--abandonInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersAbandonInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersAbandonInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersAbandonInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/abandonInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/abandonInstances'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.abandonInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/instanceGroupManagers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('/aggregated/instanceGroupManagers'),
        );
        pathOffset += 33;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildInstanceGroupManagerAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupManagerAggregatedList(
          response as api.InstanceGroupManagerAggregatedList);
    });

    unittest.test('method--applyUpdatesToInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersApplyUpdatesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersApplyUpdatesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersApplyUpdatesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/applyUpdatesToInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/applyUpdatesToInstances'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.applyUpdatesToInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--createInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersCreateInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersCreateInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersCreateInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/createInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/createInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.createInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersDeleteInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersDeleteInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersDeleteInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/deleteInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/deleteInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deletePerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request =
          buildInstanceGroupManagersDeletePerInstanceConfigsReq();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.InstanceGroupManagersDeletePerInstanceConfigsReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersDeletePerInstanceConfigsReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/deletePerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/deletePerInstanceConfigs'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deletePerInstanceConfigs(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupManager());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_zone, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkInstanceGroupManager(response as api.InstanceGroupManager);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManager();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManager.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManager(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/instanceGroupManagers'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/instanceGroupManagers'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupManagerList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupManagerList(response as api.InstanceGroupManagerList);
    });

    unittest.test('method--listErrors', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listErrors', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/listErrors'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildInstanceGroupManagersListErrorsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listErrors(
          arg_project, arg_zone, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupManagersListErrorsResponse(
          response as api.InstanceGroupManagersListErrorsResponse);
    });

    unittest.test('method--listManagedInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listManagedInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/listManagedInstances'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildInstanceGroupManagersListManagedInstancesResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listManagedInstances(
          arg_project, arg_zone, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupManagersListManagedInstancesResponse(
          response as api.InstanceGroupManagersListManagedInstancesResponse);
    });

    unittest.test('method--listPerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listPerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/listPerInstanceConfigs'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildInstanceGroupManagersListPerInstanceConfigsResp());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listPerInstanceConfigs(
          arg_project, arg_zone, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupManagersListPerInstanceConfigsResp(
          response as api.InstanceGroupManagersListPerInstanceConfigsResp);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManager();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManager.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManager(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--patchPerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request =
          buildInstanceGroupManagersPatchPerInstanceConfigsReq();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.InstanceGroupManagersPatchPerInstanceConfigsReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersPatchPerInstanceConfigsReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/patchPerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/patchPerInstanceConfigs'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patchPerInstanceConfigs(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--recreateInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersRecreateInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersRecreateInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersRecreateInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/recreateInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/recreateInstances'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.recreateInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--resize', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_size = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/resize', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/resize'),
        );
        pathOffset += 7;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['size']!.first),
          unittest.equals(arg_size),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.resize(
          arg_project, arg_zone, arg_instanceGroupManager, arg_size,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setInstanceTemplate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request =
          buildInstanceGroupManagersSetInstanceTemplateRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.InstanceGroupManagersSetInstanceTemplateRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersSetInstanceTemplateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/setInstanceTemplate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/setInstanceTemplate'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setInstanceTemplate(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setTargetPools', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request = buildInstanceGroupManagersSetTargetPoolsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManagersSetTargetPoolsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersSetTargetPoolsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/setTargetPools', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/setTargetPools'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setTargetPools(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updatePerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroupManagers;
      final arg_request =
          buildInstanceGroupManagersUpdatePerInstanceConfigsReq();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.InstanceGroupManagersUpdatePerInstanceConfigsReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManagersUpdatePerInstanceConfigsReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/updatePerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/updatePerInstanceConfigs'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updatePerInstanceConfigs(
          arg_request, arg_project, arg_zone, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-InstanceGroupsResource', () {
    unittest.test('method--addInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_request = buildInstanceGroupsAddInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupsAddInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupsAddInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/addInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/addInstances'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/instanceGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/aggregated/instanceGroups'),
        );
        pathOffset += 26;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupAggregatedList(
          response as api.InstanceGroupAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_zone, arg_instanceGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_instanceGroup,
          $fields: arg_$fields);
      checkInstanceGroup(response as api.InstanceGroup);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_request = buildInstanceGroup();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroup.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/instanceGroups'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/instanceGroups'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupList(response as api.InstanceGroupList);
    });

    unittest.test('method--listInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_request = buildInstanceGroupsListInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupsListInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupsListInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/listInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/listInstances'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupsListInstances());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroup,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceGroupsListInstances(
          response as api.InstanceGroupsListInstances);
    });

    unittest.test('method--removeInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_request = buildInstanceGroupsRemoveInstancesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupsRemoveInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupsRemoveInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/removeInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/removeInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeInstances(
          arg_request, arg_project, arg_zone, arg_instanceGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setNamedPorts', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceGroups;
      final arg_request = buildInstanceGroupsSetNamedPortsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupsSetNamedPortsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupsSetNamedPortsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/setNamedPorts', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/setNamedPorts'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setNamedPorts(
          arg_request, arg_project, arg_zone, arg_instanceGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-InstanceTemplatesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_project = 'foo';
      final arg_instanceTemplate = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/instanceTemplates/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceTemplate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_instanceTemplate,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_project = 'foo';
      final arg_instanceTemplate = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/instanceTemplates/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceTemplate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceTemplate());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_instanceTemplate,
          $fields: arg_$fields);
      checkInstanceTemplate(response as api.InstanceTemplate);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/instanceTemplates/'),
        );
        pathOffset += 26;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(arg_project, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_request = buildInstanceTemplate();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceTemplate.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceTemplate(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/instanceTemplates'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/instanceTemplates'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceTemplateList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceTemplateList(response as api.InstanceTemplateList);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_request = buildGlobalSetPolicyRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/instanceTemplates/'),
        );
        pathOffset += 26;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instanceTemplates;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/instanceTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/instanceTemplates/'),
        );
        pathOffset += 26;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-InstancesResource', () {
    unittest.test('method--addAccessConfig', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildAccessConfig();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_networkInterface = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.AccessConfig.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAccessConfig(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/addAccessConfig', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/addAccessConfig'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['networkInterface']!.first,
          unittest.equals(arg_networkInterface),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addAccessConfig(arg_request, arg_project,
          arg_zone, arg_instance, arg_networkInterface,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--addResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesAddResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesAddResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesAddResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/addResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/addResourcePolicies'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addResourcePolicies(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/instances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/aggregated/instances'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceAggregatedList(response as api.InstanceAggregatedList);
    });

    unittest.test('method--attachDisk', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildAttachedDisk();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_forceAttach = true;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.AttachedDisk.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAttachedDisk(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/attachDisk', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/attachDisk'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['forceAttach']!.first,
          unittest.equals('$arg_forceAttach'),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.attachDisk(
          arg_request, arg_project, arg_zone, arg_instance,
          forceAttach: arg_forceAttach,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--bulkInsert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildBulkInsertInstanceResource();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BulkInsertInstanceResource.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBulkInsertInstanceResource(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/bulkInsert', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/instances/bulkInsert'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.bulkInsert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteAccessConfig', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_accessConfig = 'foo';
      final arg_networkInterface = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/deleteAccessConfig', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/deleteAccessConfig'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['accessConfig']!.first,
          unittest.equals(arg_accessConfig),
        );
        unittest.expect(
          queryMap['networkInterface']!.first,
          unittest.equals(arg_networkInterface),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteAccessConfig(arg_project, arg_zone,
          arg_instance, arg_accessConfig, arg_networkInterface,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--detachDisk', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_deviceName = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/detachDisk', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/detachDisk'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['deviceName']!.first,
          unittest.equals(arg_deviceName),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.detachDisk(
          arg_project, arg_zone, arg_instance, arg_deviceName,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstance());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_instance,
          $fields: arg_$fields);
      checkInstance(response as api.Instance);
    });

    unittest.test('method--getEffectiveFirewalls', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_networkInterface = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/getEffectiveFirewalls', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/getEffectiveFirewalls'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['networkInterface']!.first,
          unittest.equals(arg_networkInterface),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildInstancesGetEffectiveFirewallsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getEffectiveFirewalls(
          arg_project, arg_zone, arg_instance, arg_networkInterface,
          $fields: arg_$fields);
      checkInstancesGetEffectiveFirewallsResponse(
          response as api.InstancesGetEffectiveFirewallsResponse);
    });

    unittest.test('method--getGuestAttributes', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_queryPath = 'foo';
      final arg_variableKey = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/getGuestAttributes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/getGuestAttributes'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['queryPath']!.first,
          unittest.equals(arg_queryPath),
        );
        unittest.expect(
          queryMap['variableKey']!.first,
          unittest.equals(arg_variableKey),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildGuestAttributes());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getGuestAttributes(
          arg_project, arg_zone, arg_instance,
          queryPath: arg_queryPath,
          variableKey: arg_variableKey,
          $fields: arg_$fields);
      checkGuestAttributes(response as api.GuestAttributes);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_zone, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--getScreenshot', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/screenshot', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/screenshot'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildScreenshot());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getScreenshot(
          arg_project, arg_zone, arg_instance,
          $fields: arg_$fields);
      checkScreenshot(response as api.Screenshot);
    });

    unittest.test('method--getSerialPortOutput', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_port = 42;
      final arg_start_1 = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/serialPort', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/serialPort'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['port']!.first),
          unittest.equals(arg_port),
        );
        unittest.expect(
          queryMap['start']!.first,
          unittest.equals(arg_start_1),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSerialPortOutput());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getSerialPortOutput(
          arg_project, arg_zone, arg_instance,
          port: arg_port, start_1: arg_start_1, $fields: arg_$fields);
      checkSerialPortOutput(response as api.SerialPortOutput);
    });

    unittest.test('method--getShieldedInstanceIdentity', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/getShieldedInstanceIdentity', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/getShieldedInstanceIdentity'),
        );
        pathOffset += 28;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildShieldedInstanceIdentity());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getShieldedInstanceIdentity(
          arg_project, arg_zone, arg_instance,
          $fields: arg_$fields);
      checkShieldedInstanceIdentity(response as api.ShieldedInstanceIdentity);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstance();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_sourceInstanceTemplate = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Instance.fromJson(json as core.Map<core.String, core.dynamic>);
        checkInstance(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/instances'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['sourceInstanceTemplate']!.first,
          unittest.equals(arg_sourceInstanceTemplate),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId,
          sourceInstanceTemplate: arg_sourceInstanceTemplate,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/instances'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceList(response as api.InstanceList);
    });

    unittest.test('method--listReferrers', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/referrers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/referrers'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceListReferrers());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listReferrers(
          arg_project, arg_zone, arg_instance,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInstanceListReferrers(response as api.InstanceListReferrers);
    });

    unittest.test('method--removeResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesRemoveResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesRemoveResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesRemoveResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/removeResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/removeResourcePolicies'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeResourcePolicies(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--reset', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/reset', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/reset'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.reset(arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--sendDiagnosticInterrupt', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/sendDiagnosticInterrupt', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/sendDiagnosticInterrupt'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = '';
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      await res.sendDiagnosticInterrupt(arg_project, arg_zone, arg_instance,
          $fields: arg_$fields);
    });

    unittest.test('method--setDeletionProtection', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_deletionProtection = true;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setDeletionProtection', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/setDeletionProtection'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['deletionProtection']!.first,
          unittest.equals('$arg_deletionProtection'),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setDeletionProtection(
          arg_project, arg_zone, arg_resource,
          deletionProtection: arg_deletionProtection,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setDiskAutoDelete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_autoDelete = true;
      final arg_deviceName = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setDiskAutoDelete', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setDiskAutoDelete'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['autoDelete']!.first,
          unittest.equals('$arg_autoDelete'),
        );
        unittest.expect(
          queryMap['deviceName']!.first,
          unittest.equals(arg_deviceName),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setDiskAutoDelete(
          arg_project, arg_zone, arg_instance, arg_autoDelete, arg_deviceName,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildZoneSetPolicyRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ZoneSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkZoneSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesSetLabelsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setMachineResources', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesSetMachineResourcesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesSetMachineResourcesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesSetMachineResourcesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setMachineResources', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/setMachineResources'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setMachineResources(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setMachineType', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesSetMachineTypeRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesSetMachineTypeRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesSetMachineTypeRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setMachineType', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/setMachineType'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setMachineType(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setMetadata', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildMetadata();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Metadata.fromJson(json as core.Map<core.String, core.dynamic>);
        checkMetadata(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setMetadata', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/setMetadata'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setMetadata(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setMinCpuPlatform', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesSetMinCpuPlatformRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesSetMinCpuPlatformRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesSetMinCpuPlatformRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setMinCpuPlatform', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setMinCpuPlatform'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setMinCpuPlatform(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setScheduling', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildScheduling();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Scheduling.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkScheduling(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setScheduling', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/setScheduling'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setScheduling(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setServiceAccount', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesSetServiceAccountRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesSetServiceAccountRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesSetServiceAccountRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setServiceAccount', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setServiceAccount'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setServiceAccount(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setShieldedInstanceIntegrityPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildShieldedInstanceIntegrityPolicy();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ShieldedInstanceIntegrityPolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkShieldedInstanceIntegrityPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setShieldedInstanceIntegrityPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 35),
          unittest.equals('/setShieldedInstanceIntegrityPolicy'),
        );
        pathOffset += 35;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setShieldedInstanceIntegrityPolicy(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setTags', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildTags();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Tags.fromJson(json as core.Map<core.String, core.dynamic>);
        checkTags(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/setTags', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/setTags'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setTags(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--simulateMaintenanceEvent', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/simulateMaintenanceEvent', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/simulateMaintenanceEvent'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.simulateMaintenanceEvent(
          arg_project, arg_zone, arg_instance,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--start', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/start', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/start'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.start(arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--startWithEncryptionKey', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstancesStartWithEncryptionKeyRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstancesStartWithEncryptionKeyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstancesStartWithEncryptionKeyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/startWithEncryptionKey', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/startWithEncryptionKey'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.startWithEncryptionKey(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--stop', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/stop', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 5),
          unittest.equals('/stop'),
        );
        pathOffset += 5;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.stop(arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildInstance();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_minimalAction = 'foo';
      final arg_mostDisruptiveAllowedAction = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Instance.fromJson(json as core.Map<core.String, core.dynamic>);
        checkInstance(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['minimalAction']!.first,
          unittest.equals(arg_minimalAction),
        );
        unittest.expect(
          queryMap['mostDisruptiveAllowedAction']!.first,
          unittest.equals(arg_mostDisruptiveAllowedAction),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_zone, arg_instance,
          minimalAction: arg_minimalAction,
          mostDisruptiveAllowedAction: arg_mostDisruptiveAllowedAction,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updateAccessConfig', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildAccessConfig();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_networkInterface = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.AccessConfig.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAccessConfig(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/updateAccessConfig', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/updateAccessConfig'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['networkInterface']!.first,
          unittest.equals(arg_networkInterface),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updateAccessConfig(arg_request, arg_project,
          arg_zone, arg_instance, arg_networkInterface,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updateDisplayDevice', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildDisplayDevice();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DisplayDevice.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDisplayDevice(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/updateDisplayDevice', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/updateDisplayDevice'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updateDisplayDevice(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updateNetworkInterface', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildNetworkInterface();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_networkInterface = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkInterface.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkInterface(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/updateNetworkInterface', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/updateNetworkInterface'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['networkInterface']!.first,
          unittest.equals(arg_networkInterface),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updateNetworkInterface(arg_request,
          arg_project, arg_zone, arg_instance, arg_networkInterface,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updateShieldedInstanceConfig', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).instances;
      final arg_request = buildShieldedInstanceConfig();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_instance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ShieldedInstanceConfig.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkShieldedInstanceConfig(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/instances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/instances/'),
        );
        pathOffset += 11;
        index = path.indexOf('/updateShieldedInstanceConfig', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instance'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/updateShieldedInstanceConfig'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updateShieldedInstanceConfig(
          arg_request, arg_project, arg_zone, arg_instance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-InterconnectAttachmentsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/interconnectAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 35),
          unittest.equals('/aggregated/interconnectAttachments'),
        );
        pathOffset += 35;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildInterconnectAttachmentAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInterconnectAttachmentAggregatedList(
          response as api.InterconnectAttachmentAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_interconnectAttachment = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/interconnectAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/interconnectAttachments/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnectAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_interconnectAttachment,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_interconnectAttachment = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/interconnectAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/interconnectAttachments/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnectAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnectAttachment());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_interconnectAttachment,
          $fields: arg_$fields);
      checkInterconnectAttachment(response as api.InterconnectAttachment);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_request = buildInterconnectAttachment();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_validateOnly = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InterconnectAttachment.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInterconnectAttachment(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/interconnectAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/interconnectAttachments'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['validateOnly']!.first,
          unittest.equals('$arg_validateOnly'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId,
          validateOnly: arg_validateOnly,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/interconnectAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/interconnectAttachments'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnectAttachmentList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInterconnectAttachmentList(
          response as api.InterconnectAttachmentList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectAttachments;
      final arg_request = buildInterconnectAttachment();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_interconnectAttachment = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InterconnectAttachment.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInterconnectAttachment(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/interconnectAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/interconnectAttachments/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnectAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_interconnectAttachment,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-InterconnectLocationsResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectLocations;
      final arg_project = 'foo';
      final arg_interconnectLocation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnectLocations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/global/interconnectLocations/'),
        );
        pathOffset += 30;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnectLocation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnectLocation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_interconnectLocation,
          $fields: arg_$fields);
      checkInterconnectLocation(response as api.InterconnectLocation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnectLocations;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnectLocations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/global/interconnectLocations'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnectLocationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInterconnectLocationList(response as api.InterconnectLocationList);
    });
  });

  unittest.group('resource-InterconnectsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_project = 'foo';
      final arg_interconnect = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/interconnects/'),
        );
        pathOffset += 22;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnect'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_interconnect,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_project = 'foo';
      final arg_interconnect = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/interconnects/'),
        );
        pathOffset += 22;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnect'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnect());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_interconnect, $fields: arg_$fields);
      checkInterconnect(response as api.Interconnect);
    });

    unittest.test('method--getDiagnostics', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_project = 'foo';
      final arg_interconnect = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/interconnects/'),
        );
        pathOffset += 22;
        index = path.indexOf('/getDiagnostics', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnect'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/getDiagnostics'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildInterconnectsGetDiagnosticsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getDiagnostics(arg_project, arg_interconnect,
          $fields: arg_$fields);
      checkInterconnectsGetDiagnosticsResponse(
          response as api.InterconnectsGetDiagnosticsResponse);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_request = buildInterconnect();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Interconnect.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInterconnect(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/interconnects'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/interconnects'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInterconnectList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkInterconnectList(response as api.InterconnectList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).interconnects;
      final arg_request = buildInterconnect();
      final arg_project = 'foo';
      final arg_interconnect = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Interconnect.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInterconnect(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/interconnects/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/global/interconnects/'),
        );
        pathOffset += 22;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_interconnect'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_interconnect,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-LicenseCodesResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenseCodes;
      final arg_project = 'foo';
      final arg_licenseCode = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenseCodes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/licenseCodes/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_licenseCode'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildLicenseCode());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_licenseCode, $fields: arg_$fields);
      checkLicenseCode(response as api.LicenseCode);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenseCodes;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenseCodes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/global/licenseCodes/'),
        );
        pathOffset += 21;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-LicensesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_project = 'foo';
      final arg_license = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/licenses/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_license'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_license,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_project = 'foo';
      final arg_license = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/licenses/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_license'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildLicense());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_license, $fields: arg_$fields);
      checkLicense(response as api.License);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/licenses/'),
        );
        pathOffset += 17;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(arg_project, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_request = buildLicense();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.License.fromJson(json as core.Map<core.String, core.dynamic>);
        checkLicense(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/licenses'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/licenses'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildLicensesListResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkLicensesListResponse(response as api.LicensesListResponse);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_request = buildGlobalSetPolicyRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/licenses/'),
        );
        pathOffset += 17;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).licenses;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/licenses/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/licenses/'),
        );
        pathOffset += 17;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-MachineTypesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).machineTypes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/machineTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/aggregated/machineTypes'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildMachineTypeAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkMachineTypeAggregatedList(response as api.MachineTypeAggregatedList);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).machineTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_machineType = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/machineTypes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/machineTypes/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_machineType'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildMachineType());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_machineType,
          $fields: arg_$fields);
      checkMachineType(response as api.MachineType);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).machineTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/machineTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/machineTypes'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildMachineTypeList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkMachineTypeList(response as api.MachineTypeList);
    });
  });

  unittest.group('resource-NetworkEndpointGroupsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('/aggregated/networkEndpointGroups'),
        );
        pathOffset += 33;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildNetworkEndpointGroupAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupAggregatedList(
          response as api.NetworkEndpointGroupAggregatedList);
    });

    unittest.test('method--attachNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_request = buildNetworkEndpointGroupsAttachEndpointsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroupsAttachEndpointsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroupsAttachEndpointsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        index = path.indexOf('/attachNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/attachNetworkEndpoints'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.attachNetworkEndpoints(
          arg_request, arg_project, arg_zone, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_zone, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--detachNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_request = buildNetworkEndpointGroupsDetachEndpointsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroupsDetachEndpointsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroupsDetachEndpointsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        index = path.indexOf('/detachNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/detachNetworkEndpoints'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.detachNetworkEndpoints(
          arg_request, arg_project, arg_zone, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_zone, arg_networkEndpointGroup,
          $fields: arg_$fields);
      checkNetworkEndpointGroup(response as api.NetworkEndpointGroup);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_request = buildNetworkEndpointGroup();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroup.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/networkEndpointGroups'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/networkEndpointGroups'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupList(response as api.NetworkEndpointGroupList);
    });

    unittest.test('method--listNetworkEndpoints', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_request = buildNetworkEndpointGroupsListEndpointsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroupsListEndpointsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroupsListEndpointsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listNetworkEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/listNetworkEndpoints'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildNetworkEndpointGroupsListNetworkEndpoints());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listNetworkEndpoints(
          arg_request, arg_project, arg_zone, arg_networkEndpointGroup,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupsListNetworkEndpoints(
          response as api.NetworkEndpointGroupsListNetworkEndpoints);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networkEndpointGroups;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-NetworksResource', () {
    unittest.test('method--addPeering', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_request = buildNetworksAddPeeringRequest();
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworksAddPeeringRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworksAddPeeringRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/addPeering', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/addPeering'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addPeering(
          arg_request, arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetwork());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_network, $fields: arg_$fields);
      checkNetwork(response as api.Network);
    });

    unittest.test('method--getEffectiveFirewalls', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/getEffectiveFirewalls', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/getEffectiveFirewalls'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildNetworksGetEffectiveFirewallsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getEffectiveFirewalls(arg_project, arg_network,
          $fields: arg_$fields);
      checkNetworksGetEffectiveFirewallsResponse(
          response as api.NetworksGetEffectiveFirewallsResponse);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_request = buildNetwork();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Network.fromJson(json as core.Map<core.String, core.dynamic>);
        checkNetwork(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/networks'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/networks'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkList(response as api.NetworkList);
    });

    unittest.test('method--listPeeringRoutes', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_direction = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_peeringName = 'foo';
      final arg_region = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/listPeeringRoutes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/listPeeringRoutes'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['direction']!.first,
          unittest.equals(arg_direction),
        );
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['peeringName']!.first,
          unittest.equals(arg_peeringName),
        );
        unittest.expect(
          queryMap['region']!.first,
          unittest.equals(arg_region),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildExchangedPeeringRoutesList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listPeeringRoutes(arg_project, arg_network,
          direction: arg_direction,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          peeringName: arg_peeringName,
          region: arg_region,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkExchangedPeeringRoutesList(
          response as api.ExchangedPeeringRoutesList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_request = buildNetwork();
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Network.fromJson(json as core.Map<core.String, core.dynamic>);
        checkNetwork(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--removePeering', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_request = buildNetworksRemovePeeringRequest();
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworksRemovePeeringRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworksRemovePeeringRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/removePeering', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/removePeering'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removePeering(
          arg_request, arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--switchToCustomMode', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/switchToCustomMode', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/switchToCustomMode'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.switchToCustomMode(arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updatePeering', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).networks;
      final arg_request = buildNetworksUpdatePeeringRequest();
      final arg_project = 'foo';
      final arg_network = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworksUpdatePeeringRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworksUpdatePeeringRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/networks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/networks/'),
        );
        pathOffset += 17;
        index = path.indexOf('/updatePeering', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_network'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/updatePeering'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updatePeering(
          arg_request, arg_project, arg_network,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-NodeGroupsResource', () {
    unittest.test('method--addNodes', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildNodeGroupsAddNodesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NodeGroupsAddNodesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNodeGroupsAddNodesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/addNodes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/addNodes'),
        );
        pathOffset += 9;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addNodes(
          arg_request, arg_project, arg_zone, arg_nodeGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/nodeGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/aggregated/nodeGroups'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeGroupAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeGroupAggregatedList(response as api.NodeGroupAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_zone, arg_nodeGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteNodes', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildNodeGroupsDeleteNodesRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NodeGroupsDeleteNodesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNodeGroupsDeleteNodesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/deleteNodes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/deleteNodes'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteNodes(
          arg_request, arg_project, arg_zone, arg_nodeGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_nodeGroup,
          $fields: arg_$fields);
      checkNodeGroup(response as api.NodeGroup);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_zone, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildNodeGroup();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_initialNodeCount = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.NodeGroup.fromJson(json as core.Map<core.String, core.dynamic>);
        checkNodeGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/nodeGroups'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['initialNodeCount']!.first),
          unittest.equals(arg_initialNodeCount),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(
          arg_request, arg_project, arg_zone, arg_initialNodeCount,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/nodeGroups'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeGroupList(response as api.NodeGroupList);
    });

    unittest.test('method--listNodes', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/listNodes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/listNodes'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeGroupsListNodes());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listNodes(arg_project, arg_zone, arg_nodeGroup,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeGroupsListNodes(response as api.NodeGroupsListNodes);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildNodeGroup();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.NodeGroup.fromJson(json as core.Map<core.String, core.dynamic>);
        checkNodeGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_zone, arg_nodeGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildZoneSetPolicyRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ZoneSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkZoneSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setNodeTemplate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildNodeGroupsSetNodeTemplateRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NodeGroupsSetNodeTemplateRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNodeGroupsSetNodeTemplateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/setNodeTemplate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/setNodeTemplate'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setNodeTemplate(
          arg_request, arg_project, arg_zone, arg_nodeGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeGroups;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/nodeGroups/'),
        );
        pathOffset += 12;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-NodeTemplatesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/nodeTemplates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/aggregated/nodeTemplates'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeTemplateAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeTemplateAggregatedList(
          response as api.NodeTemplateAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_nodeTemplate = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/nodeTemplates/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeTemplate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_nodeTemplate,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_nodeTemplate = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/nodeTemplates/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeTemplate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeTemplate());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_nodeTemplate,
          $fields: arg_$fields);
      checkNodeTemplate(response as api.NodeTemplate);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/nodeTemplates/'),
        );
        pathOffset += 15;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_region, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_request = buildNodeTemplate();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NodeTemplate.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNodeTemplate(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/nodeTemplates'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/nodeTemplates'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeTemplateList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeTemplateList(response as api.NodeTemplateList);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_request = buildRegionSetPolicyRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/nodeTemplates/'),
        );
        pathOffset += 15;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTemplates;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/nodeTemplates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/nodeTemplates/'),
        );
        pathOffset += 15;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-NodeTypesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTypes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/nodeTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/aggregated/nodeTypes'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeTypeAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeTypeAggregatedList(response as api.NodeTypeAggregatedList);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_nodeType = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeTypes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/nodeTypes/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_nodeType'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeType());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_nodeType,
          $fields: arg_$fields);
      checkNodeType(response as api.NodeType);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).nodeTypes;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/nodeTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/nodeTypes'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNodeTypeList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNodeTypeList(response as api.NodeTypeList);
    });
  });

  unittest.group('resource-PacketMirroringsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/packetMirrorings', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/aggregated/packetMirrorings'),
        );
        pathOffset += 28;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPacketMirroringAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPacketMirroringAggregatedList(
          response as api.PacketMirroringAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_packetMirroring = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/packetMirrorings/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_packetMirroring'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_packetMirroring,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_packetMirroring = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/packetMirrorings/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_packetMirroring'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPacketMirroring());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_packetMirroring,
          $fields: arg_$fields);
      checkPacketMirroring(response as api.PacketMirroring);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_request = buildPacketMirroring();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PacketMirroring.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPacketMirroring(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/packetMirrorings'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/packetMirrorings'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPacketMirroringList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPacketMirroringList(response as api.PacketMirroringList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_request = buildPacketMirroring();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_packetMirroring = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PacketMirroring.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPacketMirroring(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/packetMirrorings/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_packetMirroring'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_packetMirroring,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).packetMirrorings;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/packetMirrorings/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/packetMirrorings/'),
        );
        pathOffset += 18;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-ProjectsResource', () {
    unittest.test('method--disableXpnHost', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disableXpnHost', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/disableXpnHost'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.disableXpnHost(arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--disableXpnResource', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildProjectsDisableXpnResourceRequest();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ProjectsDisableXpnResourceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkProjectsDisableXpnResourceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disableXpnResource', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/disableXpnResource'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.disableXpnResource(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--enableXpnHost', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/enableXpnHost', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/enableXpnHost'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.enableXpnHost(arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--enableXpnResource', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildProjectsEnableXpnResourceRequest();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ProjectsEnableXpnResourceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkProjectsEnableXpnResourceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/enableXpnResource', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/enableXpnResource'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.enableXpnResource(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_project = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildProject());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, $fields: arg_$fields);
      checkProject(response as api.Project);
    });

    unittest.test('method--getXpnHost', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_project = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/getXpnHost', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/getXpnHost'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildProject());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getXpnHost(arg_project, $fields: arg_$fields);
      checkProject(response as api.Project);
    });

    unittest.test('method--getXpnResources', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/getXpnResources', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/getXpnResources'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildProjectsGetXpnResources());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getXpnResources(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkProjectsGetXpnResources(response as api.ProjectsGetXpnResources);
    });

    unittest.test('method--listXpnHosts', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildProjectsListXpnHostsRequest();
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ProjectsListXpnHostsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkProjectsListXpnHostsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/listXpnHosts', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/listXpnHosts'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildXpnHostList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listXpnHosts(arg_request, arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkXpnHostList(response as api.XpnHostList);
    });

    unittest.test('method--moveDisk', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildDiskMoveRequest();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.DiskMoveRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkDiskMoveRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/moveDisk', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/moveDisk'),
        );
        pathOffset += 9;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.moveDisk(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--moveInstance', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildInstanceMoveRequest();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceMoveRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceMoveRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/moveInstance', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/moveInstance'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.moveInstance(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setCommonInstanceMetadata', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildMetadata();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Metadata.fromJson(json as core.Map<core.String, core.dynamic>);
        checkMetadata(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/setCommonInstanceMetadata', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/setCommonInstanceMetadata'),
        );
        pathOffset += 26;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setCommonInstanceMetadata(
          arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setDefaultNetworkTier', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildProjectsSetDefaultNetworkTierRequest();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ProjectsSetDefaultNetworkTierRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkProjectsSetDefaultNetworkTierRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/setDefaultNetworkTier', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/setDefaultNetworkTier'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setDefaultNetworkTier(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setUsageExportBucket', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).projects;
      final arg_request = buildUsageExportLocation();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UsageExportLocation.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUsageExportLocation(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/setUsageExportBucket', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/setUsageExportBucket'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setUsageExportBucket(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-PublicAdvertisedPrefixesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicAdvertisedPrefixes;
      final arg_project = 'foo';
      final arg_publicAdvertisedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicAdvertisedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('/global/publicAdvertisedPrefixes/'),
        );
        pathOffset += 33;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicAdvertisedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_publicAdvertisedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicAdvertisedPrefixes;
      final arg_project = 'foo';
      final arg_publicAdvertisedPrefix = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicAdvertisedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('/global/publicAdvertisedPrefixes/'),
        );
        pathOffset += 33;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicAdvertisedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicAdvertisedPrefix());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_publicAdvertisedPrefix,
          $fields: arg_$fields);
      checkPublicAdvertisedPrefix(response as api.PublicAdvertisedPrefix);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicAdvertisedPrefixes;
      final arg_request = buildPublicAdvertisedPrefix();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicAdvertisedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicAdvertisedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicAdvertisedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 32),
          unittest.equals('/global/publicAdvertisedPrefixes'),
        );
        pathOffset += 32;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicAdvertisedPrefixes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicAdvertisedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 32),
          unittest.equals('/global/publicAdvertisedPrefixes'),
        );
        pathOffset += 32;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicAdvertisedPrefixList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPublicAdvertisedPrefixList(
          response as api.PublicAdvertisedPrefixList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicAdvertisedPrefixes;
      final arg_request = buildPublicAdvertisedPrefix();
      final arg_project = 'foo';
      final arg_publicAdvertisedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicAdvertisedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicAdvertisedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/publicAdvertisedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 33),
          unittest.equals('/global/publicAdvertisedPrefixes/'),
        );
        pathOffset += 33;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicAdvertisedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_publicAdvertisedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-PublicDelegatedPrefixesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/publicDelegatedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 35),
          unittest.equals('/aggregated/publicDelegatedPrefixes'),
        );
        pathOffset += 35;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildPublicDelegatedPrefixAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPublicDelegatedPrefixAggregatedList(
          response as api.PublicDelegatedPrefixAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/publicDelegatedPrefixes/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_publicDelegatedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/publicDelegatedPrefixes/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicDelegatedPrefix());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_publicDelegatedPrefix,
          $fields: arg_$fields);
      checkPublicDelegatedPrefix(response as api.PublicDelegatedPrefix);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_request = buildPublicDelegatedPrefix();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicDelegatedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicDelegatedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/publicDelegatedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/publicDelegatedPrefixes'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/publicDelegatedPrefixes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/publicDelegatedPrefixes'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPublicDelegatedPrefixList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkPublicDelegatedPrefixList(response as api.PublicDelegatedPrefixList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).publicDelegatedPrefixes;
      final arg_request = buildPublicDelegatedPrefix();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_publicDelegatedPrefix = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.PublicDelegatedPrefix.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkPublicDelegatedPrefix(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/publicDelegatedPrefixes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/publicDelegatedPrefixes/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_publicDelegatedPrefix'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_publicDelegatedPrefix,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionAutoscalersResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/autoscalers/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_autoscaler'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_autoscaler,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_autoscaler = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/autoscalers/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_autoscaler'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildAutoscaler());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_autoscaler,
          $fields: arg_$fields);
      checkAutoscaler(response as api.Autoscaler);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegionAutoscalerList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionAutoscalerList(response as api.RegionAutoscalerList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['autoscaler']!.first,
          unittest.equals(arg_autoscaler),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_region,
          autoscaler: arg_autoscaler,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionAutoscalers;
      final arg_request = buildAutoscaler();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_autoscaler = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Autoscaler.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkAutoscaler(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/autoscalers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/autoscalers'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['autoscaler']!.first,
          unittest.equals(arg_autoscaler),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(arg_request, arg_project, arg_region,
          autoscaler: arg_autoscaler,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionBackendServicesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/backendServices/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_backendService = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/backendServices/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendService());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_backendService,
          $fields: arg_$fields);
      checkBackendService(response as api.BackendService);
    });

    unittest.test('method--getHealth', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_request = buildResourceGroupReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_backendService = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ResourceGroupReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkResourceGroupReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/backendServices/'),
        );
        pathOffset += 17;
        index = path.indexOf('/getHealth', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/getHealth'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendServiceGroupHealth());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getHealth(
          arg_request, arg_project, arg_region, arg_backendService,
          $fields: arg_$fields);
      checkBackendServiceGroupHealth(response as api.BackendServiceGroupHealth);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/backendServices'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/backendServices'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildBackendServiceList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkBackendServiceList(response as api.BackendServiceList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/backendServices/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionBackendServices;
      final arg_request = buildBackendService();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_backendService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BackendService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBackendService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/backendServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/backendServices/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_backendService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_region, arg_backendService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionCommitmentsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionCommitments;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/commitments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/aggregated/commitments'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildCommitmentAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkCommitmentAggregatedList(response as api.CommitmentAggregatedList);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionCommitments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_commitment = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/commitments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/commitments/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_commitment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildCommitment());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_commitment,
          $fields: arg_$fields);
      checkCommitment(response as api.Commitment);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionCommitments;
      final arg_request = buildCommitment();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Commitment.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkCommitment(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/commitments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/commitments'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionCommitments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/commitments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/commitments'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildCommitmentList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkCommitmentList(response as api.CommitmentList);
    });
  });

  unittest.group('resource-RegionDiskTypesResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDiskTypes;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_diskType = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/diskTypes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/diskTypes/'),
        );
        pathOffset += 11;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_diskType'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskType());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_diskType,
          $fields: arg_$fields);
      checkDiskType(response as api.DiskType);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDiskTypes;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/diskTypes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/diskTypes'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegionDiskTypeList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionDiskTypeList(response as api.RegionDiskTypeList);
    });
  });

  unittest.group('resource-RegionDisksResource', () {
    unittest.test('method--addResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildRegionDisksAddResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionDisksAddResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionDisksAddResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/addResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/addResourcePolicies'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addResourcePolicies(
          arg_request, arg_project, arg_region, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--createSnapshot', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildSnapshot();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Snapshot.fromJson(json as core.Map<core.String, core.dynamic>);
        checkSnapshot(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/createSnapshot', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/createSnapshot'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.createSnapshot(
          arg_request, arg_project, arg_region, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDisk());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_disk,
          $fields: arg_$fields);
      checkDisk(response as api.Disk);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_region, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildDisk();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_sourceImage = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Disk.fromJson(json as core.Map<core.String, core.dynamic>);
        checkDisk(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/disks'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['sourceImage']!.first,
          unittest.equals(arg_sourceImage),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId,
          sourceImage: arg_sourceImage,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/disks'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildDiskList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkDiskList(response as api.DiskList);
    });

    unittest.test('method--removeResourcePolicies', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildRegionDisksRemoveResourcePoliciesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionDisksRemoveResourcePoliciesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionDisksRemoveResourcePoliciesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/removeResourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/removeResourcePolicies'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeResourcePolicies(
          arg_request, arg_project, arg_region, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--resize', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildRegionDisksResizeRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_disk = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionDisksResizeRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionDisksResizeRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/resize', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_disk'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/resize'),
        );
        pathOffset += 7;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.resize(
          arg_request, arg_project, arg_region, arg_disk,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildRegionSetPolicyRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildRegionSetLabelsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_region, arg_resource,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionDisks;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/disks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/disks/'),
        );
        pathOffset += 7;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-RegionHealthCheckServicesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthCheckServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheckService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthCheckServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/healthCheckServices/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheckService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_healthCheckService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthCheckServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheckService = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthCheckServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/healthCheckServices/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheckService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheckService());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_healthCheckService,
          $fields: arg_$fields);
      checkHealthCheckService(response as api.HealthCheckService);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthCheckServices;
      final arg_request = buildHealthCheckService();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheckService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheckService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthCheckServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/healthCheckServices'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthCheckServices;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthCheckServices', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/healthCheckServices'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheckServicesList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHealthCheckServicesList(response as api.HealthCheckServicesList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthCheckServices;
      final arg_request = buildHealthCheckService();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheckService = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheckService.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheckService(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthCheckServices/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/healthCheckServices/'),
        );
        pathOffset += 21;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheckService'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_healthCheckService,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionHealthChecksResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/healthChecks/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheck = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/healthChecks/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheck());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_healthCheck,
          $fields: arg_$fields);
      checkHealthCheck(response as api.HealthCheck);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/healthChecks'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/healthChecks'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildHealthCheckList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkHealthCheckList(response as api.HealthCheckList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/healthChecks/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionHealthChecks;
      final arg_request = buildHealthCheck();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_healthCheck = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.HealthCheck.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkHealthCheck(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/healthChecks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/healthChecks/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_healthCheck'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_region, arg_healthCheck,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionInstanceGroupManagersResource', () {
    unittest.test('method--abandonInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagersAbandonInstancesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagersAbandonInstancesRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersAbandonInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/abandonInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/abandonInstances'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.abandonInstances(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--applyUpdatesToInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request = buildRegionInstanceGroupManagersApplyUpdatesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionInstanceGroupManagersApplyUpdatesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersApplyUpdatesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/applyUpdatesToInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/applyUpdatesToInstances'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.applyUpdatesToInstances(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--createInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagersCreateInstancesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagersCreateInstancesRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersCreateInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/createInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/createInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.createInstances(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deleteInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagersDeleteInstancesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagersDeleteInstancesRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersDeleteInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/deleteInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/deleteInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deleteInstances(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--deletePerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagerDeleteInstanceConfigReq();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagerDeleteInstanceConfigReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagerDeleteInstanceConfigReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/deletePerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/deletePerInstanceConfigs'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.deletePerInstanceConfigs(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroupManager());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_instanceGroupManager,
          $fields: arg_$fields);
      checkInstanceGroupManager(response as api.InstanceGroupManager);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request = buildInstanceGroupManager();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManager.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManager(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/instanceGroupManagers'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/instanceGroupManagers'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegionInstanceGroupManagerList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupManagerList(
          response as api.RegionInstanceGroupManagerList);
    });

    unittest.test('method--listErrors', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listErrors', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/listErrors'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildRegionInstanceGroupManagersListErrorsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listErrors(
          arg_project, arg_region, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupManagersListErrorsResponse(
          response as api.RegionInstanceGroupManagersListErrorsResponse);
    });

    unittest.test('method--listManagedInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listManagedInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/listManagedInstances'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildRegionInstanceGroupManagersListInstancesResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listManagedInstances(
          arg_project, arg_region, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupManagersListInstancesResponse(
          response as api.RegionInstanceGroupManagersListInstancesResponse);
    });

    unittest.test('method--listPerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/listPerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/listPerInstanceConfigs'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildRegionInstanceGroupManagersListInstanceConfigsResp());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listPerInstanceConfigs(
          arg_project, arg_region, arg_instanceGroupManager,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupManagersListInstanceConfigsResp(
          response as api.RegionInstanceGroupManagersListInstanceConfigsResp);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request = buildInstanceGroupManager();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceGroupManager.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceGroupManager(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--patchPerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagerPatchInstanceConfigReq();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagerPatchInstanceConfigReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagerPatchInstanceConfigReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/patchPerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/patchPerInstanceConfigs'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patchPerInstanceConfigs(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--recreateInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request = buildRegionInstanceGroupManagersRecreateRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionInstanceGroupManagersRecreateRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersRecreateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/recreateInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/recreateInstances'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.recreateInstances(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--resize', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_size = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/resize', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/resize'),
        );
        pathOffset += 7;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['size']!.first),
          unittest.equals(arg_size),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.resize(
          arg_project, arg_region, arg_instanceGroupManager, arg_size,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setInstanceTemplate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request = buildRegionInstanceGroupManagersSetTemplateRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionInstanceGroupManagersSetTemplateRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersSetTemplateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/setInstanceTemplate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/setInstanceTemplate'),
        );
        pathOffset += 20;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setInstanceTemplate(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setTargetPools', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagersSetTargetPoolsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagersSetTargetPoolsRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagersSetTargetPoolsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/setTargetPools', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/setTargetPools'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setTargetPools(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--updatePerInstanceConfigs', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroupManagers;
      final arg_request =
          buildRegionInstanceGroupManagerUpdateInstanceConfigReq();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroupManager = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionInstanceGroupManagerUpdateInstanceConfigReq.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupManagerUpdateInstanceConfigReq(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroupManagers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/instanceGroupManagers/'),
        );
        pathOffset += 23;
        index = path.indexOf('/updatePerInstanceConfigs', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroupManager'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/updatePerInstanceConfigs'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.updatePerInstanceConfigs(
          arg_request, arg_project, arg_region, arg_instanceGroupManager,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionInstanceGroupsResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroups;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildInstanceGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_instanceGroup,
          $fields: arg_$fields);
      checkInstanceGroup(response as api.InstanceGroup);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroups;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/instanceGroups'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegionInstanceGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupList(response as api.RegionInstanceGroupList);
    });

    unittest.test('method--listInstances', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroups;
      final arg_request = buildRegionInstanceGroupsListInstancesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionInstanceGroupsListInstancesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupsListInstancesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/listInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/listInstances'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildRegionInstanceGroupsListInstances());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listInstances(
          arg_request, arg_project, arg_region, arg_instanceGroup,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionInstanceGroupsListInstances(
          response as api.RegionInstanceGroupsListInstances);
    });

    unittest.test('method--setNamedPorts', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstanceGroups;
      final arg_request = buildRegionInstanceGroupsSetNamedPortsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_instanceGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionInstanceGroupsSetNamedPortsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionInstanceGroupsSetNamedPortsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instanceGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/instanceGroups/'),
        );
        pathOffset += 16;
        index = path.indexOf('/setNamedPorts', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_instanceGroup'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/setNamedPorts'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setNamedPorts(
          arg_request, arg_project, arg_region, arg_instanceGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionInstancesResource', () {
    unittest.test('method--bulkInsert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionInstances;
      final arg_request = buildBulkInsertInstanceResource();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.BulkInsertInstanceResource.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkBulkInsertInstanceResource(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/instances/bulkInsert', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 21),
          unittest.equals('/instances/bulkInsert'),
        );
        pathOffset += 21;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.bulkInsert(
          arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionNetworkEndpointGroupsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_networkEndpointGroup,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_networkEndpointGroup = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/networkEndpointGroups/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/networkEndpointGroups/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_networkEndpointGroup'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroup());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_networkEndpointGroup,
          $fields: arg_$fields);
      checkNetworkEndpointGroup(response as api.NetworkEndpointGroup);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNetworkEndpointGroups;
      final arg_request = buildNetworkEndpointGroup();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NetworkEndpointGroup.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNetworkEndpointGroup(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/networkEndpointGroups'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNetworkEndpointGroups;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/networkEndpointGroups', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/networkEndpointGroups'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNetworkEndpointGroupList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNetworkEndpointGroupList(response as api.NetworkEndpointGroupList);
    });
  });

  unittest.group('resource-RegionNotificationEndpointsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNotificationEndpoints;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_notificationEndpoint = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/notificationEndpoints/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/notificationEndpoints/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_notificationEndpoint'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_notificationEndpoint,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNotificationEndpoints;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_notificationEndpoint = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/notificationEndpoints/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/notificationEndpoints/'),
        );
        pathOffset += 23;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_notificationEndpoint'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNotificationEndpoint());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_notificationEndpoint,
          $fields: arg_$fields);
      checkNotificationEndpoint(response as api.NotificationEndpoint);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNotificationEndpoints;
      final arg_request = buildNotificationEndpoint();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.NotificationEndpoint.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkNotificationEndpoint(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/notificationEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/notificationEndpoints'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionNotificationEndpoints;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/notificationEndpoints', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/notificationEndpoints'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildNotificationEndpointList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkNotificationEndpointList(response as api.NotificationEndpointList);
    });
  });

  unittest.group('resource-RegionOperationsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionOperations;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = '';
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      await res.delete(arg_project, arg_region, arg_operation,
          $fields: arg_$fields);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionOperations;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_operation,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionOperations;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/operations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/operations'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkOperationList(response as api.OperationList);
    });

    unittest.test('method--wait', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionOperations;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        index = path.indexOf('/wait', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 5),
          unittest.equals('/wait'),
        );
        pathOffset += 5;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.wait(arg_project, arg_region, arg_operation,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionSslCertificatesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionSslCertificates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_sslCertificate = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/sslCertificates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/sslCertificates/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslCertificate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_sslCertificate,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionSslCertificates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_sslCertificate = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/sslCertificates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/sslCertificates/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslCertificate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslCertificate());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_sslCertificate,
          $fields: arg_$fields);
      checkSslCertificate(response as api.SslCertificate);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionSslCertificates;
      final arg_request = buildSslCertificate();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SslCertificate.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSslCertificate(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/sslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/sslCertificates'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionSslCertificates;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/sslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/sslCertificates'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslCertificateList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSslCertificateList(response as api.SslCertificateList);
    });
  });

  unittest.group('resource-RegionTargetHttpProxiesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpProxies/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_targetHttpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpProxies/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_targetHttpProxy,
          $fields: arg_$fields);
      checkTargetHttpProxy(response as api.TargetHttpProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpProxies;
      final arg_request = buildTargetHttpProxy();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/targetHttpProxies'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/targetHttpProxies'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpProxyList(response as api.TargetHttpProxyList);
    });

    unittest.test('method--setUrlMap', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpProxies;
      final arg_request = buildUrlMapReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UrlMapReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUrlMapReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpProxies/'),
        );
        pathOffset += 19;
        index = path.indexOf('/setUrlMap', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setUrlMap'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setUrlMap(
          arg_request, arg_project, arg_region, arg_targetHttpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionTargetHttpsProxiesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpsProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_targetHttpsProxy,
          $fields: arg_$fields);
      checkTargetHttpsProxy(response as api.TargetHttpsProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_request = buildTargetHttpsProxy();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpsProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpsProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpsProxies'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpsProxies'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpsProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpsProxyList(response as api.TargetHttpsProxyList);
    });

    unittest.test('method--setSslCertificates', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_request =
          buildRegionTargetHttpsProxiesSetSslCertificatesRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.RegionTargetHttpsProxiesSetSslCertificatesRequest.fromJson(
                json as core.Map<core.String, core.dynamic>);
        checkRegionTargetHttpsProxiesSetSslCertificatesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        index = path.indexOf('/setSslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/setSslCertificates'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSslCertificates(
          arg_request, arg_project, arg_region, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setUrlMap', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionTargetHttpsProxies;
      final arg_request = buildUrlMapReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UrlMapReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUrlMapReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        index = path.indexOf('/setUrlMap', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setUrlMap'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setUrlMap(
          arg_request, arg_project, arg_region, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RegionUrlMapsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/urlMaps/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_urlMap = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/urlMaps/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMap());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_urlMap,
          $fields: arg_$fields);
      checkUrlMap(response as api.UrlMap);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/urlMaps'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/urlMaps'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMapList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkUrlMapList(response as api.UrlMapList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/urlMaps/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/urlMaps/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_region, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--validate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regionUrlMaps;
      final arg_request = buildRegionUrlMapsValidateRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_urlMap = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionUrlMapsValidateRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionUrlMapsValidateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/urlMaps/'),
        );
        pathOffset += 9;
        index = path.indexOf('/validate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/validate'),
        );
        pathOffset += 9;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMapsValidateResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.validate(
          arg_request, arg_project, arg_region, arg_urlMap,
          $fields: arg_$fields);
      checkUrlMapsValidateResponse(response as api.UrlMapsValidateResponse);
    });
  });

  unittest.group('resource-RegionsResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regions;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegion());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_region, $fields: arg_$fields);
      checkRegion(response as api.Region);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).regions;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/regions'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRegionList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRegionList(response as api.RegionList);
    });
  });

  unittest.group('resource-ReservationsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/reservations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/aggregated/reservations'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildReservationAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkReservationAggregatedList(response as api.ReservationAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_reservation = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_reservation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_zone, arg_reservation,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_reservation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_reservation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildReservation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_reservation,
          $fields: arg_$fields);
      checkReservation(response as api.Reservation);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_zone, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_request = buildReservation();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Reservation.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkReservation(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/reservations'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/reservations'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildReservationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkReservationList(response as api.ReservationList);
    });

    unittest.test('method--resize', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_request = buildReservationsResizeRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_reservation = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ReservationsResizeRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkReservationsResizeRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        index = path.indexOf('/resize', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_reservation'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/resize'),
        );
        pathOffset += 7;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.resize(
          arg_request, arg_project, arg_zone, arg_reservation,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_request = buildZoneSetPolicyRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ZoneSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkZoneSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).reservations;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/reservations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/reservations/'),
        );
        pathOffset += 14;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_zone, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-ResourcePoliciesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/resourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 28),
          unittest.equals('/aggregated/resourcePolicies'),
        );
        pathOffset += 28;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildResourcePolicyAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkResourcePolicyAggregatedList(
          response as api.ResourcePolicyAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resourcePolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/resourcePolicies/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resourcePolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_resourcePolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resourcePolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/resourcePolicies/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resourcePolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildResourcePolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_resourcePolicy,
          $fields: arg_$fields);
      checkResourcePolicy(response as api.ResourcePolicy);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/resourcePolicies/'),
        );
        pathOffset += 18;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_region, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_request = buildResourcePolicy();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ResourcePolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkResourcePolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/resourcePolicies'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/resourcePolicies'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildResourcePolicyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkResourcePolicyList(response as api.ResourcePolicyList);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_request = buildRegionSetPolicyRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/resourcePolicies/'),
        );
        pathOffset += 18;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).resourcePolicies;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/resourcePolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/resourcePolicies/'),
        );
        pathOffset += 18;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-RoutersResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/routers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/aggregated/routers'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRouterAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRouterAggregatedList(response as api.RouterAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_router,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRouter());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_router,
          $fields: arg_$fields);
      checkRouter(response as api.Router);
    });

    unittest.test('method--getNatMappingInfo', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        index = path.indexOf('/getNatMappingInfo', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/getNatMappingInfo'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVmEndpointNatMappingsList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getNatMappingInfo(
          arg_project, arg_region, arg_router,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkVmEndpointNatMappingsList(response as api.VmEndpointNatMappingsList);
    });

    unittest.test('method--getRouterStatus', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        index = path.indexOf('/getRouterStatus', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/getRouterStatus'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRouterStatusResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getRouterStatus(
          arg_project, arg_region, arg_router,
          $fields: arg_$fields);
      checkRouterStatusResponse(response as api.RouterStatusResponse);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_request = buildRouter();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Router.fromJson(json as core.Map<core.String, core.dynamic>);
        checkRouter(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/routers'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/routers'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRouterList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRouterList(response as api.RouterList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_request = buildRouter();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Router.fromJson(json as core.Map<core.String, core.dynamic>);
        checkRouter(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_router,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--preview', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_request = buildRouter();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Router.fromJson(json as core.Map<core.String, core.dynamic>);
        checkRouter(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        index = path.indexOf('/preview', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/preview'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRoutersPreviewResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.preview(
          arg_request, arg_project, arg_region, arg_router,
          $fields: arg_$fields);
      checkRoutersPreviewResponse(response as api.RoutersPreviewResponse);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routers;
      final arg_request = buildRouter();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_router = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Router.fromJson(json as core.Map<core.String, core.dynamic>);
        checkRouter(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/routers/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/routers/'),
        );
        pathOffset += 9;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_router'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(
          arg_request, arg_project, arg_region, arg_router,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-RoutesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routes;
      final arg_project = 'foo';
      final arg_route = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/routes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/routes/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_route'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_route,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routes;
      final arg_project = 'foo';
      final arg_route = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/routes/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/routes/'),
        );
        pathOffset += 15;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_route'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRoute());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_route, $fields: arg_$fields);
      checkRoute(response as api.Route);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routes;
      final arg_request = buildRoute();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.Route.fromJson(json as core.Map<core.String, core.dynamic>);
        checkRoute(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/routes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/global/routes'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).routes;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/routes', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 14),
          unittest.equals('/global/routes'),
        );
        pathOffset += 14;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildRouteList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkRouteList(response as api.RouteList);
    });
  });

  unittest.group('resource-SecurityPoliciesResource', () {
    unittest.test('method--addRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_request = buildSecurityPolicyRule();
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SecurityPolicyRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSecurityPolicyRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/addRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/addRule'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addRule(
          arg_request, arg_project, arg_securityPolicy,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_securityPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSecurityPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_securityPolicy, $fields: arg_$fields);
      checkSecurityPolicy(response as api.SecurityPolicy);
    });

    unittest.test('method--getRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_priority = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/getRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 8),
          unittest.equals('/getRule'),
        );
        pathOffset += 8;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSecurityPolicyRule());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getRule(arg_project, arg_securityPolicy,
          priority: arg_priority, $fields: arg_$fields);
      checkSecurityPolicyRule(response as api.SecurityPolicyRule);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_request = buildSecurityPolicy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SecurityPolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSecurityPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/securityPolicies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/securityPolicies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSecurityPolicyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSecurityPolicyList(response as api.SecurityPolicyList);
    });

    unittest.test('method--listPreconfiguredExpressionSets', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf(
            '/global/securityPolicies/listPreconfiguredExpressionSets',
            pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 56),
          unittest.equals(
              '/global/securityPolicies/listPreconfiguredExpressionSets'),
        );
        pathOffset += 56;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(
            buildSecurityPoliciesListPreconfiguredExpressionSetsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listPreconfiguredExpressionSets(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSecurityPoliciesListPreconfiguredExpressionSetsResponse(response
          as api.SecurityPoliciesListPreconfiguredExpressionSetsResponse);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_request = buildSecurityPolicy();
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SecurityPolicy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSecurityPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_securityPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--patchRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_request = buildSecurityPolicyRule();
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_priority = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SecurityPolicyRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSecurityPolicyRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/patchRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/patchRule'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patchRule(
          arg_request, arg_project, arg_securityPolicy,
          priority: arg_priority, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--removeRule', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).securityPolicies;
      final arg_project = 'foo';
      final arg_securityPolicy = 'foo';
      final arg_priority = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/securityPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/securityPolicies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/removeRule', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_securityPolicy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/removeRule'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['priority']!.first),
          unittest.equals(arg_priority),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeRule(arg_project, arg_securityPolicy,
          priority: arg_priority, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-ServiceAttachmentsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/serviceAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/aggregated/serviceAttachments'),
        );
        pathOffset += 30;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildServiceAttachmentAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkServiceAttachmentAggregatedList(
          response as api.ServiceAttachmentAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_serviceAttachment = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_serviceAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_serviceAttachment,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_serviceAttachment = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_serviceAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildServiceAttachment());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_serviceAttachment,
          $fields: arg_$fields);
      checkServiceAttachment(response as api.ServiceAttachment);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_region, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_request = buildServiceAttachment();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ServiceAttachment.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkServiceAttachment(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/serviceAttachments'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/serviceAttachments'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildServiceAttachmentList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkServiceAttachmentList(response as api.ServiceAttachmentList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_request = buildServiceAttachment();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_serviceAttachment = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.ServiceAttachment.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkServiceAttachment(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_serviceAttachment'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_serviceAttachment,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_request = buildRegionSetPolicyRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).serviceAttachments;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/serviceAttachments/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/serviceAttachments/'),
        );
        pathOffset += 20;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-SnapshotsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_project = 'foo';
      final arg_snapshot = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_snapshot'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_snapshot,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_project = 'foo';
      final arg_snapshot = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_snapshot'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSnapshot());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_snapshot, $fields: arg_$fields);
      checkSnapshot(response as api.Snapshot);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(arg_project, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/global/snapshots'),
        );
        pathOffset += 17;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSnapshotList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSnapshotList(response as api.SnapshotList);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_request = buildGlobalSetPolicyRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_request = buildGlobalSetLabelsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.GlobalSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkGlobalSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).snapshots;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/snapshots/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/global/snapshots/'),
        );
        pathOffset += 18;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-SslCertificatesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslCertificates;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/sslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/aggregated/sslCertificates'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslCertificateAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSslCertificateAggregatedList(
          response as api.SslCertificateAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslCertificates;
      final arg_project = 'foo';
      final arg_sslCertificate = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslCertificates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/sslCertificates/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslCertificate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_sslCertificate,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslCertificates;
      final arg_project = 'foo';
      final arg_sslCertificate = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslCertificates/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/sslCertificates/'),
        );
        pathOffset += 24;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslCertificate'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslCertificate());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_sslCertificate, $fields: arg_$fields);
      checkSslCertificate(response as api.SslCertificate);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslCertificates;
      final arg_request = buildSslCertificate();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SslCertificate.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSslCertificate(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/sslCertificates'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslCertificates;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/global/sslCertificates'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslCertificateList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSslCertificateList(response as api.SslCertificateList);
    });
  });

  unittest.group('resource-SslPoliciesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_project = 'foo';
      final arg_sslPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/global/sslPolicies/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_sslPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_project = 'foo';
      final arg_sslPolicy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/global/sslPolicies/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_sslPolicy, $fields: arg_$fields);
      checkSslPolicy(response as api.SslPolicy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_request = buildSslPolicy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.SslPolicy.fromJson(json as core.Map<core.String, core.dynamic>);
        checkSslPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslPolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/global/sslPolicies'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslPolicies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/global/sslPolicies'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSslPoliciesList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSslPoliciesList(response as api.SslPoliciesList);
    });

    unittest.test('method--listAvailableFeatures', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf(
            '/global/sslPolicies/listAvailableFeatures', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 41),
          unittest.equals('/global/sslPolicies/listAvailableFeatures'),
        );
        pathOffset += 41;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json
            .encode(buildSslPoliciesListAvailableFeaturesResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listAvailableFeatures(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSslPoliciesListAvailableFeaturesResponse(
          response as api.SslPoliciesListAvailableFeaturesResponse);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).sslPolicies;
      final arg_request = buildSslPolicy();
      final arg_project = 'foo';
      final arg_sslPolicy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.SslPolicy.fromJson(json as core.Map<core.String, core.dynamic>);
        checkSslPolicy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/sslPolicies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/global/sslPolicies/'),
        );
        pathOffset += 20;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_sslPolicy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_sslPolicy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-SubnetworksResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/subnetworks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/aggregated/subnetworks'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSubnetworkAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSubnetworkAggregatedList(response as api.SubnetworkAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_subnetwork = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_subnetwork'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_subnetwork,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--expandIpCidrRange', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildSubnetworksExpandIpCidrRangeRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_subnetwork = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SubnetworksExpandIpCidrRangeRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSubnetworksExpandIpCidrRangeRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        index = path.indexOf('/expandIpCidrRange', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_subnetwork'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/expandIpCidrRange'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.expandIpCidrRange(
          arg_request, arg_project, arg_region, arg_subnetwork,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_subnetwork = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_subnetwork'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSubnetwork());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_subnetwork,
          $fields: arg_$fields);
      checkSubnetwork(response as api.Subnetwork);
    });

    unittest.test('method--getIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_optionsRequestedPolicyVersion = 42;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        index = path.indexOf('/getIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/getIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['optionsRequestedPolicyVersion']!.first),
          unittest.equals(arg_optionsRequestedPolicyVersion),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getIamPolicy(
          arg_project, arg_region, arg_resource,
          optionsRequestedPolicyVersion: arg_optionsRequestedPolicyVersion,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildSubnetwork();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Subnetwork.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSubnetwork(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/subnetworks'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/subnetworks'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildSubnetworkList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkSubnetworkList(response as api.SubnetworkList);
    });

    unittest.test('method--listUsable', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/subnetworks/listUsable', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 34),
          unittest.equals('/aggregated/subnetworks/listUsable'),
        );
        pathOffset += 34;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp =
            convert.json.encode(buildUsableSubnetworksAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.listUsable(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkUsableSubnetworksAggregatedList(
          response as api.UsableSubnetworksAggregatedList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildSubnetwork();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_subnetwork = 'foo';
      final arg_drainTimeoutSeconds = 42;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.Subnetwork.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSubnetwork(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_subnetwork'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.int.parse(queryMap['drainTimeoutSeconds']!.first),
          unittest.equals(arg_drainTimeoutSeconds),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_region, arg_subnetwork,
          drainTimeoutSeconds: arg_drainTimeoutSeconds,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setIamPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildRegionSetPolicyRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetPolicyRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetPolicyRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        index = path.indexOf('/setIamPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setIamPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildPolicy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setIamPolicy(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkPolicy(response as api.Policy);
    });

    unittest.test('method--setPrivateIpGoogleAccess', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildSubnetworksSetPrivateIpGoogleAccessRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_subnetwork = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SubnetworksSetPrivateIpGoogleAccessRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSubnetworksSetPrivateIpGoogleAccessRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        index = path.indexOf('/setPrivateIpGoogleAccess', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_subnetwork'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/setPrivateIpGoogleAccess'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setPrivateIpGoogleAccess(
          arg_request, arg_project, arg_region, arg_subnetwork,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).subnetworks;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/subnetworks/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/subnetworks/'),
        );
        pathOffset += 13;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-TargetGrpcProxiesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetGrpcProxies;
      final arg_project = 'foo';
      final arg_targetGrpcProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetGrpcProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetGrpcProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetGrpcProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_targetGrpcProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetGrpcProxies;
      final arg_project = 'foo';
      final arg_targetGrpcProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetGrpcProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetGrpcProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetGrpcProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetGrpcProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_targetGrpcProxy, $fields: arg_$fields);
      checkTargetGrpcProxy(response as api.TargetGrpcProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetGrpcProxies;
      final arg_request = buildTargetGrpcProxy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetGrpcProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetGrpcProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetGrpcProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetGrpcProxies'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetGrpcProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetGrpcProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetGrpcProxies'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetGrpcProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetGrpcProxyList(response as api.TargetGrpcProxyList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetGrpcProxies;
      final arg_request = buildTargetGrpcProxy();
      final arg_project = 'foo';
      final arg_targetGrpcProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetGrpcProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetGrpcProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetGrpcProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetGrpcProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetGrpcProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_targetGrpcProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetHttpProxiesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/targetHttpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/aggregated/targetHttpProxies'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpProxyAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpProxyAggregatedList(
          response as api.TargetHttpProxyAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_project = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetHttpProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_targetHttpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_project = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetHttpProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_targetHttpProxy, $fields: arg_$fields);
      checkTargetHttpProxy(response as api.TargetHttpProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_request = buildTargetHttpProxy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetHttpProxies'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetHttpProxies'),
        );
        pathOffset += 25;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpProxyList(response as api.TargetHttpProxyList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_request = buildTargetHttpProxy();
      final arg_project = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetHttpProxies/'),
        );
        pathOffset += 26;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_targetHttpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setUrlMap', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpProxies;
      final arg_request = buildUrlMapReference();
      final arg_project = 'foo';
      final arg_targetHttpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UrlMapReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUrlMapReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetHttpProxies/'),
        );
        pathOffset += 19;
        index = path.indexOf('/setUrlMap', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setUrlMap'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setUrlMap(
          arg_request, arg_project, arg_targetHttpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetHttpsProxiesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/targetHttpsProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 30),
          unittest.equals('/aggregated/targetHttpsProxies'),
        );
        pathOffset += 30;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpsProxyAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpsProxyAggregatedList(
          response as api.TargetHttpsProxyAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/targetHttpsProxies/'),
        );
        pathOffset += 27;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/targetHttpsProxies/'),
        );
        pathOffset += 27;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpsProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_targetHttpsProxy,
          $fields: arg_$fields);
      checkTargetHttpsProxy(response as api.TargetHttpsProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildTargetHttpsProxy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpsProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpsProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetHttpsProxies'),
        );
        pathOffset += 26;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 26),
          unittest.equals('/global/targetHttpsProxies'),
        );
        pathOffset += 26;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetHttpsProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetHttpsProxyList(response as api.TargetHttpsProxyList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildTargetHttpsProxy();
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpsProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpsProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/targetHttpsProxies/'),
        );
        pathOffset += 27;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(
          arg_request, arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setQuicOverride', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildTargetHttpsProxiesSetQuicOverrideRequest();
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpsProxiesSetQuicOverrideRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpsProxiesSetQuicOverrideRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/targetHttpsProxies/'),
        );
        pathOffset += 27;
        index = path.indexOf('/setQuicOverride', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/setQuicOverride'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setQuicOverride(
          arg_request, arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setSslCertificates', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildTargetHttpsProxiesSetSslCertificatesRequest();
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetHttpsProxiesSetSslCertificatesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetHttpsProxiesSetSslCertificatesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        index = path.indexOf('/setSslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/setSslCertificates'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSslCertificates(
          arg_request, arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setSslPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildSslPolicyReference();
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SslPolicyReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSslPolicyReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/global/targetHttpsProxies/'),
        );
        pathOffset += 27;
        index = path.indexOf('/setSslPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setSslPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSslPolicy(
          arg_request, arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setUrlMap', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetHttpsProxies;
      final arg_request = buildUrlMapReference();
      final arg_project = 'foo';
      final arg_targetHttpsProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UrlMapReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUrlMapReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetHttpsProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 20),
          unittest.equals('/targetHttpsProxies/'),
        );
        pathOffset += 20;
        index = path.indexOf('/setUrlMap', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetHttpsProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setUrlMap'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setUrlMap(
          arg_request, arg_project, arg_targetHttpsProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetInstancesResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetInstances;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/targetInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 27),
          unittest.equals('/aggregated/targetInstances'),
        );
        pathOffset += 27;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetInstanceAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetInstanceAggregatedList(
          response as api.TargetInstanceAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetInstances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_targetInstance = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/targetInstances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/targetInstances/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetInstance'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_zone, arg_targetInstance,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetInstances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_targetInstance = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/targetInstances/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 17),
          unittest.equals('/targetInstances/'),
        );
        pathOffset += 17;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetInstance'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetInstance());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_targetInstance,
          $fields: arg_$fields);
      checkTargetInstance(response as api.TargetInstance);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetInstances;
      final arg_request = buildTargetInstance();
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetInstance.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetInstance(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/targetInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/targetInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_zone,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetInstances;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/targetInstances', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/targetInstances'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetInstanceList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetInstanceList(response as api.TargetInstanceList);
    });
  });

  unittest.group('resource-TargetPoolsResource', () {
    unittest.test('method--addHealthCheck', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetPoolsAddHealthCheckRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetPoolsAddHealthCheckRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetPoolsAddHealthCheckRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/addHealthCheck', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/addHealthCheck'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addHealthCheck(
          arg_request, arg_project, arg_region, arg_targetPool,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--addInstance', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetPoolsAddInstanceRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetPoolsAddInstanceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetPoolsAddInstanceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/addInstance', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/addInstance'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.addInstance(
          arg_request, arg_project, arg_region, arg_targetPool,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/targetPools', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/aggregated/targetPools'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetPoolAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetPoolAggregatedList(response as api.TargetPoolAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_targetPool,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetPool());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_targetPool,
          $fields: arg_$fields);
      checkTargetPool(response as api.TargetPool);
    });

    unittest.test('method--getHealth', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildInstanceReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.InstanceReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkInstanceReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/getHealth', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/getHealth'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetPoolInstanceHealth());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getHealth(
          arg_request, arg_project, arg_region, arg_targetPool,
          $fields: arg_$fields);
      checkTargetPoolInstanceHealth(response as api.TargetPoolInstanceHealth);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetPool();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetPool.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetPool(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/targetPools'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/targetPools'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetPoolList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetPoolList(response as api.TargetPoolList);
    });

    unittest.test('method--removeHealthCheck', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetPoolsRemoveHealthCheckRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetPoolsRemoveHealthCheckRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetPoolsRemoveHealthCheckRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/removeHealthCheck', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/removeHealthCheck'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeHealthCheck(
          arg_request, arg_project, arg_region, arg_targetPool,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--removeInstance', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetPoolsRemoveInstanceRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetPoolsRemoveInstanceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetPoolsRemoveInstanceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/removeInstance', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/removeInstance'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.removeInstance(
          arg_request, arg_project, arg_region, arg_targetPool,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setBackup', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetPools;
      final arg_request = buildTargetReference();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetPool = 'foo';
      final arg_failoverRatio = 42.0;
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetPools/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/targetPools/'),
        );
        pathOffset += 13;
        index = path.indexOf('/setBackup', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetPool'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setBackup'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          core.num.parse(queryMap['failoverRatio']!.first),
          unittest.equals(arg_failoverRatio),
        );
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setBackup(
          arg_request, arg_project, arg_region, arg_targetPool,
          failoverRatio: arg_failoverRatio,
          requestId: arg_requestId,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetSslProxiesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_targetSslProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetSslProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_targetSslProxy, $fields: arg_$fields);
      checkTargetSslProxy(response as api.TargetSslProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_request = buildTargetSslProxy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetSslProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetSslProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/targetSslProxies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/targetSslProxies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetSslProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetSslProxyList(response as api.TargetSslProxyList);
    });

    unittest.test('method--setBackendService', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_request = buildTargetSslProxiesSetBackendServiceRequest();
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetSslProxiesSetBackendServiceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetSslProxiesSetBackendServiceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setBackendService', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setBackendService'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setBackendService(
          arg_request, arg_project, arg_targetSslProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setProxyHeader', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_request = buildTargetSslProxiesSetProxyHeaderRequest();
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetSslProxiesSetProxyHeaderRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetSslProxiesSetProxyHeaderRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setProxyHeader', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/setProxyHeader'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setProxyHeader(
          arg_request, arg_project, arg_targetSslProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setSslCertificates', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_request = buildTargetSslProxiesSetSslCertificatesRequest();
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetSslProxiesSetSslCertificatesRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetSslProxiesSetSslCertificatesRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setSslCertificates', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/setSslCertificates'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSslCertificates(
          arg_request, arg_project, arg_targetSslProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setSslPolicy', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetSslProxies;
      final arg_request = buildSslPolicyReference();
      final arg_project = 'foo';
      final arg_targetSslProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.SslPolicyReference.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkSslPolicyReference(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetSslProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetSslProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setSslPolicy', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetSslProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/setSslPolicy'),
        );
        pathOffset += 13;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setSslPolicy(
          arg_request, arg_project, arg_targetSslProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetTcpProxiesResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_project = 'foo';
      final arg_targetTcpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetTcpProxies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetTcpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_targetTcpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_project = 'foo';
      final arg_targetTcpProxy = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetTcpProxies/'),
        );
        pathOffset += 25;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetTcpProxy'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetTcpProxy());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_targetTcpProxy, $fields: arg_$fields);
      checkTargetTcpProxy(response as api.TargetTcpProxy);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_request = buildTargetTcpProxy();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetTcpProxy.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetTcpProxy(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/targetTcpProxies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 24),
          unittest.equals('/global/targetTcpProxies'),
        );
        pathOffset += 24;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetTcpProxyList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetTcpProxyList(response as api.TargetTcpProxyList);
    });

    unittest.test('method--setBackendService', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_request = buildTargetTcpProxiesSetBackendServiceRequest();
      final arg_project = 'foo';
      final arg_targetTcpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetTcpProxiesSetBackendServiceRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetTcpProxiesSetBackendServiceRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetTcpProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setBackendService', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetTcpProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/setBackendService'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setBackendService(
          arg_request, arg_project, arg_targetTcpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--setProxyHeader', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetTcpProxies;
      final arg_request = buildTargetTcpProxiesSetProxyHeaderRequest();
      final arg_project = 'foo';
      final arg_targetTcpProxy = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetTcpProxiesSetProxyHeaderRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetTcpProxiesSetProxyHeaderRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/targetTcpProxies/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 25),
          unittest.equals('/global/targetTcpProxies/'),
        );
        pathOffset += 25;
        index = path.indexOf('/setProxyHeader', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetTcpProxy'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/setProxyHeader'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setProxyHeader(
          arg_request, arg_project, arg_targetTcpProxy,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-TargetVpnGatewaysResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetVpnGateways;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/targetVpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 29),
          unittest.equals('/aggregated/targetVpnGateways'),
        );
        pathOffset += 29;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetVpnGatewayAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetVpnGatewayAggregatedList(
          response as api.TargetVpnGatewayAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetVpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetVpnGateway = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetVpnGateways/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetVpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(
          arg_project, arg_region, arg_targetVpnGateway,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetVpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_targetVpnGateway = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetVpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/targetVpnGateways/'),
        );
        pathOffset += 19;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_targetVpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetVpnGateway());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(
          arg_project, arg_region, arg_targetVpnGateway,
          $fields: arg_$fields);
      checkTargetVpnGateway(response as api.TargetVpnGateway);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetVpnGateways;
      final arg_request = buildTargetVpnGateway();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TargetVpnGateway.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTargetVpnGateway(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetVpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/targetVpnGateways'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).targetVpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/targetVpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 18),
          unittest.equals('/targetVpnGateways'),
        );
        pathOffset += 18;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTargetVpnGatewayList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkTargetVpnGatewayList(response as api.TargetVpnGatewayList);
    });
  });

  unittest.group('resource-UrlMapsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/urlMaps', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/aggregated/urlMaps'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMapsAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkUrlMapsAggregatedList(response as api.UrlMapsAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMap());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_urlMap, $fields: arg_$fields);
      checkUrlMap(response as api.UrlMap);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/urlMaps'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--invalidateCache', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_request = buildCacheInvalidationRule();
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.CacheInvalidationRule.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkCacheInvalidationRule(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        index = path.indexOf('/invalidateCache', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/invalidateCache'),
        );
        pathOffset += 16;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.invalidateCache(
          arg_request, arg_project, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 15),
          unittest.equals('/global/urlMaps'),
        );
        pathOffset += 15;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMapList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkUrlMapList(response as api.UrlMapList);
    });

    unittest.test('method--patch', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.patch(arg_request, arg_project, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--update', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_request = buildUrlMap();
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.UrlMap.fromJson(json as core.Map<core.String, core.dynamic>);
        checkUrlMap(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.update(arg_request, arg_project, arg_urlMap,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--validate', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).urlMaps;
      final arg_request = buildUrlMapsValidateRequest();
      final arg_project = 'foo';
      final arg_urlMap = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.UrlMapsValidateRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkUrlMapsValidateRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/global/urlMaps/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 16),
          unittest.equals('/global/urlMaps/'),
        );
        pathOffset += 16;
        index = path.indexOf('/validate', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_urlMap'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/validate'),
        );
        pathOffset += 9;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildUrlMapsValidateResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.validate(arg_request, arg_project, arg_urlMap,
          $fields: arg_$fields);
      checkUrlMapsValidateResponse(response as api.UrlMapsValidateResponse);
    });
  });

  unittest.group('resource-VpnGatewaysResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/vpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 23),
          unittest.equals('/aggregated/vpnGateways'),
        );
        pathOffset += 23;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnGatewayAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkVpnGatewayAggregatedList(response as api.VpnGatewayAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_vpnGateway = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/vpnGateways/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_vpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_vpnGateway,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_vpnGateway = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/vpnGateways/'),
        );
        pathOffset += 13;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_vpnGateway'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnGateway());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_vpnGateway,
          $fields: arg_$fields);
      checkVpnGateway(response as api.VpnGateway);
    });

    unittest.test('method--getStatus', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_vpnGateway = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/vpnGateways/'),
        );
        pathOffset += 13;
        index = path.indexOf('/getStatus', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_vpnGateway'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/getStatus'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnGatewaysGetStatusResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.getStatus(
          arg_project, arg_region, arg_vpnGateway,
          $fields: arg_$fields);
      checkVpnGatewaysGetStatusResponse(
          response as api.VpnGatewaysGetStatusResponse);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_request = buildVpnGateway();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.VpnGateway.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkVpnGateway(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/vpnGateways'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/vpnGateways'),
        );
        pathOffset += 12;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnGatewayList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkVpnGatewayList(response as api.VpnGatewayList);
    });

    unittest.test('method--setLabels', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_request = buildRegionSetLabelsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.RegionSetLabelsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkRegionSetLabelsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/vpnGateways/'),
        );
        pathOffset += 13;
        index = path.indexOf('/setLabels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 10),
          unittest.equals('/setLabels'),
        );
        pathOffset += 10;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.setLabels(
          arg_request, arg_project, arg_region, arg_resource,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--testIamPermissions', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnGateways;
      final arg_request = buildTestPermissionsRequest();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_resource = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj = api.TestPermissionsRequest.fromJson(
            json as core.Map<core.String, core.dynamic>);
        checkTestPermissionsRequest(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnGateways/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 13),
          unittest.equals('/vpnGateways/'),
        );
        pathOffset += 13;
        index = path.indexOf('/testIamPermissions', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_resource'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 19),
          unittest.equals('/testIamPermissions'),
        );
        pathOffset += 19;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildTestPermissionsResponse());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.testIamPermissions(
          arg_request, arg_project, arg_region, arg_resource,
          $fields: arg_$fields);
      checkTestPermissionsResponse(response as api.TestPermissionsResponse);
    });
  });

  unittest.group('resource-VpnTunnelsResource', () {
    unittest.test('method--aggregatedList', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnTunnels;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_includeAllScopes = true;
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/aggregated/vpnTunnels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 22),
          unittest.equals('/aggregated/vpnTunnels'),
        );
        pathOffset += 22;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          queryMap['includeAllScopes']!.first,
          unittest.equals('$arg_includeAllScopes'),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnTunnelAggregatedList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.aggregatedList(arg_project,
          filter: arg_filter,
          includeAllScopes: arg_includeAllScopes,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkVpnTunnelAggregatedList(response as api.VpnTunnelAggregatedList);
    });

    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnTunnels;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_vpnTunnel = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnTunnels/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/vpnTunnels/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_vpnTunnel'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.delete(arg_project, arg_region, arg_vpnTunnel,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnTunnels;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_vpnTunnel = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnTunnels/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/vpnTunnels/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_vpnTunnel'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnTunnel());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_region, arg_vpnTunnel,
          $fields: arg_$fields);
      checkVpnTunnel(response as api.VpnTunnel);
    });

    unittest.test('method--insert', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnTunnels;
      final arg_request = buildVpnTunnel();
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_requestId = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final obj =
            api.VpnTunnel.fromJson(json as core.Map<core.String, core.dynamic>);
        checkVpnTunnel(obj);

        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnTunnels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/vpnTunnels'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['requestId']!.first,
          unittest.equals(arg_requestId),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.insert(arg_request, arg_project, arg_region,
          requestId: arg_requestId, $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).vpnTunnels;
      final arg_project = 'foo';
      final arg_region = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/regions/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('/regions/'),
        );
        pathOffset += 9;
        index = path.indexOf('/vpnTunnels', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_region'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/vpnTunnels'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildVpnTunnelList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_region,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkVpnTunnelList(response as api.VpnTunnelList);
    });
  });

  unittest.group('resource-ZoneOperationsResource', () {
    unittest.test('method--delete', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zoneOperations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = '';
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      await res.delete(arg_project, arg_zone, arg_operation,
          $fields: arg_$fields);
    });

    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zoneOperations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.get(arg_project, arg_zone, arg_operation,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zoneOperations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/operations', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('/operations'),
        );
        pathOffset += 11;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperationList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project, arg_zone,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkOperationList(response as api.OperationList);
    });

    unittest.test('method--wait', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zoneOperations;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_operation = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        index = path.indexOf('/operations/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 12),
          unittest.equals('/operations/'),
        );
        pathOffset += 12;
        index = path.indexOf('/wait', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_operation'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 5),
          unittest.equals('/wait'),
        );
        pathOffset += 5;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildOperation());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.wait(arg_project, arg_zone, arg_operation,
          $fields: arg_$fields);
      checkOperation(response as api.Operation);
    });
  });

  unittest.group('resource-ZonesResource', () {
    unittest.test('method--get', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zones;
      final arg_project = 'foo';
      final arg_zone = 'foo';
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones/', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 7),
          unittest.equals('/zones/'),
        );
        pathOffset += 7;
        subPart = core.Uri.decodeQueryComponent(path.substring(pathOffset));
        pathOffset = path.length;
        unittest.expect(
          subPart,
          unittest.equals('$arg_zone'),
        );

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildZone());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response =
          await res.get(arg_project, arg_zone, $fields: arg_$fields);
      checkZone(response as api.Zone);
    });

    unittest.test('method--list', () async {
      final mock = HttpServerMock();
      final res = api.ComputeApi(mock).zones;
      final arg_project = 'foo';
      final arg_filter = 'foo';
      final arg_maxResults = 42;
      final arg_orderBy = 'foo';
      final arg_pageToken = 'foo';
      final arg_returnPartialSuccess = true;
      final arg_$fields = 'foo';
      mock.register(unittest.expectAsync2((http.BaseRequest req, json) {
        final path = (req.url).path;
        var pathOffset = 0;
        core.int index;
        core.String subPart;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 1),
          unittest.equals('/'),
        );
        pathOffset += 1;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 11),
          unittest.equals('compute/v1/'),
        );
        pathOffset += 11;
        unittest.expect(
          path.substring(pathOffset, pathOffset + 9),
          unittest.equals('projects/'),
        );
        pathOffset += 9;
        index = path.indexOf('/zones', pathOffset);
        unittest.expect(index >= 0, unittest.isTrue);
        subPart =
            core.Uri.decodeQueryComponent(path.substring(pathOffset, index));
        pathOffset = index;
        unittest.expect(
          subPart,
          unittest.equals('$arg_project'),
        );
        unittest.expect(
          path.substring(pathOffset, pathOffset + 6),
          unittest.equals('/zones'),
        );
        pathOffset += 6;

        final query = (req.url).query;
        var queryOffset = 0;
        final queryMap = <core.String, core.List<core.String>>{};
        void addQueryParam(core.String n, core.String v) =>
            queryMap.putIfAbsent(n, () => []).add(v);

        if (query.isNotEmpty) {
          for (var part in query.split('&')) {
            final keyValue = part.split('=');
            addQueryParam(
              core.Uri.decodeQueryComponent(keyValue[0]),
              core.Uri.decodeQueryComponent(keyValue[1]),
            );
          }
        }
        unittest.expect(
          queryMap['filter']!.first,
          unittest.equals(arg_filter),
        );
        unittest.expect(
          core.int.parse(queryMap['maxResults']!.first),
          unittest.equals(arg_maxResults),
        );
        unittest.expect(
          queryMap['orderBy']!.first,
          unittest.equals(arg_orderBy),
        );
        unittest.expect(
          queryMap['pageToken']!.first,
          unittest.equals(arg_pageToken),
        );
        unittest.expect(
          queryMap['returnPartialSuccess']!.first,
          unittest.equals('$arg_returnPartialSuccess'),
        );
        unittest.expect(
          queryMap['fields']!.first,
          unittest.equals(arg_$fields),
        );

        final h = {
          'content-type': 'application/json; charset=utf-8',
        };
        final resp = convert.json.encode(buildZoneList());
        return async.Future.value(stringResponse(200, h, resp));
      }), true);
      final response = await res.list(arg_project,
          filter: arg_filter,
          maxResults: arg_maxResults,
          orderBy: arg_orderBy,
          pageToken: arg_pageToken,
          returnPartialSuccess: arg_returnPartialSuccess,
          $fields: arg_$fields);
      checkZoneList(response as api.ZoneList);
    });
  });
}
